
C:\Users\14377\AppData\Local\Temp\arduino\sketches\58BDD3BA43D2DBA3B7A8D2180303254D/sport_main_code_2023.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 af 00 	jmp	0x15e	; 0x15e <__ctors_end>
       4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
       8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
       c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      10:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      14:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      18:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      1c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      20:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      24:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      28:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      2c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      30:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      34:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      38:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      3c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      40:	0c 94 24 07 	jmp	0xe48	; 0xe48 <__vector_16>
      44:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      48:	0c 94 f5 07 	jmp	0xfea	; 0xfea <__vector_18>
      4c:	0c 94 cb 07 	jmp	0xf96	; 0xf96 <__vector_19>
      50:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      54:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      58:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      5c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      60:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      64:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      68:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      6c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      70:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      74:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      78:	0c 94 95 07 	jmp	0xf2a	; 0xf2a <__vector_30>
      7c:	0c 94 6b 07 	jmp	0xed6	; 0xed6 <__vector_31>
      80:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      84:	0c 94 2b 08 	jmp	0x1056	; 0x1056 <__vector_33>
      88:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>

0000008c <__trampolines_end>:
__trampolines_start():
      8c:	00 00       	nop
      8e:	3a 00       	.word	0x003a	; ????
      90:	37 00       	.word	0x0037	; ????
      92:	34 00       	.word	0x0034	; ????
      94:	31 00       	.word	0x0031	; ????
      96:	22 00       	.word	0x0022	; ????
      98:	61 00       	.word	0x0061	; ????
      9a:	64 00       	.word	0x0064	; ????

0000009c <port_to_output_PGM>:
      9c:	00 00 3b 00 38 00 35 00 32 00 23 00 62 00 65 00     ..;.8.5.2.#.b.e.

000000ac <port_to_input_PGM>:
      ac:	00 00 39 00 36 00 33 00 30 00 21 00 20 00 63 00     ..9.6.3.0.!. .c.

000000bc <digital_pin_to_port_PGM>:
      bc:	05 05 05 05 05 05 05 05 02 02 02 02 02 02 02 02     ................
      cc:	07 07 04 04 04 04 04 04 04 04 07 07 03 03 03 03     ................
      dc:	03 03 03 03 07 01 01 01 01 01 01 01 01 06 06 06     ................
      ec:	06 06 06 06 06                                      .....

000000f1 <digital_pin_to_bit_mask_PGM>:
      f1:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.
     101:	08 10 01 02 04 08 10 20 40 80 01 02 01 02 04 08     ....... @.......
     111:	10 20 40 80 04 80 40 20 10 08 04 02 01 01 02 04     . @...@ ........
     121:	08 10 20 40 80                                      .. @.

00000126 <digital_pin_to_timer_PGM>:
     126:	00 00 00 0a 0b 0c 00 00 00 00 00 00 01 04 05 06     ................
	...

0000015c <__ctors_start>:
__ctors_start():
     15c:	44 1a       	sub	r4, r20

0000015e <__ctors_end>:
__dtors_end():
     15e:	11 24       	eor	r1, r1
     160:	1f be       	out	0x3f, r1	; 63
     162:	cf ef       	ldi	r28, 0xFF	; 255
     164:	d0 e1       	ldi	r29, 0x10	; 16
     166:	de bf       	out	0x3e, r29	; 62
     168:	cd bf       	out	0x3d, r28	; 61

0000016a <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2373
     16a:	18 e0       	ldi	r17, 0x08	; 8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2374
     16c:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2375
     16e:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2376
     170:	e2 e1       	ldi	r30, 0x12	; 18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2377
     172:	fc e5       	ldi	r31, 0x5C	; 92
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2378
     174:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2379
     176:	0b bf       	out	0x3b, r16	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2380
     178:	02 c0       	rjmp	.+4      	; 0x17e <__do_copy_data+0x14>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2382
     17a:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2383
     17c:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2385
     17e:	aa 31       	cpi	r26, 0x1A	; 26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2386
     180:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2387
     182:	d9 f7       	brne	.-10     	; 0x17a <__do_copy_data+0x10>

00000184 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     184:	2a e0       	ldi	r18, 0x0A	; 10
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     186:	aa e1       	ldi	r26, 0x1A	; 26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     188:	b8 e0       	ldi	r27, 0x08	; 8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     18a:	01 c0       	rjmp	.+2      	; 0x18e <.do_clear_bss_start>

0000018c <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     18c:	1d 92       	st	X+, r1

0000018e <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     18e:	ac 38       	cpi	r26, 0x8C	; 140
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     190:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     192:	e1 f7       	brne	.-8      	; 0x18c <.do_clear_bss_loop>

00000194 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     194:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     196:	cf ea       	ldi	r28, 0xAF	; 175
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     198:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     19a:	04 c0       	rjmp	.+8      	; 0x1a4 <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     19c:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     19e:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     1a0:	0e 94 e4 2d 	call	0x5bc8	; 0x5bc8 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     1a4:	ce 3a       	cpi	r28, 0xAE	; 174
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     1a6:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     1a8:	c9 f7       	brne	.-14     	; 0x19c <__do_global_ctors+0x8>
     1aa:	0e 94 c1 1a 	call	0x3582	; 0x3582 <main>
     1ae:	0c 94 07 2e 	jmp	0x5c0e	; 0x5c0e <_exit>

000001b2 <__bad_interrupt>:
__vector_22():
     1b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b6 <printf_putchar(char, __file*)>:
printf_putchar():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:204
}

// Custom implementation of printf borrowed from the teensy core files
static int16_t printf_putchar(char c, FILE *fp)
{
  ((class Print *)(fdev_get_udata(fp)))->write((uint8_t)c);
     1b6:	fb 01       	movw	r30, r22
     1b8:	a4 85       	ldd	r26, Z+12	; 0x0c
     1ba:	b5 85       	ldd	r27, Z+13	; 0x0d
     1bc:	ed 91       	ld	r30, X+
     1be:	fc 91       	ld	r31, X
     1c0:	11 97       	sbiw	r26, 0x01	; 1
     1c2:	01 90       	ld	r0, Z+
     1c4:	f0 81       	ld	r31, Z
     1c6:	e0 2d       	mov	r30, r0
     1c8:	68 2f       	mov	r22, r24
     1ca:	cd 01       	movw	r24, r26
     1cc:	09 95       	icall
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:206
  return 0;
}
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	80 e0       	ldi	r24, 0x00	; 0
     1d2:	08 95       	ret

000001d4 <TwoWire::read()>:
read():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:303
int TwoWire::read(void)
{
  int value = -1;

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
     1d4:	90 91 dd 08 	lds	r25, 0x08DD	; 0x8008dd <TwoWire::rxBufferIndex>
     1d8:	80 91 dc 08 	lds	r24, 0x08DC	; 0x8008dc <TwoWire::rxBufferLength>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:300
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
     1dc:	2f ef       	ldi	r18, 0xFF	; 255
     1de:	3f ef       	ldi	r19, 0xFF	; 255
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:303

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
     1e0:	98 17       	cp	r25, r24
     1e2:	48 f4       	brcc	.+18     	; 0x1f6 <TwoWire::read()+0x22>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:304
    value = rxBuffer[rxBufferIndex];
     1e4:	e9 2f       	mov	r30, r25
     1e6:	f0 e0       	ldi	r31, 0x00	; 0
     1e8:	e4 54       	subi	r30, 0x44	; 68
     1ea:	f7 4f       	sbci	r31, 0xF7	; 247
     1ec:	20 81       	ld	r18, Z
     1ee:	30 e0       	ldi	r19, 0x00	; 0
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:305
    ++rxBufferIndex;
     1f0:	9f 5f       	subi	r25, 0xFF	; 255
     1f2:	90 93 dd 08 	sts	0x08DD, r25	; 0x8008dd <TwoWire::rxBufferIndex>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:309
  }

  return value;
}
     1f6:	c9 01       	movw	r24, r18
     1f8:	08 95       	ret

000001fa <turnOffPWM>:
turnOffPWM():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
     1fa:	81 50       	subi	r24, 0x01	; 1
     1fc:	8c 30       	cpi	r24, 0x0C	; 12
     1fe:	88 f5       	brcc	.+98     	; 0x262 <turnOffPWM+0x68>
     200:	e8 2f       	mov	r30, r24
     202:	f0 e0       	ldi	r31, 0x00	; 0
     204:	ea 5f       	subi	r30, 0xFA	; 250
     206:	fe 4f       	sbci	r31, 0xFE	; 254
     208:	0c 94 e4 2d 	jmp	0x5bc8	; 0x5bc8 <__tablejump2__>
     20c:	2e 01       	movw	r4, r28
     20e:	2e 01       	movw	r4, r28
     210:	31 01       	movw	r6, r2
     212:	12 01       	movw	r2, r4
     214:	16 01       	movw	r2, r12
     216:	19 01       	movw	r2, r18
     218:	1c 01       	movw	r2, r24
     21a:	31 01       	movw	r6, r2
     21c:	31 01       	movw	r6, r2
     21e:	20 01       	movw	r4, r0
     220:	26 01       	movw	r4, r12
     222:	2a 01       	movw	r4, r20
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
     224:	8f b5       	in	r24, 0x2f	; 47
     226:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     228:	8f bd       	out	0x2f, r24	; 47
     22a:	08 95       	ret
     22c:	8f b5       	in	r24, 0x2f	; 47
     22e:	8f 7d       	andi	r24, 0xDF	; 223
     230:	fb cf       	rjmp	.-10     	; 0x228 <turnOffPWM+0x2e>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:92
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1C1)
      case TIMER1C:
        TCCR1A &= ~_BV(COM1C1);
     232:	8f b5       	in	r24, 0x2f	; 47
     234:	87 7f       	andi	r24, 0xF7	; 247
     236:	f8 cf       	rjmp	.-16     	; 0x228 <turnOffPWM+0x2e>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:99
    #endif
    
    // Timer2
    #if defined(TCCR2) && defined(COM21)
      case TIMER2:
        TCCR2 &= ~_BV(COM21);
     238:	85 b5       	in	r24, 0x25	; 37
     23a:	8f 7d       	andi	r24, 0xDF	; 223
     23c:	85 bd       	out	0x25, r24	; 37
     23e:	08 95       	ret
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
     240:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     244:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:126
        TCCR3A &= ~_BV(COM3B1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
     246:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     24a:	08 95       	ret
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:121
        TCCR3A &= ~_BV(COM3A1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
     24c:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     250:	8f 7d       	andi	r24, 0xDF	; 223
     252:	f9 cf       	rjmp	.-14     	; 0x246 <turnOffPWM+0x4c>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:126
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
     254:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     258:	87 7f       	andi	r24, 0xF7	; 247
     25a:	f5 cf       	rjmp	.-22     	; 0x246 <turnOffPWM+0x4c>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:171
    #if defined(TCCR0) && defined(COM01)
      case TIMER0:
        TCCR0 &= ~_BV(COM01);
        break;
      case TIMER0A:
        TCCR0 &= ~_BV(COM01);
     25c:	83 b7       	in	r24, 0x33	; 51
     25e:	8f 7d       	andi	r24, 0xDF	; 223
     260:	83 bf       	out	0x33, r24	; 51
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:185
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
        break;
    #endif
  }
}
     262:	08 95       	ret

00000264 <digitalRead>:
digitalRead():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
     264:	cf 93       	push	r28
     266:	df 93       	push	r29
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
     268:	28 2f       	mov	r18, r24
     26a:	30 e0       	ldi	r19, 0x00	; 0
     26c:	f9 01       	movw	r30, r18
     26e:	ea 5d       	subi	r30, 0xDA	; 218
     270:	fe 4f       	sbci	r31, 0xFE	; 254
     272:	84 91       	lpm	r24, Z
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
     274:	f9 01       	movw	r30, r18
     276:	ef 50       	subi	r30, 0x0F	; 15
     278:	ff 4f       	sbci	r31, 0xFF	; 255
     27a:	d4 91       	lpm	r29, Z
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
     27c:	f9 01       	movw	r30, r18
     27e:	e4 54       	subi	r30, 0x44	; 68
     280:	ff 4f       	sbci	r31, 0xFF	; 255
     282:	c4 91       	lpm	r28, Z
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
     284:	cc 23       	and	r28, r28
     286:	a1 f0       	breq	.+40     	; 0x2b0 <digitalRead+0x4c>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     288:	81 11       	cpse	r24, r1
     28a:	0e 94 fd 00 	call	0x1fa	; 0x1fa <turnOffPWM>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
     28e:	ec 2f       	mov	r30, r28
     290:	f0 e0       	ldi	r31, 0x00	; 0
     292:	ee 0f       	add	r30, r30
     294:	ff 1f       	adc	r31, r31
     296:	e4 55       	subi	r30, 0x54	; 84
     298:	ff 4f       	sbci	r31, 0xFF	; 255
     29a:	a5 91       	lpm	r26, Z+
     29c:	b4 91       	lpm	r27, Z
     29e:	ec 91       	ld	r30, X
     2a0:	ed 23       	and	r30, r29
     2a2:	81 e0       	ldi	r24, 0x01	; 1
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	09 f4       	brne	.+2      	; 0x2aa <digitalRead+0x46>
     2a8:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
     2aa:	df 91       	pop	r29
     2ac:	cf 91       	pop	r28
     2ae:	08 95       	ret
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
     2b0:	80 e0       	ldi	r24, 0x00	; 0
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	fa cf       	rjmp	.-12     	; 0x2aa <digitalRead+0x46>

000002b6 <digitalWrite>:
digitalWrite():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     2b6:	1f 93       	push	r17
     2b8:	cf 93       	push	r28
     2ba:	df 93       	push	r29
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
     2bc:	28 2f       	mov	r18, r24
     2be:	30 e0       	ldi	r19, 0x00	; 0
     2c0:	f9 01       	movw	r30, r18
     2c2:	ea 5d       	subi	r30, 0xDA	; 218
     2c4:	fe 4f       	sbci	r31, 0xFE	; 254
     2c6:	84 91       	lpm	r24, Z
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
     2c8:	f9 01       	movw	r30, r18
     2ca:	ef 50       	subi	r30, 0x0F	; 15
     2cc:	ff 4f       	sbci	r31, 0xFF	; 255
     2ce:	d4 91       	lpm	r29, Z
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
     2d0:	f9 01       	movw	r30, r18
     2d2:	e4 54       	subi	r30, 0x44	; 68
     2d4:	ff 4f       	sbci	r31, 0xFF	; 255
     2d6:	c4 91       	lpm	r28, Z
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
     2d8:	cc 23       	and	r28, r28
     2da:	a9 f0       	breq	.+42     	; 0x306 <digitalWrite+0x50>
     2dc:	16 2f       	mov	r17, r22
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     2de:	81 11       	cpse	r24, r1
     2e0:	0e 94 fd 00 	call	0x1fa	; 0x1fa <turnOffPWM>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
     2e4:	ec 2f       	mov	r30, r28
     2e6:	f0 e0       	ldi	r31, 0x00	; 0
     2e8:	ee 0f       	add	r30, r30
     2ea:	ff 1f       	adc	r31, r31
     2ec:	e4 56       	subi	r30, 0x64	; 100
     2ee:	ff 4f       	sbci	r31, 0xFF	; 255
     2f0:	a5 91       	lpm	r26, Z+
     2f2:	b4 91       	lpm	r27, Z
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
     2f4:	8f b7       	in	r24, 0x3f	; 63
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
     2f6:	f8 94       	cli
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
     2f8:	ec 91       	ld	r30, X
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
     2fa:	11 11       	cpse	r17, r1
     2fc:	08 c0       	rjmp	.+16     	; 0x30e <digitalWrite+0x58>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
     2fe:	d0 95       	com	r29
     300:	de 23       	and	r29, r30
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
     302:	dc 93       	st	X, r29
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
     304:	8f bf       	out	0x3f, r24	; 63
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:212
}
     306:	df 91       	pop	r29
     308:	cf 91       	pop	r28
     30a:	1f 91       	pop	r17
     30c:	08 95       	ret
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
     30e:	de 2b       	or	r29, r30
     310:	f8 cf       	rjmp	.-16     	; 0x302 <digitalWrite+0x4c>

00000312 <pinMode>:
pinMode():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     312:	cf 93       	push	r28
     314:	df 93       	push	r29
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	fc 01       	movw	r30, r24
     31a:	ef 50       	subi	r30, 0x0F	; 15
     31c:	ff 4f       	sbci	r31, 0xFF	; 255
     31e:	24 91       	lpm	r18, Z
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
     320:	84 54       	subi	r24, 0x44	; 68
     322:	9f 4f       	sbci	r25, 0xFF	; 255
     324:	fc 01       	movw	r30, r24
     326:	84 91       	lpm	r24, Z
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
     328:	88 23       	and	r24, r24
     32a:	c9 f0       	breq	.+50     	; 0x35e <pinMode+0x4c>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	88 0f       	add	r24, r24
     330:	99 1f       	adc	r25, r25
     332:	fc 01       	movw	r30, r24
     334:	e4 57       	subi	r30, 0x74	; 116
     336:	ff 4f       	sbci	r31, 0xFF	; 255
     338:	a5 91       	lpm	r26, Z+
     33a:	b4 91       	lpm	r27, Z
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
     33c:	fc 01       	movw	r30, r24
     33e:	e4 56       	subi	r30, 0x64	; 100
     340:	ff 4f       	sbci	r31, 0xFF	; 255
     342:	c5 91       	lpm	r28, Z+
     344:	d4 91       	lpm	r29, Z
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
     346:	61 11       	cpse	r22, r1
     348:	0d c0       	rjmp	.+26     	; 0x364 <pinMode+0x52>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
     34a:	9f b7       	in	r25, 0x3f	; 63
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
     34c:	f8 94       	cli
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
     34e:	8c 91       	ld	r24, X
     350:	20 95       	com	r18
     352:	82 23       	and	r24, r18
     354:	8c 93       	st	X, r24
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
     356:	88 81       	ld	r24, Y
     358:	28 23       	and	r18, r24
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
     35a:	28 83       	st	Y, r18
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
     35c:	9f bf       	out	0x3f, r25	; 63
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
     35e:	df 91       	pop	r29
     360:	cf 91       	pop	r28
     362:	08 95       	ret
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
     364:	62 30       	cpi	r22, 0x02	; 2
     366:	51 f4       	brne	.+20     	; 0x37c <pinMode+0x6a>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
     368:	9f b7       	in	r25, 0x3f	; 63
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:49
    cli();
     36a:	f8 94       	cli
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
     36c:	3c 91       	ld	r19, X
     36e:	82 2f       	mov	r24, r18
     370:	80 95       	com	r24
     372:	83 23       	and	r24, r19
     374:	8c 93       	st	X, r24
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
     376:	e8 81       	ld	r30, Y
     378:	2e 2b       	or	r18, r30
     37a:	ef cf       	rjmp	.-34     	; 0x35a <pinMode+0x48>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
     37c:	8f b7       	in	r24, 0x3f	; 63
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
     37e:	f8 94       	cli
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
     380:	ec 91       	ld	r30, X
     382:	2e 2b       	or	r18, r30
     384:	2c 93       	st	X, r18
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
     386:	8f bf       	out	0x3f, r24	; 63
     388:	ea cf       	rjmp	.-44     	; 0x35e <pinMode+0x4c>

0000038a <analogWrite>:
analogWrite():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:95
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
     38a:	1f 93       	push	r17
     38c:	cf 93       	push	r28
     38e:	df 93       	push	r29
     390:	18 2f       	mov	r17, r24
     392:	eb 01       	movw	r28, r22
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:101
  // We need to make sure the PWM output is enabled for those pins
  // that support it, as we turn it off when digitally reading or
  // writing with them.  Also, make sure the pin is in output mode
  // for consistenty with Wiring, which doesn't require a pinMode
  // call for the analog output pins.
  pinMode(pin, OUTPUT);
     394:	61 e0       	ldi	r22, 0x01	; 1
     396:	0e 94 89 01 	call	0x312	; 0x312 <pinMode>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:102
  if (val == 0)
     39a:	20 97       	sbiw	r28, 0x00	; 0
     39c:	39 f4       	brne	.+14     	; 0x3ac <analogWrite+0x22>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:104
  {
    digitalWrite(pin, LOW);
     39e:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:108
  }
  else if (val == 255)
  {
    digitalWrite(pin, HIGH);
     3a0:	81 2f       	mov	r24, r17
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:299
        } else {
          digitalWrite(pin, HIGH);
        }
    }
  }
}
     3a2:	df 91       	pop	r29
     3a4:	cf 91       	pop	r28
     3a6:	1f 91       	pop	r17
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:108
  {
    digitalWrite(pin, LOW);
  }
  else if (val == 255)
  {
    digitalWrite(pin, HIGH);
     3a8:	0c 94 5b 01 	jmp	0x2b6	; 0x2b6 <digitalWrite>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:106
  pinMode(pin, OUTPUT);
  if (val == 0)
  {
    digitalWrite(pin, LOW);
  }
  else if (val == 255)
     3ac:	cf 3f       	cpi	r28, 0xFF	; 255
     3ae:	d1 05       	cpc	r29, r1
     3b0:	11 f4       	brne	.+4      	; 0x3b6 <analogWrite+0x2c>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:108
  {
    digitalWrite(pin, HIGH);
     3b2:	61 e0       	ldi	r22, 0x01	; 1
     3b4:	f5 cf       	rjmp	.-22     	; 0x3a0 <analogWrite+0x16>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:112
  }
  else
  {
    switch(digitalPinToTimer(pin))
     3b6:	e1 2f       	mov	r30, r17
     3b8:	f0 e0       	ldi	r31, 0x00	; 0
     3ba:	ea 5d       	subi	r30, 0xDA	; 218
     3bc:	fe 4f       	sbci	r31, 0xFE	; 254
     3be:	e4 91       	lpm	r30, Z
     3c0:	e1 50       	subi	r30, 0x01	; 1
     3c2:	ec 30       	cpi	r30, 0x0C	; 12
     3c4:	08 f0       	brcs	.+2      	; 0x3c8 <analogWrite+0x3e>
     3c6:	50 c0       	rjmp	.+160    	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
     3c8:	f0 e0       	ldi	r31, 0x00	; 0
     3ca:	e7 51       	subi	r30, 0x17	; 23
     3cc:	fe 4f       	sbci	r31, 0xFE	; 254
     3ce:	0c 94 e4 2d 	jmp	0x5bc8	; 0x5bc8 <__tablejump2__>
     3d2:	f5 01       	movw	r30, r10
     3d4:	f5 01       	movw	r30, r10
     3d6:	34 02       	muls	r19, r20
     3d8:	fd 01       	movw	r30, r26
     3da:	03 02       	muls	r16, r19
     3dc:	09 02       	muls	r16, r25
     3de:	11 02       	muls	r17, r17
     3e0:	34 02       	muls	r19, r20
     3e2:	34 02       	muls	r19, r20
     3e4:	16 02       	muls	r17, r22
     3e6:	20 02       	muls	r18, r16
     3e8:	2a 02       	muls	r18, r26
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:124
        break;
        
      case TIMER0A:
        // connect pwm to pin on timer 0
        // this combination is for the ATmega8535, ATmega16 and ATmega32
        TCCR0 |= _BV(COM01);
     3ea:	83 b7       	in	r24, 0x33	; 51
     3ec:	80 62       	ori	r24, 0x20	; 32
     3ee:	83 bf       	out	0x33, r24	; 51
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:125
        OCR0 = val; // set pwm duty
     3f0:	c1 bf       	out	0x31, r28	; 49
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:299
        } else {
          digitalWrite(pin, HIGH);
        }
    }
  }
}
     3f2:	df 91       	pop	r29
     3f4:	cf 91       	pop	r28
     3f6:	1f 91       	pop	r17
     3f8:	08 95       	ret
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:148
      #endif

      #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        // connect pwm to pin on timer 1, channel A
        TCCR1A |= _BV(COM1A1);
     3fa:	8f b5       	in	r24, 0x2f	; 47
     3fc:	80 68       	ori	r24, 0x80	; 128
     3fe:	8f bd       	out	0x2f, r24	; 47
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:149
        OCR1A = val; // set pwm duty
     400:	db bd       	out	0x2b, r29	; 43
     402:	ca bd       	out	0x2a, r28	; 42
     404:	f6 cf       	rjmp	.-20     	; 0x3f2 <analogWrite+0x68>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:156
      #endif

      #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        // connect pwm to pin on timer 1, channel B
        TCCR1A |= _BV(COM1B1);
     406:	8f b5       	in	r24, 0x2f	; 47
     408:	80 62       	ori	r24, 0x20	; 32
     40a:	8f bd       	out	0x2f, r24	; 47
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:157
        OCR1B = val; // set pwm duty
     40c:	d9 bd       	out	0x29, r29	; 41
     40e:	c8 bd       	out	0x28, r28	; 40
     410:	f0 cf       	rjmp	.-32     	; 0x3f2 <analogWrite+0x68>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:164
      #endif

      #if defined(TCCR1A) && defined(COM1C1)
      case TIMER1C:
        // connect pwm to pin on timer 1, channel B
        TCCR1A |= _BV(COM1C1);
     412:	8f b5       	in	r24, 0x2f	; 47
     414:	88 60       	ori	r24, 0x08	; 8
     416:	8f bd       	out	0x2f, r24	; 47
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:165
        OCR1C = val; // set pwm duty
     418:	d0 93 79 00 	sts	0x0079, r29	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     41c:	c0 93 78 00 	sts	0x0078, r28	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     420:	e8 cf       	rjmp	.-48     	; 0x3f2 <analogWrite+0x68>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:172
      #endif

      #if defined(TCCR2) && defined(COM21)
      case TIMER2:
        // connect pwm to pin on timer 2
        TCCR2 |= _BV(COM21);
     422:	85 b5       	in	r24, 0x25	; 37
     424:	80 62       	ori	r24, 0x20	; 32
     426:	85 bd       	out	0x25, r24	; 37
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:173
        OCR2 = val; // set pwm duty
     428:	c3 bd       	out	0x23, r28	; 35
     42a:	e3 cf       	rjmp	.-58     	; 0x3f2 <analogWrite+0x68>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:196
      #endif

      #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        // connect pwm to pin on timer 3, channel A
        TCCR3A |= _BV(COM3A1);
     42c:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     430:	80 68       	ori	r24, 0x80	; 128
     432:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:197
        OCR3A = val; // set pwm duty
     436:	d0 93 87 00 	sts	0x0087, r29	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     43a:	c0 93 86 00 	sts	0x0086, r28	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     43e:	d9 cf       	rjmp	.-78     	; 0x3f2 <analogWrite+0x68>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:209
        #if defined(__AVR_ATmega328PB__) // Fix 324PB/328PB silicon bug
          PORTD |= _BV(PD2);
        #elif defined(__AVR_ATmega324PB__)
          PORTB |= _BV(PB7);
        #endif
        TCCR3A |= _BV(COM3B1);
     440:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     444:	80 62       	ori	r24, 0x20	; 32
     446:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:210
        OCR3B = val; // set pwm duty
     44a:	d0 93 85 00 	sts	0x0085, r29	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     44e:	c0 93 84 00 	sts	0x0084, r28	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     452:	cf cf       	rjmp	.-98     	; 0x3f2 <analogWrite+0x68>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:217
      #endif

      #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        // connect pwm to pin on timer 3, channel C
        TCCR3A |= _BV(COM3C1);
     454:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     458:	88 60       	ori	r24, 0x08	; 8
     45a:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:218
        OCR3C = val; // set pwm duty
     45e:	d0 93 83 00 	sts	0x0083, r29	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     462:	c0 93 82 00 	sts	0x0082, r28	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
     466:	c5 cf       	rjmp	.-118    	; 0x3f2 <analogWrite+0x68>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:292
        break;
      #endif

      case NOT_ON_TIMER:
      default:
        if (val < 128) {
     468:	c0 38       	cpi	r28, 0x80	; 128
     46a:	d1 05       	cpc	r29, r1
     46c:	0c f0       	brlt	.+2      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     46e:	a1 cf       	rjmp	.-190    	; 0x3b2 <analogWrite+0x28>
     470:	96 cf       	rjmp	.-212    	; 0x39e <analogWrite+0x14>

00000472 <analogRead>:
analogRead():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:49
int analogRead(uint8_t pin)
{

// Macro located in the pins_arduino.h file
#ifdef analogPinToChannel
  pin = analogPinToChannel(pin);
     472:	8d 52       	subi	r24, 0x2D	; 45
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:68
  
  // set the analog reference (high two bits of ADMUX) and select the
  // channel (low 4 bits).  this also sets ADLAR (left-adjust result)
  // to 0 (the default).
#if defined(ADMUX)
  ADMUX = (analog_reference << 6) | (pin & 0x07);
     474:	80 64       	ori	r24, 0x40	; 64
     476:	87 b9       	out	0x07, r24	; 7
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:76
  // without a delay, we seem to read from the wrong channel
  //delay(1);

#if defined(ADCSRA) && defined(ADC)
  // start the conversion
  ADCSRA |= _BV(ADSC);
     478:	36 9a       	sbi	0x06, 6	; 6
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:79

  // ADSC is cleared when the conversion finishes
  while (ADCSRA & _BV(ADSC)) {};
     47a:	36 99       	sbic	0x06, 6	; 6
     47c:	fe cf       	rjmp	.-4      	; 0x47a <analogRead+0x8>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:83

  // ADC macro takes care of reading ADC register.
 	// avr-gcc implements the proper reading order: ADCL is read first.
 	return ADC;
     47e:	84 b1       	in	r24, 0x04	; 4
     480:	95 b1       	in	r25, 0x05	; 5
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:87
#else
  return 0;
#endif
}
     482:	08 95       	ret

00000484 <delayMicroseconds>:
delayMicroseconds():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:679
  // us is at least 6 so we can substract 5
  us -= 5; // = 2 cycles

#elif F_CPU >= 11059200L
  // the overhead of the function call is 14 (16) cycles which is ~1.3 us
  if (us <= 2) return; // = 3 cycles, (4 when true)
     484:	83 30       	cpi	r24, 0x03	; 3
     486:	91 05       	cpc	r25, r1
     488:	88 f0       	brcs	.+34     	; 0x4ac <delayMicroseconds+0x28>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:681

  us = (us << 1) + us; // x3 us, = 5 cycles
     48a:	9c 01       	movw	r18, r24
     48c:	22 0f       	add	r18, r18
     48e:	33 1f       	adc	r19, r19
     490:	28 0f       	add	r18, r24
     492:	39 1f       	adc	r19, r25
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:703
    // account for the time taken in the preceeding commands.
    // we just burned 27 (29) cycles above, remove 7 (7*4=28),
    // us is at least 9, so we may subtract without rollunder

             // 1 cycle when if jump here
    us -= 7; // 2 cycles
     494:	c9 01       	movw	r24, r18
     496:	07 97       	sbiw	r24, 0x07	; 7
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:685

  us = (us << 1) + us; // x3 us, = 5 cycles

                       // +1 cycle (register save)
  // user wants to wait longer than 5 us
  if (us > 15) // = 3 cycles
     498:	20 31       	cpi	r18, 0x10	; 16
     49a:	31 05       	cpc	r19, r1
     49c:	28 f0       	brcs	.+10     	; 0x4a8 <delayMicroseconds+0x24>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:689
  {
    // since the loop is not accurately 1/3 of a microsecond we need
    // to multiply us by 0.9216 (11.0592 / 12)
    us = (us * 60398UL) >> 16;  // x0.9216 us = 29 cycles (60398 = 0.9216 x 0x10000L)
     49e:	ae ee       	ldi	r26, 0xEE	; 238
     4a0:	bb ee       	ldi	r27, 0xEB	; 235
     4a2:	0e 94 ed 2d 	call	0x5bda	; 0x5bda <__umulhisi3>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:694
    // this drops us to at least 14

    // account for the time taken in the preceeding commands.
    // we just burned 53 (55) cycles above, remove 13, (13*4=52)
    us -= 13; // = 2 cycles
     4a6:	0d 97       	sbiw	r24, 0x0d	; 13
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
     4a8:	01 97       	sbiw	r24, 0x01	; 1
     4aa:	f1 f7       	brne	.-4      	; 0x4a8 <delayMicroseconds+0x24>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
     4ac:	08 95       	ret

000004ae <micros>:
micros():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:229
  SREG = oldSREG;

  return m;
}

unsigned long micros() {
     4ae:	cf 92       	push	r12
     4b0:	df 92       	push	r13
     4b2:	ef 92       	push	r14
     4b4:	ff 92       	push	r15
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
     4b6:	6f b7       	in	r22, 0x3f	; 63
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
     4b8:	f8 94       	cli
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:244

#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
     4ba:	80 91 8b 08 	lds	r24, 0x088B	; 0x80088b <timer0_millis>
     4be:	90 91 8c 08 	lds	r25, 0x088C	; 0x80088c <timer0_millis+0x1>
     4c2:	a0 91 8d 08 	lds	r26, 0x088D	; 0x80088d <timer0_millis+0x2>
     4c6:	b0 91 8e 08 	lds	r27, 0x088E	; 0x80088e <timer0_millis+0x3>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:245
  f = timer0_fract;
     4ca:	50 91 8a 08 	lds	r21, 0x088A	; 0x80088a <timer0_fract>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:252
  m = timer0_overflow_count;
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
     4ce:	22 b7       	in	r18, 0x32	; 50
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:268
    m++;
#else
    q = 1;
#endif
#else
  if ((TIFR & _BV(TOV0)) && (t < 255))
     4d0:	36 b7       	in	r19, 0x36	; 54
     4d2:	43 2f       	mov	r20, r19
     4d4:	41 70       	andi	r20, 0x01	; 1
     4d6:	30 ff       	sbrs	r19, 0
     4d8:	04 c0       	rjmp	.+8      	; 0x4e2 <micros+0x34>
     4da:	41 e0       	ldi	r20, 0x01	; 1
     4dc:	2f 3f       	cpi	r18, 0xFF	; 255
     4de:	09 f4       	brne	.+2      	; 0x4e2 <micros+0x34>
     4e0:	40 e0       	ldi	r20, 0x00	; 0
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
     4e2:	6f bf       	out	0x3f, r22	; 63
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:286
     Basically we multiply by 1000 and add the scaled timer.

     The leading part by m and f is long-term accurate.
     For the timer we just need to be close from below.
     Must never be too high, or micros jumps backwards. */
  m = (((m << 7) - (m << 1) - m + f) << 3) +
     4e4:	6c 01       	movw	r12, r24
     4e6:	7d 01       	movw	r14, r26
     4e8:	37 e0       	ldi	r19, 0x07	; 7
     4ea:	cc 0c       	add	r12, r12
     4ec:	dd 1c       	adc	r13, r13
     4ee:	ee 1c       	adc	r14, r14
     4f0:	ff 1c       	adc	r15, r15
     4f2:	3a 95       	dec	r19
     4f4:	d1 f7       	brne	.-12     	; 0x4ea <micros+0x3c>
     4f6:	c5 0e       	add	r12, r21
     4f8:	d1 1c       	adc	r13, r1
     4fa:	e1 1c       	adc	r14, r1
     4fc:	f1 1c       	adc	r15, r1
     4fe:	c8 1a       	sub	r12, r24
     500:	d9 0a       	sbc	r13, r25
     502:	ea 0a       	sbc	r14, r26
     504:	fb 0a       	sbc	r15, r27
     506:	88 0f       	add	r24, r24
     508:	99 1f       	adc	r25, r25
     50a:	aa 1f       	adc	r26, r26
     50c:	bb 1f       	adc	r27, r27
     50e:	c8 1a       	sub	r12, r24
     510:	d9 0a       	sbc	r13, r25
     512:	ea 0a       	sbc	r14, r26
     514:	fb 0a       	sbc	r15, r27
     516:	63 e0       	ldi	r22, 0x03	; 3
     518:	cc 0c       	add	r12, r12
     51a:	dd 1c       	adc	r13, r13
     51c:	ee 1c       	adc	r14, r14
     51e:	ff 1c       	adc	r15, r15
     520:	6a 95       	dec	r22
     522:	d1 f7       	brne	.-12     	; 0x518 <micros+0x6a>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:287
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
     524:	30 e0       	ldi	r19, 0x00	; 0
     526:	a9 ec       	ldi	r26, 0xC9	; 201
     528:	b5 e0       	ldi	r27, 0x05	; 5
     52a:	0e 94 ed 2d 	call	0x5bda	; 0x5bda <__umulhisi3>
     52e:	67 2f       	mov	r22, r23
     530:	78 2f       	mov	r23, r24
     532:	89 2f       	mov	r24, r25
     534:	99 27       	eor	r25, r25
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:286
     Basically we multiply by 1000 and add the scaled timer.

     The leading part by m and f is long-term accurate.
     For the timer we just need to be close from below.
     Must never be too high, or micros jumps backwards. */
  m = (((m << 7) - (m << 1) - m + f) << 3) +
     536:	6c 0d       	add	r22, r12
     538:	7d 1d       	adc	r23, r13
     53a:	8e 1d       	adc	r24, r14
     53c:	9f 1d       	adc	r25, r15
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:288
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
     53e:	44 23       	and	r20, r20
     540:	21 f0       	breq	.+8      	; 0x54a <micros+0x9c>
     542:	67 53       	subi	r22, 0x37	; 55
     544:	7a 4f       	sbci	r23, 0xFA	; 250
     546:	8f 4f       	sbci	r24, 0xFF	; 255
     548:	9f 4f       	sbci	r25, 0xFF	; 255
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
     54a:	ff 90       	pop	r15
     54c:	ef 90       	pop	r14
     54e:	df 90       	pop	r13
     550:	cf 90       	pop	r12
     552:	08 95       	ret

00000554 <delay>:
delay():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
     554:	8f 92       	push	r8
     556:	9f 92       	push	r9
     558:	af 92       	push	r10
     55a:	bf 92       	push	r11
     55c:	cf 92       	push	r12
     55e:	df 92       	push	r13
     560:	ef 92       	push	r14
     562:	ff 92       	push	r15
     564:	4b 01       	movw	r8, r22
     566:	5c 01       	movw	r10, r24
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
     568:	0e 94 57 02 	call	0x4ae	; 0x4ae <micros>
     56c:	6b 01       	movw	r12, r22
     56e:	7c 01       	movw	r14, r24
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:401

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
     570:	0e 94 57 02 	call	0x4ae	; 0x4ae <micros>
     574:	6c 19       	sub	r22, r12
     576:	7d 09       	sbc	r23, r13
     578:	8e 09       	sbc	r24, r14
     57a:	9f 09       	sbc	r25, r15
     57c:	68 3e       	cpi	r22, 0xE8	; 232
     57e:	73 40       	sbci	r23, 0x03	; 3
     580:	81 05       	cpc	r24, r1
     582:	91 05       	cpc	r25, r1
     584:	a8 f3       	brcs	.-22     	; 0x570 <delay+0x1c>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:402
      ms--;
     586:	21 e0       	ldi	r18, 0x01	; 1
     588:	82 1a       	sub	r8, r18
     58a:	91 08       	sbc	r9, r1
     58c:	a1 08       	sbc	r10, r1
     58e:	b1 08       	sbc	r11, r1
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:403
      start += 1000UL;
     590:	88 ee       	ldi	r24, 0xE8	; 232
     592:	c8 0e       	add	r12, r24
     594:	83 e0       	ldi	r24, 0x03	; 3
     596:	d8 1e       	adc	r13, r24
     598:	e1 1c       	adc	r14, r1
     59a:	f1 1c       	adc	r15, r1
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
     59c:	81 14       	cp	r8, r1
     59e:	91 04       	cpc	r9, r1
     5a0:	a1 04       	cpc	r10, r1
     5a2:	b1 04       	cpc	r11, r1
     5a4:	29 f7       	brne	.-54     	; 0x570 <delay+0x1c>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:406
      ms--;
      start += 1000UL;
    }
  }
}
     5a6:	ff 90       	pop	r15
     5a8:	ef 90       	pop	r14
     5aa:	df 90       	pop	r13
     5ac:	cf 90       	pop	r12
     5ae:	bf 90       	pop	r11
     5b0:	af 90       	pop	r10
     5b2:	9f 90       	pop	r9
     5b4:	8f 90       	pop	r8
     5b6:	08 95       	ret

000005b8 <TwoWire::onRequestService()>:
onRequestService():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:368
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
  txBufferLength = 0;
  // alert user program
  user_onRequest();
}
     5b8:	08 95       	ret

000005ba <TwoWire::onReceiveService(unsigned char*, int)>:
onReceiveService():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:353
  // set rx iterator vars
  rxBufferIndex = 0;
  rxBufferLength = numBytes;
  // alert user program
  user_onReceive(numBytes);
}
     5ba:	08 95       	ret

000005bc <Print::write(unsigned char const*, unsigned int)>:
write():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     5bc:	af 92       	push	r10
     5be:	bf 92       	push	r11
     5c0:	cf 92       	push	r12
     5c2:	df 92       	push	r13
     5c4:	ef 92       	push	r14
     5c6:	ff 92       	push	r15
     5c8:	0f 93       	push	r16
     5ca:	1f 93       	push	r17
     5cc:	cf 93       	push	r28
     5ce:	df 93       	push	r29
     5d0:	6c 01       	movw	r12, r24
     5d2:	7b 01       	movw	r14, r22
     5d4:	8b 01       	movw	r16, r22
     5d6:	04 0f       	add	r16, r20
     5d8:	15 1f       	adc	r17, r21
     5da:	eb 01       	movw	r28, r22
     5dc:	5e 01       	movw	r10, r28
     5de:	ae 18       	sub	r10, r14
     5e0:	bf 08       	sbc	r11, r15
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
     5e2:	c0 17       	cp	r28, r16
     5e4:	d1 07       	cpc	r29, r17
     5e6:	59 f0       	breq	.+22     	; 0x5fe <Print::write(unsigned char const*, unsigned int)+0x42>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
     5e8:	69 91       	ld	r22, Y+
     5ea:	d6 01       	movw	r26, r12
     5ec:	ed 91       	ld	r30, X+
     5ee:	fc 91       	ld	r31, X
     5f0:	01 90       	ld	r0, Z+
     5f2:	f0 81       	ld	r31, Z
     5f4:	e0 2d       	mov	r30, r0
     5f6:	c6 01       	movw	r24, r12
     5f8:	09 95       	icall
     5fa:	89 2b       	or	r24, r25
     5fc:	79 f7       	brne	.-34     	; 0x5dc <Print::write(unsigned char const*, unsigned int)+0x20>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
     5fe:	c5 01       	movw	r24, r10
     600:	df 91       	pop	r29
     602:	cf 91       	pop	r28
     604:	1f 91       	pop	r17
     606:	0f 91       	pop	r16
     608:	ff 90       	pop	r15
     60a:	ef 90       	pop	r14
     60c:	df 90       	pop	r13
     60e:	cf 90       	pop	r12
     610:	bf 90       	pop	r11
     612:	af 90       	pop	r10
     614:	08 95       	ret

00000616 <HardwareSerial::availableForWrite()>:
availableForWrite():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:195
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     616:	fc 01       	movw	r30, r24
     618:	53 8d       	ldd	r21, Z+27	; 0x1b
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:196
    tail = _tx_buffer_tail;
     61a:	44 8d       	ldd	r20, Z+28	; 0x1c
     61c:	25 2f       	mov	r18, r21
     61e:	30 e0       	ldi	r19, 0x00	; 0
     620:	84 2f       	mov	r24, r20
     622:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:198
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     624:	82 1b       	sub	r24, r18
     626:	93 0b       	sbc	r25, r19
     628:	54 17       	cp	r21, r20
     62a:	10 f0       	brcs	.+4      	; 0x630 <HardwareSerial::availableForWrite()+0x1a>
     62c:	cf 96       	adiw	r24, 0x3f	; 63
     62e:	08 95       	ret
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:199
  return tail - head - 1;
     630:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:200
}
     632:	08 95       	ret

00000634 <HardwareSerial::read()>:
read():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:178
    return _rx_buffer[_rx_buffer_tail];
  }
}

int HardwareSerial::read(void)
{
     634:	fc 01       	movw	r30, r24
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:180
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     636:	91 8d       	ldd	r25, Z+25	; 0x19
     638:	82 8d       	ldd	r24, Z+26	; 0x1a
     63a:	98 17       	cp	r25, r24
     63c:	61 f0       	breq	.+24     	; 0x656 <HardwareSerial::read()+0x22>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:183
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     63e:	a2 8d       	ldd	r26, Z+26	; 0x1a
     640:	ae 0f       	add	r26, r30
     642:	bf 2f       	mov	r27, r31
     644:	b1 1d       	adc	r27, r1
     646:	5d 96       	adiw	r26, 0x1d	; 29
     648:	8c 91       	ld	r24, X
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:184
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     64a:	92 8d       	ldd	r25, Z+26	; 0x1a
     64c:	9f 5f       	subi	r25, 0xFF	; 255
     64e:	9f 73       	andi	r25, 0x3F	; 63
     650:	92 8f       	std	Z+26, r25	; 0x1a
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:185
    return c;
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	08 95       	ret
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:181

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     656:	8f ef       	ldi	r24, 0xFF	; 255
     658:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:187
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     65a:	08 95       	ret

0000065c <HardwareSerial::peek()>:
peek():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:169
{
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
{
     65c:	fc 01       	movw	r30, r24
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:170
  if (_rx_buffer_head == _rx_buffer_tail) {
     65e:	91 8d       	ldd	r25, Z+25	; 0x19
     660:	82 8d       	ldd	r24, Z+26	; 0x1a
     662:	98 17       	cp	r25, r24
     664:	31 f0       	breq	.+12     	; 0x672 <HardwareSerial::peek()+0x16>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:173
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     666:	82 8d       	ldd	r24, Z+26	; 0x1a
     668:	e8 0f       	add	r30, r24
     66a:	f1 1d       	adc	r31, r1
     66c:	85 8d       	ldd	r24, Z+29	; 0x1d
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	08 95       	ret
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:171
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     672:	8f ef       	ldi	r24, 0xFF	; 255
     674:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:175
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     676:	08 95       	ret

00000678 <HardwareSerial::available()>:
available():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:164
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     678:	fc 01       	movw	r30, r24
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:165
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     67a:	91 8d       	ldd	r25, Z+25	; 0x19
     67c:	22 8d       	ldd	r18, Z+26	; 0x1a
     67e:	89 2f       	mov	r24, r25
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	80 5c       	subi	r24, 0xC0	; 192
     684:	9f 4f       	sbci	r25, 0xFF	; 255
     686:	82 1b       	sub	r24, r18
     688:	91 09       	sbc	r25, r1
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:166
}
     68a:	8f 73       	andi	r24, 0x3F	; 63
     68c:	99 27       	eor	r25, r25
     68e:	08 95       	ret

00000690 <Serial1_available()>:
Serial1_available():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial1.cpp:68
HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
     690:	8e e2       	ldi	r24, 0x2E	; 46
     692:	99 e0       	ldi	r25, 0x09	; 9
     694:	0e 94 3c 03 	call	0x678	; 0x678 <HardwareSerial::available()>
     698:	21 e0       	ldi	r18, 0x01	; 1
     69a:	89 2b       	or	r24, r25
     69c:	09 f4       	brne	.+2      	; 0x6a0 <Serial1_available()+0x10>
     69e:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial1.cpp:69
}
     6a0:	82 2f       	mov	r24, r18
     6a2:	08 95       	ret

000006a4 <Serial0_available()>:
Serial0_available():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     6a4:	8b ec       	ldi	r24, 0xCB	; 203
     6a6:	99 e0       	ldi	r25, 0x09	; 9
     6a8:	0e 94 3c 03 	call	0x678	; 0x678 <HardwareSerial::available()>
     6ac:	21 e0       	ldi	r18, 0x01	; 1
     6ae:	89 2b       	or	r24, r25
     6b0:	09 f4       	brne	.+2      	; 0x6b4 <Serial0_available()+0x10>
     6b2:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
}
     6b4:	82 2f       	mov	r24, r18
     6b6:	08 95       	ret

000006b8 <HardwareSerial::_tx_udr_empty_irq()>:
_tx_udr_empty_irq():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:90
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     6b8:	fc 01       	movw	r30, r24
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:93
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     6ba:	a4 8d       	ldd	r26, Z+28	; 0x1c
     6bc:	a8 0f       	add	r26, r24
     6be:	b9 2f       	mov	r27, r25
     6c0:	b1 1d       	adc	r27, r1
     6c2:	a3 5a       	subi	r26, 0xA3	; 163
     6c4:	bf 4f       	sbci	r27, 0xFF	; 255
     6c6:	2c 91       	ld	r18, X
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:94
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     6c8:	84 8d       	ldd	r24, Z+28	; 0x1c
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	01 96       	adiw	r24, 0x01	; 1
     6ce:	8f 73       	andi	r24, 0x3F	; 63
     6d0:	99 27       	eor	r25, r25
     6d2:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:96

  *_udr = c;
     6d4:	a6 89       	ldd	r26, Z+22	; 0x16
     6d6:	b7 89       	ldd	r27, Z+23	; 0x17
     6d8:	2c 93       	st	X, r18
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:104
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

  #ifdef MPCM0
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     6da:	a0 89       	ldd	r26, Z+16	; 0x10
     6dc:	b1 89       	ldd	r27, Z+17	; 0x11
     6de:	8c 91       	ld	r24, X
     6e0:	83 70       	andi	r24, 0x03	; 3
     6e2:	80 64       	ori	r24, 0x40	; 64
     6e4:	8c 93       	st	X, r24
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:109
  #else
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
  #endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     6e6:	93 8d       	ldd	r25, Z+27	; 0x1b
     6e8:	84 8d       	ldd	r24, Z+28	; 0x1c
     6ea:	98 13       	cpse	r25, r24
     6ec:	06 c0       	rjmp	.+12     	; 0x6fa <HardwareSerial::_tx_udr_empty_irq()+0x42>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:111
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
     6ee:	02 88       	ldd	r0, Z+18	; 0x12
     6f0:	f3 89       	ldd	r31, Z+19	; 0x13
     6f2:	e0 2d       	mov	r30, r0
     6f4:	80 81       	ld	r24, Z
     6f6:	8f 7d       	andi	r24, 0xDF	; 223
     6f8:	80 83       	st	Z, r24
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:113
  }
}
     6fa:	08 95       	ret

000006fc <HardwareSerial::write(unsigned char)>:
write():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:223
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     6fc:	ef 92       	push	r14
     6fe:	ff 92       	push	r15
     700:	0f 93       	push	r16
     702:	1f 93       	push	r17
     704:	cf 93       	push	r28
     706:	df 93       	push	r29
     708:	ec 01       	movw	r28, r24
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:224
  _written = true;
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:229
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     70e:	9b 8d       	ldd	r25, Y+27	; 0x1b
     710:	8c 8d       	ldd	r24, Y+28	; 0x1c
     712:	98 13       	cpse	r25, r24
     714:	1a c0       	rjmp	.+52     	; 0x74a <HardwareSerial::write(unsigned char)+0x4e>
     716:	e8 89       	ldd	r30, Y+16	; 0x10
     718:	f9 89       	ldd	r31, Y+17	; 0x11
     71a:	80 81       	ld	r24, Z
     71c:	85 ff       	sbrs	r24, 5
     71e:	15 c0       	rjmp	.+42     	; 0x74a <HardwareSerial::write(unsigned char)+0x4e>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:238
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     720:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\14377\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     722:	f8 94       	cli
write():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:239
      *_udr = c;
     724:	ee 89       	ldd	r30, Y+22	; 0x16
     726:	ff 89       	ldd	r31, Y+23	; 0x17
     728:	60 83       	st	Z, r22
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:241
      #ifdef MPCM0
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     72a:	e8 89       	ldd	r30, Y+16	; 0x10
     72c:	f9 89       	ldd	r31, Y+17	; 0x11
     72e:	80 81       	ld	r24, Z
     730:	83 70       	andi	r24, 0x03	; 3
     732:	80 64       	ori	r24, 0x40	; 64
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:271
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    *_ucsrb |= _BV(UDRIE0);
     734:	80 83       	st	Z, r24
__iRestore():
c:\users\14377\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     736:	9f bf       	out	0x3f, r25	; 63
write():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:275
  }
  
  return 1;
}
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	df 91       	pop	r29
     73e:	cf 91       	pop	r28
     740:	1f 91       	pop	r17
     742:	0f 91       	pop	r16
     744:	ff 90       	pop	r15
     746:	ef 90       	pop	r14
     748:	08 95       	ret
     74a:	f6 2e       	mov	r15, r22
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:248
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
      #endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     74c:	0b 8d       	ldd	r16, Y+27	; 0x1b
     74e:	10 e0       	ldi	r17, 0x00	; 0
     750:	0f 5f       	subi	r16, 0xFF	; 255
     752:	1f 4f       	sbci	r17, 0xFF	; 255
     754:	0f 73       	andi	r16, 0x3F	; 63
     756:	11 27       	eor	r17, r17
     758:	e0 2e       	mov	r14, r16
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:252

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     75a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     75c:	8e 11       	cpse	r24, r14
     75e:	0c c0       	rjmp	.+24     	; 0x778 <HardwareSerial::write(unsigned char)+0x7c>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:253
    if (bit_is_clear(SREG, SREG_I)) {
     760:	0f b6       	in	r0, 0x3f	; 63
     762:	07 fc       	sbrc	r0, 7
     764:	fa cf       	rjmp	.-12     	; 0x75a <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:258
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     766:	e8 89       	ldd	r30, Y+16	; 0x10
     768:	f9 89       	ldd	r31, Y+17	; 0x11
     76a:	80 81       	ld	r24, Z
     76c:	85 ff       	sbrs	r24, 5
     76e:	f5 cf       	rjmp	.-22     	; 0x75a <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:259
        _tx_udr_empty_irq();
     770:	ce 01       	movw	r24, r28
     772:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <HardwareSerial::_tx_udr_empty_irq()>
     776:	f1 cf       	rjmp	.-30     	; 0x75a <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:265
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     778:	eb 8d       	ldd	r30, Y+27	; 0x1b
     77a:	ec 0f       	add	r30, r28
     77c:	fd 2f       	mov	r31, r29
     77e:	f1 1d       	adc	r31, r1
     780:	e3 5a       	subi	r30, 0xA3	; 163
     782:	ff 4f       	sbci	r31, 0xFF	; 255
     784:	f0 82       	st	Z, r15
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:269
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     786:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\14377\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     788:	f8 94       	cli
write():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:270
    _tx_buffer_head = i;
     78a:	0b 8f       	std	Y+27, r16	; 0x1b
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:271
    *_ucsrb |= _BV(UDRIE0);
     78c:	ea 89       	ldd	r30, Y+18	; 0x12
     78e:	fb 89       	ldd	r31, Y+19	; 0x13
     790:	80 81       	ld	r24, Z
     792:	80 62       	ori	r24, 0x20	; 32
     794:	cf cf       	rjmp	.-98     	; 0x734 <HardwareSerial::write(unsigned char)+0x38>

00000796 <HardwareSerial::flush()>:
flush():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:203
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     796:	cf 93       	push	r28
     798:	df 93       	push	r29
     79a:	ec 01       	movw	r28, r24
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:207
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     79c:	88 8d       	ldd	r24, Y+24	; 0x18
     79e:	88 23       	and	r24, r24
     7a0:	b9 f0       	breq	.+46     	; 0x7d0 <HardwareSerial::flush()+0x3a>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:210
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     7a2:	aa 89       	ldd	r26, Y+18	; 0x12
     7a4:	bb 89       	ldd	r27, Y+19	; 0x13
     7a6:	e8 89       	ldd	r30, Y+16	; 0x10
     7a8:	f9 89       	ldd	r31, Y+17	; 0x11
     7aa:	8c 91       	ld	r24, X
     7ac:	85 fd       	sbrc	r24, 5
     7ae:	03 c0       	rjmp	.+6      	; 0x7b6 <HardwareSerial::flush()+0x20>
     7b0:	80 81       	ld	r24, Z
     7b2:	86 fd       	sbrc	r24, 6
     7b4:	0d c0       	rjmp	.+26     	; 0x7d0 <HardwareSerial::flush()+0x3a>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:211
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     7b6:	0f b6       	in	r0, 0x3f	; 63
     7b8:	07 fc       	sbrc	r0, 7
     7ba:	f7 cf       	rjmp	.-18     	; 0x7aa <HardwareSerial::flush()+0x14>
     7bc:	8c 91       	ld	r24, X
     7be:	85 ff       	sbrs	r24, 5
     7c0:	f2 cf       	rjmp	.-28     	; 0x7a6 <HardwareSerial::flush()+0x10>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:215
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
     7c2:	80 81       	ld	r24, Z
     7c4:	85 ff       	sbrs	r24, 5
     7c6:	ed cf       	rjmp	.-38     	; 0x7a2 <HardwareSerial::flush()+0xc>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:216
        _tx_udr_empty_irq();
     7c8:	ce 01       	movw	r24, r28
     7ca:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <HardwareSerial::_tx_udr_empty_irq()>
     7ce:	e9 cf       	rjmp	.-46     	; 0x7a2 <HardwareSerial::flush()+0xc>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:220
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     7d0:	df 91       	pop	r29
     7d2:	cf 91       	pop	r28
     7d4:	08 95       	ret

000007d6 <serialEventRun()>:
serialEventRun():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     7d6:	80 e0       	ldi	r24, 0x00	; 0
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	89 2b       	or	r24, r25
     7dc:	29 f0       	breq	.+10     	; 0x7e8 <serialEventRun()+0x12>
     7de:	0e 94 52 03 	call	0x6a4	; 0x6a4 <Serial0_available()>
     7e2:	81 11       	cpse	r24, r1
     7e4:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:70
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	89 2b       	or	r24, r25
     7ee:	29 f0       	breq	.+10     	; 0x7fa <serialEventRun()+0x24>
     7f0:	0e 94 48 03 	call	0x690	; 0x690 <Serial1_available()>
     7f4:	81 11       	cpse	r24, r1
     7f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:78
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
     7fa:	08 95       	ret

000007fc <twi_stop>:
twi_stop():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:430
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     7fc:	85 ed       	ldi	r24, 0xD5	; 213
     7fe:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:450
          return;
        }
      }
    }
  #else
    while(TWCR & _BV(TWSTO)){
     802:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     806:	84 fd       	sbrc	r24, 4
     808:	fc cf       	rjmp	.-8      	; 0x802 <twi_stop+0x6>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:456
      continue;
    }
  #endif

  // update twi state
  twi_state = TWI_READY;
     80a:	10 92 97 08 	sts	0x0897, r1	; 0x800897 <twi_state>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:457
}
     80e:	08 95       	ret

00000810 <twi_transmit>:
twi_transmit():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:365
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
     810:	20 91 42 08 	lds	r18, 0x0842	; 0x800842 <twi_txBufferLength>
     814:	26 0f       	add	r18, r22
     816:	33 27       	eor	r19, r19
     818:	33 1f       	adc	r19, r19
     81a:	21 32       	cpi	r18, 0x21	; 33
     81c:	31 05       	cpc	r19, r1
     81e:	ec f4       	brge	.+58     	; 0x85a <twi_transmit+0x4a>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:370
    return 1;
  }

  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
     820:	20 91 97 08 	lds	r18, 0x0897	; 0x800897 <twi_state>
     824:	fc 01       	movw	r30, r24
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	80 e0       	ldi	r24, 0x00	; 0
     82a:	24 30       	cpi	r18, 0x04	; 4
     82c:	69 f0       	breq	.+26     	; 0x848 <twi_transmit+0x38>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:371
    return 2;
     82e:	82 e0       	ldi	r24, 0x02	; 2
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:381
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;

  return 0;
}
     830:	08 95       	ret
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:376
    return 2;
  }

  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    twi_txBuffer[twi_txBufferLength+i] = data[i];
     832:	a0 91 42 08 	lds	r26, 0x0842	; 0x800842 <twi_txBufferLength>
     836:	21 91       	ld	r18, Z+
     838:	ac 01       	movw	r20, r24
     83a:	4e 5d       	subi	r20, 0xDE	; 222
     83c:	57 4f       	sbci	r21, 0xF7	; 247
     83e:	a4 0f       	add	r26, r20
     840:	b5 2f       	mov	r27, r21
     842:	b1 1d       	adc	r27, r1
     844:	2c 93       	st	X, r18
     846:	01 96       	adiw	r24, 0x01	; 1
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:375
  if(TWI_STX != twi_state){
    return 2;
  }

  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
     848:	86 17       	cp	r24, r22
     84a:	98 f3       	brcs	.-26     	; 0x832 <twi_transmit+0x22>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:378
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
     84c:	80 91 42 08 	lds	r24, 0x0842	; 0x800842 <twi_txBufferLength>
     850:	68 0f       	add	r22, r24
     852:	60 93 42 08 	sts	0x0842, r22	; 0x800842 <twi_txBufferLength>
     856:	80 e0       	ldi	r24, 0x00	; 0
     858:	08 95       	ret
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:366
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
    return 1;
     85a:	81 e0       	ldi	r24, 0x01	; 1
     85c:	08 95       	ret

0000085e <TwoWire::flush()>:
flush():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:328
}

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
     85e:	08 95       	ret

00000860 <TwoWire::peek()>:
peek():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:318
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;

  if(rxBufferIndex < rxBufferLength){
     860:	e0 91 dd 08 	lds	r30, 0x08DD	; 0x8008dd <TwoWire::rxBufferIndex>
     864:	80 91 dc 08 	lds	r24, 0x08DC	; 0x8008dc <TwoWire::rxBufferLength>
     868:	e8 17       	cp	r30, r24
     86a:	30 f4       	brcc	.+12     	; 0x878 <TwoWire::peek()+0x18>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:319
    value = rxBuffer[rxBufferIndex];
     86c:	f0 e0       	ldi	r31, 0x00	; 0
     86e:	e4 54       	subi	r30, 0x44	; 68
     870:	f7 4f       	sbci	r31, 0xF7	; 247
     872:	80 81       	ld	r24, Z
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	08 95       	ret
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:316
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
     878:	8f ef       	ldi	r24, 0xFF	; 255
     87a:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:323
  if(rxBufferIndex < rxBufferLength){
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
     87c:	08 95       	ret

0000087e <TwoWire::available()>:
available():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:292
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
     87e:	80 91 dc 08 	lds	r24, 0x08DC	; 0x8008dc <TwoWire::rxBufferLength>
     882:	90 91 dd 08 	lds	r25, 0x08DD	; 0x8008dd <TwoWire::rxBufferIndex>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:293
}
     886:	89 1b       	sub	r24, r25
     888:	99 0b       	sbc	r25, r25
     88a:	08 95       	ret

0000088c <TwoWire::write(unsigned char const*, unsigned int)>:
write():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:273

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
     88c:	cf 92       	push	r12
     88e:	df 92       	push	r13
     890:	ef 92       	push	r14
     892:	ff 92       	push	r15
     894:	0f 93       	push	r16
     896:	1f 93       	push	r17
     898:	cf 93       	push	r28
     89a:	df 93       	push	r29
     89c:	7c 01       	movw	r14, r24
     89e:	cb 01       	movw	r24, r22
     8a0:	8a 01       	movw	r16, r20
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:274
  if(transmitting){
     8a2:	20 91 98 08 	lds	r18, 0x0898	; 0x800898 <TwoWire::transmitting>
     8a6:	22 23       	and	r18, r18
     8a8:	89 f0       	breq	.+34     	; 0x8cc <TwoWire::write(unsigned char const*, unsigned int)+0x40>
     8aa:	eb 01       	movw	r28, r22
     8ac:	6b 01       	movw	r12, r22
     8ae:	c4 0e       	add	r12, r20
     8b0:	d5 1e       	adc	r13, r21
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:276
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
     8b2:	cc 15       	cp	r28, r12
     8b4:	dd 05       	cpc	r29, r13
     8b6:	69 f0       	breq	.+26     	; 0x8d2 <TwoWire::write(unsigned char const*, unsigned int)+0x46>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:277
      write(data[i]);
     8b8:	69 91       	ld	r22, Y+
     8ba:	d7 01       	movw	r26, r14
     8bc:	ed 91       	ld	r30, X+
     8be:	fc 91       	ld	r31, X
     8c0:	01 90       	ld	r0, Z+
     8c2:	f0 81       	ld	r31, Z
     8c4:	e0 2d       	mov	r30, r0
     8c6:	c7 01       	movw	r24, r14
     8c8:	09 95       	icall
     8ca:	f3 cf       	rjmp	.-26     	; 0x8b2 <TwoWire::write(unsigned char const*, unsigned int)+0x26>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:282
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
     8cc:	64 2f       	mov	r22, r20
     8ce:	0e 94 08 04 	call	0x810	; 0x810 <twi_transmit>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:285
  }
  return quantity;
}
     8d2:	c8 01       	movw	r24, r16
     8d4:	df 91       	pop	r29
     8d6:	cf 91       	pop	r28
     8d8:	1f 91       	pop	r17
     8da:	0f 91       	pop	r16
     8dc:	ff 90       	pop	r15
     8de:	ef 90       	pop	r14
     8e0:	df 90       	pop	r13
     8e2:	cf 90       	pop	r12
     8e4:	08 95       	ret

000008e6 <TwoWire::write(unsigned char)>:
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:248

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
     8e6:	cf 93       	push	r28
     8e8:	df 93       	push	r29
     8ea:	1f 92       	push	r1
     8ec:	cd b7       	in	r28, 0x3d	; 61
     8ee:	de b7       	in	r29, 0x3e	; 62
     8f0:	69 83       	std	Y+1, r22	; 0x01
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:249
  if(transmitting){
     8f2:	20 91 98 08 	lds	r18, 0x0898	; 0x800898 <TwoWire::transmitting>
     8f6:	22 23       	and	r18, r18
     8f8:	f9 f0       	breq	.+62     	; 0x938 <TwoWire::write(unsigned char)+0x52>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:252
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= TWI_BUFFER_SIZE){
     8fa:	20 91 bb 08 	lds	r18, 0x08BB	; 0x8008bb <TwoWire::txBufferLength>
     8fe:	20 32       	cpi	r18, 0x20	; 32
     900:	58 f0       	brcs	.+22     	; 0x918 <TwoWire::write(unsigned char)+0x32>
_ZN5Print13setWriteErrorEi():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.h:44
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
     902:	21 e0       	ldi	r18, 0x01	; 1
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	fc 01       	movw	r30, r24
     908:	33 83       	std	Z+3, r19	; 0x03
     90a:	22 83       	std	Z+2, r18	; 0x02
write():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:254
      setWriteError();
      return 0;
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:267
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
}
     910:	0f 90       	pop	r0
     912:	df 91       	pop	r29
     914:	cf 91       	pop	r28
     916:	08 95       	ret
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:257
    if(txBufferLength >= TWI_BUFFER_SIZE){
      setWriteError();
      return 0;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
     918:	80 91 99 08 	lds	r24, 0x0899	; 0x800899 <TwoWire::txBufferIndex>
     91c:	e8 2f       	mov	r30, r24
     91e:	f0 e0       	ldi	r31, 0x00	; 0
     920:	e6 56       	subi	r30, 0x66	; 102
     922:	f7 4f       	sbci	r31, 0xF7	; 247
     924:	99 81       	ldd	r25, Y+1	; 0x01
     926:	90 83       	st	Z, r25
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:258
    ++txBufferIndex;
     928:	8f 5f       	subi	r24, 0xFF	; 255
     92a:	80 93 99 08 	sts	0x0899, r24	; 0x800899 <TwoWire::txBufferIndex>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:260
    // update amount in buffer
    txBufferLength = txBufferIndex;
     92e:	80 93 bb 08 	sts	0x08BB, r24	; 0x8008bb <TwoWire::txBufferLength>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:266
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	ec cf       	rjmp	.-40     	; 0x910 <TwoWire::write(unsigned char)+0x2a>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:264
    // update amount in buffer
    txBufferLength = txBufferIndex;
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
     938:	61 e0       	ldi	r22, 0x01	; 1
     93a:	ce 01       	movw	r24, r28
     93c:	01 96       	adiw	r24, 0x01	; 1
     93e:	0e 94 08 04 	call	0x810	; 0x810 <twi_transmit>
     942:	f7 cf       	rjmp	.-18     	; 0x932 <TwoWire::write(unsigned char)+0x4c>

00000944 <LiquidCrystal::pulseEnable()>:
pulseEnable():
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:303
    write4bits(value>>4);
    write4bits(value);
  }
}

void LiquidCrystal::pulseEnable(void) {
     944:	cf 93       	push	r28
     946:	df 93       	push	r29
     948:	ec 01       	movw	r28, r24
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:304
  digitalWrite(_enable_pin, LOW);
     94a:	60 e0       	ldi	r22, 0x00	; 0
     94c:	8e 81       	ldd	r24, Y+6	; 0x06
     94e:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <digitalWrite>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:305
  delayMicroseconds(1);    
     952:	81 e0       	ldi	r24, 0x01	; 1
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	0e 94 42 02 	call	0x484	; 0x484 <delayMicroseconds>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:306
  digitalWrite(_enable_pin, HIGH);
     95a:	61 e0       	ldi	r22, 0x01	; 1
     95c:	8e 81       	ldd	r24, Y+6	; 0x06
     95e:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <digitalWrite>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:307
  delayMicroseconds(1);    // enable pulse must be >450ns
     962:	81 e0       	ldi	r24, 0x01	; 1
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	0e 94 42 02 	call	0x484	; 0x484 <delayMicroseconds>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:308
  digitalWrite(_enable_pin, LOW);
     96a:	60 e0       	ldi	r22, 0x00	; 0
     96c:	8e 81       	ldd	r24, Y+6	; 0x06
     96e:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <digitalWrite>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:309
  delayMicroseconds(100);   // commands need > 37us to settle
     972:	84 e6       	ldi	r24, 0x64	; 100
     974:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:310
}
     976:	df 91       	pop	r29
     978:	cf 91       	pop	r28
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:309
  digitalWrite(_enable_pin, LOW);
  delayMicroseconds(1);    
  digitalWrite(_enable_pin, HIGH);
  delayMicroseconds(1);    // enable pulse must be >450ns
  digitalWrite(_enable_pin, LOW);
  delayMicroseconds(100);   // commands need > 37us to settle
     97a:	0c 94 42 02 	jmp	0x484	; 0x484 <delayMicroseconds>

0000097e <LiquidCrystal::write4bits(unsigned char)>:
write4bits():
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:312
}

void LiquidCrystal::write4bits(uint8_t value) {
     97e:	cf 92       	push	r12
     980:	df 92       	push	r13
     982:	ef 92       	push	r14
     984:	ff 92       	push	r15
     986:	0f 93       	push	r16
     988:	1f 93       	push	r17
     98a:	cf 93       	push	r28
     98c:	df 93       	push	r29
     98e:	6c 01       	movw	r12, r24
     990:	7c 01       	movw	r14, r24
     992:	87 e0       	ldi	r24, 0x07	; 7
     994:	e8 0e       	add	r14, r24
     996:	f1 1c       	adc	r15, r1
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:313
  for (int i = 0; i < 4; i++) {
     998:	d0 e0       	ldi	r29, 0x00	; 0
     99a:	c0 e0       	ldi	r28, 0x00	; 0
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:314
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
     99c:	06 2f       	mov	r16, r22
     99e:	10 e0       	ldi	r17, 0x00	; 0
     9a0:	b8 01       	movw	r22, r16
     9a2:	0c 2e       	mov	r0, r28
     9a4:	02 c0       	rjmp	.+4      	; 0x9aa <LiquidCrystal::write4bits(unsigned char)+0x2c>
     9a6:	75 95       	asr	r23
     9a8:	67 95       	ror	r22
     9aa:	0a 94       	dec	r0
     9ac:	e2 f7       	brpl	.-8      	; 0x9a6 <LiquidCrystal::write4bits(unsigned char)+0x28>
     9ae:	61 70       	andi	r22, 0x01	; 1
     9b0:	f7 01       	movw	r30, r14
     9b2:	81 91       	ld	r24, Z+
     9b4:	7f 01       	movw	r14, r30
     9b6:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <digitalWrite>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:313
  digitalWrite(_enable_pin, LOW);
  delayMicroseconds(100);   // commands need > 37us to settle
}

void LiquidCrystal::write4bits(uint8_t value) {
  for (int i = 0; i < 4; i++) {
     9ba:	21 96       	adiw	r28, 0x01	; 1
     9bc:	c4 30       	cpi	r28, 0x04	; 4
     9be:	d1 05       	cpc	r29, r1
     9c0:	79 f7       	brne	.-34     	; 0x9a0 <LiquidCrystal::write4bits(unsigned char)+0x22>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:317
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }

  pulseEnable();
     9c2:	c6 01       	movw	r24, r12
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:318
}
     9c4:	df 91       	pop	r29
     9c6:	cf 91       	pop	r28
     9c8:	1f 91       	pop	r17
     9ca:	0f 91       	pop	r16
     9cc:	ff 90       	pop	r15
     9ce:	ef 90       	pop	r14
     9d0:	df 90       	pop	r13
     9d2:	cf 90       	pop	r12
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:317
void LiquidCrystal::write4bits(uint8_t value) {
  for (int i = 0; i < 4; i++) {
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }

  pulseEnable();
     9d4:	0c 94 a2 04 	jmp	0x944	; 0x944 <LiquidCrystal::pulseEnable()>

000009d8 <LiquidCrystal::send(unsigned char, unsigned char)>:
send():
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:287
}

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void LiquidCrystal::send(uint8_t value, uint8_t mode) {
     9d8:	cf 92       	push	r12
     9da:	df 92       	push	r13
     9dc:	ef 92       	push	r14
     9de:	ff 92       	push	r15
     9e0:	0f 93       	push	r16
     9e2:	1f 93       	push	r17
     9e4:	cf 93       	push	r28
     9e6:	df 93       	push	r29
     9e8:	ec 01       	movw	r28, r24
     9ea:	f6 2e       	mov	r15, r22
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:288
  digitalWrite(_rs_pin, mode);
     9ec:	64 2f       	mov	r22, r20
     9ee:	8c 81       	ldd	r24, Y+4	; 0x04
     9f0:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <digitalWrite>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:291

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
     9f4:	8d 81       	ldd	r24, Y+5	; 0x05
     9f6:	8f 3f       	cpi	r24, 0xFF	; 255
     9f8:	19 f0       	breq	.+6      	; 0xa00 <LiquidCrystal::send(unsigned char, unsigned char)+0x28>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:292
    digitalWrite(_rw_pin, LOW);
     9fa:	60 e0       	ldi	r22, 0x00	; 0
     9fc:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <digitalWrite>
     a00:	0f 2d       	mov	r16, r15
     a02:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:295
  }
  
  if (_displayfunction & LCD_8BITMODE) {
     a04:	8f 85       	ldd	r24, Y+15	; 0x0f
     a06:	84 ff       	sbrs	r24, 4
     a08:	25 c0       	rjmp	.+74     	; 0xa54 <LiquidCrystal::send(unsigned char, unsigned char)+0x7c>
     a0a:	6e 01       	movw	r12, r28
     a0c:	87 e0       	ldi	r24, 0x07	; 7
     a0e:	c8 0e       	add	r12, r24
     a10:	d1 1c       	adc	r13, r1
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:321

  pulseEnable();
}

void LiquidCrystal::write8bits(uint8_t value) {
  for (int i = 0; i < 8; i++) {
     a12:	f1 2c       	mov	r15, r1
     a14:	e1 2c       	mov	r14, r1
write8bits():
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:322
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
     a16:	b8 01       	movw	r22, r16
     a18:	0e 2c       	mov	r0, r14
     a1a:	02 c0       	rjmp	.+4      	; 0xa20 <LiquidCrystal::send(unsigned char, unsigned char)+0x48>
     a1c:	75 95       	asr	r23
     a1e:	67 95       	ror	r22
     a20:	0a 94       	dec	r0
     a22:	e2 f7       	brpl	.-8      	; 0xa1c <LiquidCrystal::send(unsigned char, unsigned char)+0x44>
     a24:	61 70       	andi	r22, 0x01	; 1
     a26:	f6 01       	movw	r30, r12
     a28:	81 91       	ld	r24, Z+
     a2a:	6f 01       	movw	r12, r30
     a2c:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <digitalWrite>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:321

  pulseEnable();
}

void LiquidCrystal::write8bits(uint8_t value) {
  for (int i = 0; i < 8; i++) {
     a30:	ff ef       	ldi	r31, 0xFF	; 255
     a32:	ef 1a       	sub	r14, r31
     a34:	ff 0a       	sbc	r15, r31
     a36:	88 e0       	ldi	r24, 0x08	; 8
     a38:	e8 16       	cp	r14, r24
     a3a:	f1 04       	cpc	r15, r1
     a3c:	61 f7       	brne	.-40     	; 0xa16 <LiquidCrystal::send(unsigned char, unsigned char)+0x3e>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:325
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }
  
  pulseEnable();
     a3e:	ce 01       	movw	r24, r28
send():
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:301
    write8bits(value); 
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
     a40:	df 91       	pop	r29
     a42:	cf 91       	pop	r28
     a44:	1f 91       	pop	r17
     a46:	0f 91       	pop	r16
     a48:	ff 90       	pop	r15
     a4a:	ef 90       	pop	r14
     a4c:	df 90       	pop	r13
     a4e:	cf 90       	pop	r12
write8bits():
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:325
void LiquidCrystal::write8bits(uint8_t value) {
  for (int i = 0; i < 8; i++) {
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }
  
  pulseEnable();
     a50:	0c 94 a2 04 	jmp	0x944	; 0x944 <LiquidCrystal::pulseEnable()>
send():
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:298
  }
  
  if (_displayfunction & LCD_8BITMODE) {
    write8bits(value); 
  } else {
    write4bits(value>>4);
     a54:	b8 01       	movw	r22, r16
     a56:	84 e0       	ldi	r24, 0x04	; 4
     a58:	75 95       	asr	r23
     a5a:	67 95       	ror	r22
     a5c:	8a 95       	dec	r24
     a5e:	e1 f7       	brne	.-8      	; 0xa58 <LiquidCrystal::send(unsigned char, unsigned char)+0x80>
     a60:	ce 01       	movw	r24, r28
     a62:	0e 94 bf 04 	call	0x97e	; 0x97e <LiquidCrystal::write4bits(unsigned char)>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:299
    write4bits(value);
     a66:	6f 2d       	mov	r22, r15
     a68:	ce 01       	movw	r24, r28
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:301
  }
}
     a6a:	df 91       	pop	r29
     a6c:	cf 91       	pop	r28
     a6e:	1f 91       	pop	r17
     a70:	0f 91       	pop	r16
     a72:	ff 90       	pop	r15
     a74:	ef 90       	pop	r14
     a76:	df 90       	pop	r13
     a78:	cf 90       	pop	r12
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:299
  
  if (_displayfunction & LCD_8BITMODE) {
    write8bits(value); 
  } else {
    write4bits(value>>4);
    write4bits(value);
     a7a:	0c 94 bf 04 	jmp	0x97e	; 0x97e <LiquidCrystal::write4bits(unsigned char)>

00000a7e <LiquidCrystal::command(unsigned char) [clone .constprop.35]>:
command():
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:276
}

/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
     a7e:	40 e0       	ldi	r20, 0x00	; 0
     a80:	68 2f       	mov	r22, r24
     a82:	84 e7       	ldi	r24, 0x74	; 116
     a84:	9a e0       	ldi	r25, 0x0A	; 10
     a86:	0c 94 ec 04 	jmp	0x9d8	; 0x9d8 <LiquidCrystal::send(unsigned char, unsigned char)>

00000a8a <LiquidCrystal::clear() [clone .constprop.34]>:
clear():
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:178
}

/********** high level commands, for the user! */
void LiquidCrystal::clear()
{
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
     a8a:	81 e0       	ldi	r24, 0x01	; 1
     a8c:	0e 94 3f 05 	call	0xa7e	; 0xa7e <LiquidCrystal::command(unsigned char) [clone .constprop.35]>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:179
  delayMicroseconds(2000);  // this command takes a long time!
     a90:	80 ed       	ldi	r24, 0xD0	; 208
     a92:	97 e0       	ldi	r25, 0x07	; 7
     a94:	0c 94 42 02 	jmp	0x484	; 0x484 <delayMicroseconds>

00000a98 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.32]>:
begin():
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:78
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
  
  begin(16, 1);  
}

void LiquidCrystal::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
     a98:	cf 93       	push	r28
     a9a:	df 93       	push	r29
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:79
  if (lines > 1) {
     a9c:	61 30       	cpi	r22, 0x01	; 1
     a9e:	29 f0       	breq	.+10     	; 0xaaa <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.32]+0x12>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:80
    _displayfunction |= LCD_2LINE;
     aa0:	90 91 83 0a 	lds	r25, 0x0A83	; 0x800a83 <lcd+0xf>
     aa4:	98 60       	ori	r25, 0x08	; 8
     aa6:	90 93 83 0a 	sts	0x0A83, r25	; 0x800a83 <lcd+0xf>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:82
  }
  _numlines = lines;
     aaa:	60 93 87 0a 	sts	0x0A87, r22	; 0x800a87 <lcd+0x13>
setRowOffsets():
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:169

}

void LiquidCrystal::setRowOffsets(int row0, int row1, int row2, int row3)
{
  _row_offsets[0] = row0;
     aae:	10 92 88 0a 	sts	0x0A88, r1	; 0x800a88 <lcd+0x14>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:170
  _row_offsets[1] = row1;
     ab2:	90 e4       	ldi	r25, 0x40	; 64
     ab4:	90 93 89 0a 	sts	0x0A89, r25	; 0x800a89 <lcd+0x15>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:171
  _row_offsets[2] = row2;
     ab8:	80 93 8a 0a 	sts	0x0A8A, r24	; 0x800a8a <lcd+0x16>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:172
  _row_offsets[3] = row3;
     abc:	80 5c       	subi	r24, 0xC0	; 192
     abe:	80 93 8b 0a 	sts	0x0A8B, r24	; 0x800a8b <lcd+0x17>
begin():
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:91
  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
    _displayfunction |= LCD_5x10DOTS;
  }

  pinMode(_rs_pin, OUTPUT);
     ac2:	61 e0       	ldi	r22, 0x01	; 1
     ac4:	80 91 78 0a 	lds	r24, 0x0A78	; 0x800a78 <lcd+0x4>
     ac8:	0e 94 89 01 	call	0x312	; 0x312 <pinMode>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:93
  // we can save 1 pin by not using RW. Indicate by passing 255 instead of pin#
  if (_rw_pin != 255) { 
     acc:	80 91 79 0a 	lds	r24, 0x0A79	; 0x800a79 <lcd+0x5>
     ad0:	8f 3f       	cpi	r24, 0xFF	; 255
     ad2:	19 f0       	breq	.+6      	; 0xada <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.32]+0x42>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:94
    pinMode(_rw_pin, OUTPUT);
     ad4:	61 e0       	ldi	r22, 0x01	; 1
     ad6:	0e 94 89 01 	call	0x312	; 0x312 <pinMode>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:96
  }
  pinMode(_enable_pin, OUTPUT);
     ada:	61 e0       	ldi	r22, 0x01	; 1
     adc:	80 91 7a 0a 	lds	r24, 0x0A7A	; 0x800a7a <lcd+0x6>
     ae0:	0e 94 89 01 	call	0x312	; 0x312 <pinMode>
     ae4:	c4 e7       	ldi	r28, 0x74	; 116
     ae6:	da e0       	ldi	r29, 0x0A	; 10
     ae8:	9e 01       	movw	r18, r28
     aea:	24 57       	subi	r18, 0x74	; 116
     aec:	3a 40       	sbci	r19, 0x0A	; 10
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:99
  
  // Do these once, instead of every time a character is drawn for speed reasons.
  for (int i=0; i<((_displayfunction & LCD_8BITMODE) ? 8 : 4); ++i)
     aee:	80 91 83 0a 	lds	r24, 0x0A83	; 0x800a83 <lcd+0xf>
     af2:	84 fd       	sbrc	r24, 4
     af4:	0b c0       	rjmp	.+22     	; 0xb0c <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.32]+0x74>
     af6:	84 e0       	ldi	r24, 0x04	; 4
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	21 96       	adiw	r28, 0x01	; 1
     afc:	28 17       	cp	r18, r24
     afe:	39 07       	cpc	r19, r25
     b00:	44 f4       	brge	.+16     	; 0xb12 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.32]+0x7a>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:101
  {
    pinMode(_data_pins[i], OUTPUT);
     b02:	61 e0       	ldi	r22, 0x01	; 1
     b04:	8e 81       	ldd	r24, Y+6	; 0x06
     b06:	0e 94 89 01 	call	0x312	; 0x312 <pinMode>
     b0a:	ee cf       	rjmp	.-36     	; 0xae8 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.32]+0x50>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:99
    pinMode(_rw_pin, OUTPUT);
  }
  pinMode(_enable_pin, OUTPUT);
  
  // Do these once, instead of every time a character is drawn for speed reasons.
  for (int i=0; i<((_displayfunction & LCD_8BITMODE) ? 8 : 4); ++i)
     b0c:	88 e0       	ldi	r24, 0x08	; 8
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	f4 cf       	rjmp	.-24     	; 0xafa <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.32]+0x62>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:107
   } 

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // before sending commands. Arduino can turn on way before 4.5V so we'll wait 50
  delayMicroseconds(50000); 
     b12:	80 e5       	ldi	r24, 0x50	; 80
     b14:	93 ec       	ldi	r25, 0xC3	; 195
     b16:	0e 94 42 02 	call	0x484	; 0x484 <delayMicroseconds>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:109
  // Now we pull both RS and R/W low to begin commands
  digitalWrite(_rs_pin, LOW);
     b1a:	60 e0       	ldi	r22, 0x00	; 0
     b1c:	80 91 78 0a 	lds	r24, 0x0A78	; 0x800a78 <lcd+0x4>
     b20:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <digitalWrite>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:110
  digitalWrite(_enable_pin, LOW);
     b24:	60 e0       	ldi	r22, 0x00	; 0
     b26:	80 91 7a 0a 	lds	r24, 0x0A7A	; 0x800a7a <lcd+0x6>
     b2a:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <digitalWrite>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:111
  if (_rw_pin != 255) { 
     b2e:	80 91 79 0a 	lds	r24, 0x0A79	; 0x800a79 <lcd+0x5>
     b32:	8f 3f       	cpi	r24, 0xFF	; 255
     b34:	19 f0       	breq	.+6      	; 0xb3c <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.32]+0xa4>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:112
    digitalWrite(_rw_pin, LOW);
     b36:	60 e0       	ldi	r22, 0x00	; 0
     b38:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <digitalWrite>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:116
  }
  
  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
     b3c:	80 91 83 0a 	lds	r24, 0x0A83	; 0x800a83 <lcd+0xf>
     b40:	84 fd       	sbrc	r24, 4
     b42:	35 c0       	rjmp	.+106    	; 0xbae <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.32]+0x116>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:121
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
     b44:	63 e0       	ldi	r22, 0x03	; 3
     b46:	84 e7       	ldi	r24, 0x74	; 116
     b48:	9a e0       	ldi	r25, 0x0A	; 10
     b4a:	0e 94 bf 04 	call	0x97e	; 0x97e <LiquidCrystal::write4bits(unsigned char)>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:122
    delayMicroseconds(4500); // wait min 4.1ms
     b4e:	84 e9       	ldi	r24, 0x94	; 148
     b50:	91 e1       	ldi	r25, 0x11	; 17
     b52:	0e 94 42 02 	call	0x484	; 0x484 <delayMicroseconds>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:125

    // second try
    write4bits(0x03);
     b56:	63 e0       	ldi	r22, 0x03	; 3
     b58:	84 e7       	ldi	r24, 0x74	; 116
     b5a:	9a e0       	ldi	r25, 0x0A	; 10
     b5c:	0e 94 bf 04 	call	0x97e	; 0x97e <LiquidCrystal::write4bits(unsigned char)>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:126
    delayMicroseconds(4500); // wait min 4.1ms
     b60:	84 e9       	ldi	r24, 0x94	; 148
     b62:	91 e1       	ldi	r25, 0x11	; 17
     b64:	0e 94 42 02 	call	0x484	; 0x484 <delayMicroseconds>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:129
    
    // third go!
    write4bits(0x03); 
     b68:	63 e0       	ldi	r22, 0x03	; 3
     b6a:	84 e7       	ldi	r24, 0x74	; 116
     b6c:	9a e0       	ldi	r25, 0x0A	; 10
     b6e:	0e 94 bf 04 	call	0x97e	; 0x97e <LiquidCrystal::write4bits(unsigned char)>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:130
    delayMicroseconds(150);
     b72:	86 e9       	ldi	r24, 0x96	; 150
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	0e 94 42 02 	call	0x484	; 0x484 <delayMicroseconds>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:133

    // finally, set to 4-bit interface
    write4bits(0x02); 
     b7a:	62 e0       	ldi	r22, 0x02	; 2
     b7c:	84 e7       	ldi	r24, 0x74	; 116
     b7e:	9a e0       	ldi	r25, 0x0A	; 10
     b80:	0e 94 bf 04 	call	0x97e	; 0x97e <LiquidCrystal::write4bits(unsigned char)>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:151
    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);  
     b84:	80 91 83 0a 	lds	r24, 0x0A83	; 0x800a83 <lcd+0xf>
     b88:	80 62       	ori	r24, 0x20	; 32
     b8a:	0e 94 3f 05 	call	0xa7e	; 0xa7e <LiquidCrystal::command(unsigned char) [clone .constprop.35]>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:154

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
     b8e:	84 e0       	ldi	r24, 0x04	; 4
     b90:	80 93 84 0a 	sts	0x0A84, r24	; 0x800a84 <lcd+0x10>
display():
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:208
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void LiquidCrystal::display() {
  _displaycontrol |= LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
     b94:	8c e0       	ldi	r24, 0x0C	; 12
     b96:	0e 94 3f 05 	call	0xa7e	; 0xa7e <LiquidCrystal::command(unsigned char) [clone .constprop.35]>
begin():
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:158
  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
  display();

  // clear it off
  clear();
     b9a:	0e 94 45 05 	call	0xa8a	; 0xa8a <LiquidCrystal::clear() [clone .constprop.34]>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:161

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
     b9e:	82 e0       	ldi	r24, 0x02	; 2
     ba0:	80 93 85 0a 	sts	0x0A85, r24	; 0x800a85 <lcd+0x11>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:163
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
     ba4:	86 e0       	ldi	r24, 0x06	; 6
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:165

}
     ba6:	df 91       	pop	r29
     ba8:	cf 91       	pop	r28
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:163
  clear();

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
     baa:	0c 94 3f 05 	jmp	0xa7e	; 0xa7e <LiquidCrystal::command(unsigned char) [clone .constprop.35]>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:139
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
     bae:	80 62       	ori	r24, 0x20	; 32
     bb0:	0e 94 3f 05 	call	0xa7e	; 0xa7e <LiquidCrystal::command(unsigned char) [clone .constprop.35]>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:140
    delayMicroseconds(4500);  // wait more than 4.1ms
     bb4:	84 e9       	ldi	r24, 0x94	; 148
     bb6:	91 e1       	ldi	r25, 0x11	; 17
     bb8:	0e 94 42 02 	call	0x484	; 0x484 <delayMicroseconds>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:143

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
     bbc:	80 91 83 0a 	lds	r24, 0x0A83	; 0x800a83 <lcd+0xf>
     bc0:	80 62       	ori	r24, 0x20	; 32
     bc2:	0e 94 3f 05 	call	0xa7e	; 0xa7e <LiquidCrystal::command(unsigned char) [clone .constprop.35]>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:144
    delayMicroseconds(150);
     bc6:	86 e9       	ldi	r24, 0x96	; 150
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	0e 94 42 02 	call	0x484	; 0x484 <delayMicroseconds>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:147

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
     bce:	80 91 83 0a 	lds	r24, 0x0A83	; 0x800a83 <lcd+0xf>
     bd2:	80 62       	ori	r24, 0x20	; 32
     bd4:	0e 94 3f 05 	call	0xa7e	; 0xa7e <LiquidCrystal::command(unsigned char) [clone .constprop.35]>
     bd8:	d5 cf       	rjmp	.-86     	; 0xb84 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.32]+0xec>

00000bda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>:
setCursor():
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:188
{
  command(LCD_RETURNHOME);  // set cursor position to zero
  delayMicroseconds(2000);  // this command takes a long time!
}

void LiquidCrystal::setCursor(uint8_t col, uint8_t row)
     bda:	64 30       	cpi	r22, 0x04	; 4
     bdc:	08 f0       	brcs	.+2      	; 0xbe0 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]+0x6>
     bde:	63 e0       	ldi	r22, 0x03	; 3
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:194
{
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
  if ( row >= max_lines ) {
    row = max_lines - 1;    // we count rows starting w/0
  }
  if ( row >= _numlines ) {
     be0:	90 91 87 0a 	lds	r25, 0x0A87	; 0x800a87 <lcd+0x13>
     be4:	69 17       	cp	r22, r25
     be6:	10 f0       	brcs	.+4      	; 0xbec <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]+0x12>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:195
    row = _numlines - 1;    // we count rows starting w/0
     be8:	6f ef       	ldi	r22, 0xFF	; 255
     bea:	69 0f       	add	r22, r25
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:198
  }
  
  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
     bec:	e6 2f       	mov	r30, r22
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	ec 58       	subi	r30, 0x8C	; 140
     bf2:	f5 4f       	sbci	r31, 0xF5	; 245
     bf4:	94 89       	ldd	r25, Z+20	; 0x14
     bf6:	89 0f       	add	r24, r25
     bf8:	80 68       	ori	r24, 0x80	; 128
     bfa:	0c 94 3f 05 	jmp	0xa7e	; 0xa7e <LiquidCrystal::command(unsigned char) [clone .constprop.35]>

00000bfe <LiquidCrystal::write(unsigned char)>:
write():
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:280
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
     bfe:	41 e0       	ldi	r20, 0x01	; 1
     c00:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <LiquidCrystal::send(unsigned char, unsigned char)>
C:\Users\14377\AppData\Local\Arduino15\libraries\LiquidCrystal\src/LiquidCrystal.cpp:282
  return 1; // assume sucess
}
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	08 95       	ret

00000c0a <Print::flush()>:
flush():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.h:65

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     c0a:	08 95       	ret

00000c0c <Print::availableForWrite()>:
availableForWrite():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.h:63
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	80 e0       	ldi	r24, 0x00	; 0
     c10:	08 95       	ret

00000c12 <read_sensor(char, char, char)>:
read_sensor():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:199
  int result = 0;
  result = (EEPROM.read(address) << 8) + EEPROM.read(address + 1);
  return result;
}

int read_sensor(char sensorNum, char pinNum, char outputMode) {
     c12:	1f 93       	push	r17
     c14:	cf 93       	push	r28
     c16:	df 93       	push	r29
     c18:	d8 2f       	mov	r29, r24
     c1a:	c6 2f       	mov	r28, r22
     c1c:	14 2f       	mov	r17, r20
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:201
  int output = 0;
  byte n1 = sensorNum & 0b0001;
     c1e:	68 2f       	mov	r22, r24
     c20:	61 70       	andi	r22, 0x01	; 1
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:205
  byte n2 = (sensorNum & 0b0010) / 2;
  byte n3 = (sensorNum & 0b0100) / 4;

  digitalWrite(MUX_A, n1);
     c22:	8c e2       	ldi	r24, 0x2C	; 44
     c24:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <digitalWrite>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:202
}

int read_sensor(char sensorNum, char pinNum, char outputMode) {
  int output = 0;
  byte n1 = sensorNum & 0b0001;
  byte n2 = (sensorNum & 0b0010) / 2;
     c28:	d1 fb       	bst	r29, 1
     c2a:	66 27       	eor	r22, r22
     c2c:	60 f9       	bld	r22, 0
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:206
  byte n3 = (sensorNum & 0b0100) / 4;

  digitalWrite(MUX_A, n1);
  digitalWrite(MUX_B, n2);
     c2e:	8b e2       	ldi	r24, 0x2B	; 43
     c30:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <digitalWrite>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:203

int read_sensor(char sensorNum, char pinNum, char outputMode) {
  int output = 0;
  byte n1 = sensorNum & 0b0001;
  byte n2 = (sensorNum & 0b0010) / 2;
  byte n3 = (sensorNum & 0b0100) / 4;
     c34:	6d 2f       	mov	r22, r29
     c36:	65 95       	asr	r22
     c38:	65 95       	asr	r22
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:207

  digitalWrite(MUX_A, n1);
  digitalWrite(MUX_B, n2);
  digitalWrite(MUX_C, n3);
     c3a:	8a e2       	ldi	r24, 0x2A	; 42
     c3c:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <digitalWrite>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:208
  if (outputMode == 0)  // digital Mode
     c40:	11 11       	cpse	r17, r1
     c42:	0f c0       	rjmp	.+30     	; 0xc62 <read_sensor(char, char, char)+0x50>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:211
  {
    if (pinNum == 0)
      output = digitalRead(A0);
     c44:	8d e2       	ldi	r24, 0x2D	; 45
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:210
  digitalWrite(MUX_A, n1);
  digitalWrite(MUX_B, n2);
  digitalWrite(MUX_C, n3);
  if (outputMode == 0)  // digital Mode
  {
    if (pinNum == 0)
     c46:	cc 23       	and	r28, r28
     c48:	39 f0       	breq	.+14     	; 0xc58 <read_sensor(char, char, char)+0x46>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:213
      output = digitalRead(A0);
    else if (pinNum == 1)
      output = digitalRead(A1);
     c4a:	8e e2       	ldi	r24, 0x2E	; 46
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:212
  digitalWrite(MUX_C, n3);
  if (outputMode == 0)  // digital Mode
  {
    if (pinNum == 0)
      output = digitalRead(A0);
    else if (pinNum == 1)
     c4c:	c1 30       	cpi	r28, 0x01	; 1
     c4e:	21 f0       	breq	.+8      	; 0xc58 <read_sensor(char, char, char)+0x46>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:215
      output = digitalRead(A1);
    else if (pinNum == 2)
      output = digitalRead(A2);
     c50:	8f e2       	ldi	r24, 0x2F	; 47
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:214
  {
    if (pinNum == 0)
      output = digitalRead(A0);
    else if (pinNum == 1)
      output = digitalRead(A1);
    else if (pinNum == 2)
     c52:	c2 30       	cpi	r28, 0x02	; 2
     c54:	09 f0       	breq	.+2      	; 0xc58 <read_sensor(char, char, char)+0x46>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:217
      output = digitalRead(A2);
    else if (pinNum == 3)
      output = digitalRead(A3);
     c56:	80 e3       	ldi	r24, 0x30	; 48
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:231
    else if (pinNum == 3)
      output = analogRead(A3);
    output = output * 5 / 102.3;
  }
  return output;
}
     c58:	df 91       	pop	r29
     c5a:	cf 91       	pop	r28
     c5c:	1f 91       	pop	r17
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:217
    else if (pinNum == 1)
      output = digitalRead(A1);
    else if (pinNum == 2)
      output = digitalRead(A2);
    else if (pinNum == 3)
      output = digitalRead(A3);
     c5e:	0c 94 32 01 	jmp	0x264	; 0x264 <digitalRead>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:221
  } else if (outputMode == 1)  // analog Mode
  {
    if (pinNum == 0)
      output = analogRead(A0);
     c62:	8d e2       	ldi	r24, 0x2D	; 45
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:220
      output = digitalRead(A2);
    else if (pinNum == 3)
      output = digitalRead(A3);
  } else if (outputMode == 1)  // analog Mode
  {
    if (pinNum == 0)
     c64:	cc 23       	and	r28, r28
     c66:	39 f0       	breq	.+14     	; 0xc76 <read_sensor(char, char, char)+0x64>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:223
      output = analogRead(A0);
    else if (pinNum == 1)
      output = analogRead(A1);
     c68:	8e e2       	ldi	r24, 0x2E	; 46
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:222
      output = digitalRead(A3);
  } else if (outputMode == 1)  // analog Mode
  {
    if (pinNum == 0)
      output = analogRead(A0);
    else if (pinNum == 1)
     c6a:	c1 30       	cpi	r28, 0x01	; 1
     c6c:	21 f0       	breq	.+8      	; 0xc76 <read_sensor(char, char, char)+0x64>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:225
      output = analogRead(A1);
    else if (pinNum == 2)
      output = analogRead(A2);
     c6e:	8f e2       	ldi	r24, 0x2F	; 47
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:224
  {
    if (pinNum == 0)
      output = analogRead(A0);
    else if (pinNum == 1)
      output = analogRead(A1);
    else if (pinNum == 2)
     c70:	c2 30       	cpi	r28, 0x02	; 2
     c72:	09 f0       	breq	.+2      	; 0xc76 <read_sensor(char, char, char)+0x64>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:227
      output = analogRead(A2);
    else if (pinNum == 3)
      output = analogRead(A3);
     c74:	80 e3       	ldi	r24, 0x30	; 48
     c76:	0e 94 39 02 	call	0x472	; 0x472 <analogRead>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:228
    output = output * 5 / 102.3;
     c7a:	25 e0       	ldi	r18, 0x05	; 5
     c7c:	28 9f       	mul	r18, r24
     c7e:	b0 01       	movw	r22, r0
     c80:	29 9f       	mul	r18, r25
     c82:	70 0d       	add	r23, r0
     c84:	11 24       	eor	r1, r1
     c86:	07 2e       	mov	r0, r23
     c88:	00 0c       	add	r0, r0
     c8a:	88 0b       	sbc	r24, r24
     c8c:	99 0b       	sbc	r25, r25
     c8e:	0e 94 5e 2c 	call	0x58bc	; 0x58bc <__floatsisf>
     c92:	2a e9       	ldi	r18, 0x9A	; 154
     c94:	39 e9       	ldi	r19, 0x99	; 153
     c96:	4c ec       	ldi	r20, 0xCC	; 204
     c98:	52 e4       	ldi	r21, 0x42	; 66
     c9a:	0e 94 b4 2b 	call	0x5768	; 0x5768 <__divsf3>
     c9e:	0e 94 26 2c 	call	0x584c	; 0x584c <__fixsfsi>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:231
  }
  return output;
}
     ca2:	cb 01       	movw	r24, r22
     ca4:	df 91       	pop	r29
     ca6:	cf 91       	pop	r28
     ca8:	1f 91       	pop	r17
     caa:	08 95       	ret

00000cac <go(int, int)>:
go():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:155
  else if (SR8) go(spd, -spd);

  else if (SL9) go(-spd, spd);
  else if (SR9) go(spd, -spd);
}
void go(int left, int right) {
     cac:	0f 93       	push	r16
     cae:	1f 93       	push	r17
     cb0:	cf 93       	push	r28
     cb2:	df 93       	push	r29
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:157
  left = -left;
  right = -right;
     cb4:	00 27       	eor	r16, r16
     cb6:	11 27       	eor	r17, r17
     cb8:	06 1b       	sub	r16, r22
     cba:	17 0b       	sbc	r17, r23
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:159

  if (left > 255)
     cbc:	81 30       	cpi	r24, 0x01	; 1
     cbe:	2f ef       	ldi	r18, 0xFF	; 255
     cc0:	92 07       	cpc	r25, r18
     cc2:	0c f4       	brge	.+2      	; 0xcc6 <go(int, int)+0x1a>
     cc4:	46 c0       	rjmp	.+140    	; 0xd52 <go(int, int)+0xa6>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:161
    left = 255;
  if (left < -255)
     cc6:	8f 3f       	cpi	r24, 0xFF	; 255
     cc8:	91 05       	cpc	r25, r1
     cca:	09 f0       	breq	.+2      	; 0xcce <go(int, int)+0x22>
     ccc:	cc f5       	brge	.+114    	; 0xd40 <go(int, int)+0x94>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:156

  else if (SL9) go(-spd, spd);
  else if (SR9) go(spd, -spd);
}
void go(int left, int right) {
  left = -left;
     cce:	cc 27       	eor	r28, r28
     cd0:	dd 27       	eor	r29, r29
     cd2:	c8 1b       	sub	r28, r24
     cd4:	d9 0b       	sbc	r29, r25
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:163

  if (left > 255)
    left = 255;
  if (left < -255)
    left = -255;
  if (right > 255)
     cd6:	61 30       	cpi	r22, 0x01	; 1
     cd8:	2f ef       	ldi	r18, 0xFF	; 255
     cda:	72 07       	cpc	r23, r18
     cdc:	2c f1       	brlt	.+74     	; 0xd28 <go(int, int)+0x7c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:165
    right = 255;
  if (right < -255)
     cde:	6f 3f       	cpi	r22, 0xFF	; 255
     ce0:	71 05       	cpc	r23, r1
     ce2:	09 f0       	breq	.+2      	; 0xce6 <go(int, int)+0x3a>
     ce4:	24 f5       	brge	.+72     	; 0xd2e <go(int, int)+0x82>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:168
    right = -255;

  if (left <= 0) {
     ce6:	97 fd       	sbrc	r25, 7
     ce8:	29 c0       	rjmp	.+82     	; 0xd3c <go(int, int)+0x90>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:169
    digitalWrite(2, LOW);
     cea:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:172
    analogWrite(3, -left);
  } else if (left > 0) {
    digitalWrite(2, HIGH);
     cec:	82 e0       	ldi	r24, 0x02	; 2
     cee:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <digitalWrite>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:173
    analogWrite(3, -left);
     cf2:	66 27       	eor	r22, r22
     cf4:	77 27       	eor	r23, r23
     cf6:	6c 1b       	sub	r22, r28
     cf8:	7d 0b       	sbc	r23, r29
     cfa:	83 e0       	ldi	r24, 0x03	; 3
     cfc:	0e 94 c5 01 	call	0x38a	; 0x38a <analogWrite>
     d00:	cc 27       	eor	r28, r28
     d02:	dd 27       	eor	r29, r29
     d04:	c0 1b       	sub	r28, r16
     d06:	d1 0b       	sbc	r29, r17
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:177
  }

  if (right <= 0) {
    digitalWrite(4, LOW);
     d08:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:176
  } else if (left > 0) {
    digitalWrite(2, HIGH);
    analogWrite(3, -left);
  }

  if (right <= 0) {
     d0a:	10 16       	cp	r1, r16
     d0c:	11 06       	cpc	r1, r17
     d0e:	0c f4       	brge	.+2      	; 0xd12 <go(int, int)+0x66>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:182
    digitalWrite(4, LOW);
    analogWrite(5, -right);
  }

  else if (right > 0) {
    digitalWrite(4, HIGH);
     d10:	61 e0       	ldi	r22, 0x01	; 1
     d12:	84 e0       	ldi	r24, 0x04	; 4
     d14:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <digitalWrite>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:183
    analogWrite(5, -right);
     d18:	be 01       	movw	r22, r28
     d1a:	85 e0       	ldi	r24, 0x05	; 5
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:185
  }
}
     d1c:	df 91       	pop	r29
     d1e:	cf 91       	pop	r28
     d20:	1f 91       	pop	r17
     d22:	0f 91       	pop	r16
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:183
    analogWrite(5, -right);
  }

  else if (right > 0) {
    digitalWrite(4, HIGH);
    analogWrite(5, -right);
     d24:	0c 94 c5 01 	jmp	0x38a	; 0x38a <analogWrite>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:164
  if (left > 255)
    left = 255;
  if (left < -255)
    left = -255;
  if (right > 255)
    right = 255;
     d28:	0f ef       	ldi	r16, 0xFF	; 255
     d2a:	10 e0       	ldi	r17, 0x00	; 0
     d2c:	dc cf       	rjmp	.-72     	; 0xce6 <go(int, int)+0x3a>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:166
  if (right < -255)
    right = -255;
     d2e:	01 e0       	ldi	r16, 0x01	; 1
     d30:	1f ef       	ldi	r17, 0xFF	; 255
     d32:	d9 cf       	rjmp	.-78     	; 0xce6 <go(int, int)+0x3a>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:164
  if (left > 255)
    left = 255;
  if (left < -255)
    left = -255;
  if (right > 255)
    right = 255;
     d34:	0f ef       	ldi	r16, 0xFF	; 255
     d36:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:160
void go(int left, int right) {
  left = -left;
  right = -right;

  if (left > 255)
    left = 255;
     d38:	cf ef       	ldi	r28, 0xFF	; 255
     d3a:	d0 e0       	ldi	r29, 0x00	; 0
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:172

  if (left <= 0) {
    digitalWrite(2, LOW);
    analogWrite(3, -left);
  } else if (left > 0) {
    digitalWrite(2, HIGH);
     d3c:	61 e0       	ldi	r22, 0x01	; 1
     d3e:	d6 cf       	rjmp	.-84     	; 0xcec <go(int, int)+0x40>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:163

  if (left > 255)
    left = 255;
  if (left < -255)
    left = -255;
  if (right > 255)
     d40:	61 30       	cpi	r22, 0x01	; 1
     d42:	8f ef       	ldi	r24, 0xFF	; 255
     d44:	78 07       	cpc	r23, r24
     d46:	84 f4       	brge	.+32     	; 0xd68 <go(int, int)+0xbc>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:164
    right = 255;
     d48:	0f ef       	ldi	r16, 0xFF	; 255
     d4a:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:162
  right = -right;

  if (left > 255)
    left = 255;
  if (left < -255)
    left = -255;
     d4c:	c1 e0       	ldi	r28, 0x01	; 1
     d4e:	df ef       	ldi	r29, 0xFF	; 255
     d50:	cc cf       	rjmp	.-104    	; 0xcea <go(int, int)+0x3e>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:163
  if (right > 255)
     d52:	61 30       	cpi	r22, 0x01	; 1
     d54:	2f ef       	ldi	r18, 0xFF	; 255
     d56:	72 07       	cpc	r23, r18
     d58:	6c f3       	brlt	.-38     	; 0xd34 <go(int, int)+0x88>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:165
    right = 255;
  if (right < -255)
     d5a:	6f 3f       	cpi	r22, 0xFF	; 255
     d5c:	71 05       	cpc	r23, r1
     d5e:	61 f3       	breq	.-40     	; 0xd38 <go(int, int)+0x8c>
     d60:	5c f3       	brlt	.-42     	; 0xd38 <go(int, int)+0x8c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:166
    right = -255;
     d62:	01 e0       	ldi	r16, 0x01	; 1
     d64:	1f ef       	ldi	r17, 0xFF	; 255
     d66:	e8 cf       	rjmp	.-48     	; 0xd38 <go(int, int)+0x8c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:165
    left = 255;
  if (left < -255)
    left = -255;
  if (right > 255)
    right = 255;
  if (right < -255)
     d68:	6f 3f       	cpi	r22, 0xFF	; 255
     d6a:	71 05       	cpc	r23, r1
     d6c:	79 f3       	breq	.-34     	; 0xd4c <go(int, int)+0xa0>
     d6e:	74 f3       	brlt	.-36     	; 0xd4c <go(int, int)+0xa0>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:166
    right = -255;
     d70:	01 e0       	ldi	r16, 0x01	; 1
     d72:	1f ef       	ldi	r17, 0xFF	; 255
     d74:	eb cf       	rjmp	.-42     	; 0xd4c <go(int, int)+0xa0>

00000d76 <beep(int)>:
beep():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:7
void move(int direction, int lenth, int speed);
unsigned int vl(char xv);
void handle_color();
void get_out();

void beep(int num) {
     d76:	0f 93       	push	r16
     d78:	1f 93       	push	r17
     d7a:	cf 93       	push	r28
     d7c:	df 93       	push	r29
     d7e:	8c 01       	movw	r16, r24
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:8
  for (int i = 0; i < num; i++) {
     d80:	d0 e0       	ldi	r29, 0x00	; 0
     d82:	c0 e0       	ldi	r28, 0x00	; 0
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:9
    buz_on;
     d84:	61 e0       	ldi	r22, 0x01	; 1
     d86:	83 e2       	ldi	r24, 0x23	; 35
     d88:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <digitalWrite>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:10
    delay(50);
     d8c:	62 e3       	ldi	r22, 0x32	; 50
     d8e:	70 e0       	ldi	r23, 0x00	; 0
     d90:	80 e0       	ldi	r24, 0x00	; 0
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	0e 94 aa 02 	call	0x554	; 0x554 <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:11
    buz_off;
     d98:	60 e0       	ldi	r22, 0x00	; 0
     d9a:	83 e2       	ldi	r24, 0x23	; 35
     d9c:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <digitalWrite>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:12
    delay(50);
     da0:	62 e3       	ldi	r22, 0x32	; 50
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	80 e0       	ldi	r24, 0x00	; 0
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	0e 94 aa 02 	call	0x554	; 0x554 <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:8
unsigned int vl(char xv);
void handle_color();
void get_out();

void beep(int num) {
  for (int i = 0; i < num; i++) {
     dac:	21 96       	adiw	r28, 0x01	; 1
     dae:	0c 17       	cp	r16, r28
     db0:	1d 07       	cpc	r17, r29
     db2:	41 f7       	brne	.-48     	; 0xd84 <beep(int)+0xe>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:14
    buz_on;
    delay(50);
    buz_off;
    delay(50);
  }
}
     db4:	df 91       	pop	r29
     db6:	cf 91       	pop	r28
     db8:	1f 91       	pop	r17
     dba:	0f 91       	pop	r16
     dbc:	08 95       	ret

00000dbe <Print::printf(char const*, ...) [clone .constprop.22]>:
printf():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:208
{
  ((class Print *)(fdev_get_udata(fp)))->write((uint8_t)c);
  return 0;
}

int16_t Print::printf(const char *format, ...)
     dbe:	cf 93       	push	r28
     dc0:	df 93       	push	r29
     dc2:	cd b7       	in	r28, 0x3d	; 61
     dc4:	de b7       	in	r29, 0x3e	; 62
     dc6:	2e 97       	sbiw	r28, 0x0e	; 14
     dc8:	0f b6       	in	r0, 0x3f	; 63
     dca:	f8 94       	cli
     dcc:	de bf       	out	0x3e, r29	; 62
     dce:	0f be       	out	0x3f, r0	; 63
     dd0:	cd bf       	out	0x3d, r28	; 61
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:213
{
  FILE f;
  va_list ap;

  fdev_setup_stream(&f, printf_putchar, NULL, _FDEV_SETUP_WRITE);
     dd2:	8b ed       	ldi	r24, 0xDB	; 219
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	9a 87       	std	Y+10, r25	; 0x0a
     dd8:	89 87       	std	Y+9, r24	; 0x09
     dda:	1c 86       	std	Y+12, r1	; 0x0c
     ddc:	1b 86       	std	Y+11, r1	; 0x0b
     dde:	82 e0       	ldi	r24, 0x02	; 2
     de0:	8c 83       	std	Y+4, r24	; 0x04
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:214
  fdev_set_udata(&f, this);
     de2:	84 e7       	ldi	r24, 0x74	; 116
     de4:	9a e0       	ldi	r25, 0x0A	; 10
     de6:	9e 87       	std	Y+14, r25	; 0x0e
     de8:	8d 87       	std	Y+13, r24	; 0x0d
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:216
  va_start(ap, format);
  return vfprintf(&f, format, ap);
     dea:	ae 01       	movw	r20, r28
     dec:	49 5e       	subi	r20, 0xE9	; 233
     dee:	5f 4f       	sbci	r21, 0xFF	; 255
     df0:	6d 89       	ldd	r22, Y+21	; 0x15
     df2:	7e 89       	ldd	r23, Y+22	; 0x16
     df4:	ce 01       	movw	r24, r28
     df6:	01 96       	adiw	r24, 0x01	; 1
     df8:	0e 94 f3 28 	call	0x51e6	; 0x51e6 <vfprintf>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:217
}
     dfc:	2e 96       	adiw	r28, 0x0e	; 14
     dfe:	0f b6       	in	r0, 0x3f	; 63
     e00:	f8 94       	cli
     e02:	de bf       	out	0x3e, r29	; 62
     e04:	0f be       	out	0x3f, r0	; 63
     e06:	cd bf       	out	0x3d, r28	; 61
     e08:	df 91       	pop	r29
     e0a:	cf 91       	pop	r28
     e0c:	08 95       	ret

00000e0e <Print::print(char const*) [clone .constprop.3]>:
write():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.h:54
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
     e0e:	fc 01       	movw	r30, r24
     e10:	01 90       	ld	r0, Z+
     e12:	00 20       	and	r0, r0
     e14:	e9 f7       	brne	.-6      	; 0xe10 <Print::print(char const*) [clone .constprop.3]+0x2>
     e16:	31 97       	sbiw	r30, 0x01	; 1
     e18:	af 01       	movw	r20, r30
     e1a:	48 1b       	sub	r20, r24
     e1c:	59 0b       	sbc	r21, r25
     e1e:	bc 01       	movw	r22, r24
     e20:	84 e7       	ldi	r24, 0x74	; 116
     e22:	9a e0       	ldi	r25, 0x0A	; 10
     e24:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <Print::write(unsigned char const*, unsigned int)>

00000e28 <EEPROM_write_int(int, int)>:
EEPROM_write_int():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:188
    analogWrite(5, -right);
  }
}


void EEPROM_write_int(int address, int number) {
     e28:	1f 93       	push	r17
     e2a:	cf 93       	push	r28
     e2c:	df 93       	push	r29
     e2e:	ec 01       	movw	r28, r24
     e30:	16 2f       	mov	r17, r22
     e32:	67 2f       	mov	r22, r23
operator=():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\EEPROM\src/EEPROM.h:47
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator uint8_t() const             { return **this; }

    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
     e34:	0e 94 a2 2b 	call	0x5744	; 0x5744 <eeprom_write_byte>
     e38:	61 2f       	mov	r22, r17
     e3a:	ce 01       	movw	r24, r28
     e3c:	01 96       	adiw	r24, 0x01	; 1
EEPROM_write_int():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:191
  EEPROM.write(address, number >> 8);
  EEPROM.write(address + 1, number & 0xFF);
}
     e3e:	df 91       	pop	r29
     e40:	cf 91       	pop	r28
     e42:	1f 91       	pop	r17
operator=():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\EEPROM\src/EEPROM.h:47
     e44:	0c 94 a2 2b 	jmp	0x5744	; 0x5744 <eeprom_write_byte>

00000e48 <__vector_16>:
__vector_16():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     e48:	1f 92       	push	r1
     e4a:	0f 92       	push	r0
     e4c:	0f b6       	in	r0, 0x3f	; 63
     e4e:	0f 92       	push	r0
     e50:	11 24       	eor	r1, r1
     e52:	4f 93       	push	r20
     e54:	5f 93       	push	r21
     e56:	6f 93       	push	r22
     e58:	7f 93       	push	r23
     e5a:	8f 93       	push	r24
     e5c:	9f 93       	push	r25
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
     e5e:	40 91 8b 08 	lds	r20, 0x088B	; 0x80088b <timer0_millis>
     e62:	50 91 8c 08 	lds	r21, 0x088C	; 0x80088c <timer0_millis+0x1>
     e66:	60 91 8d 08 	lds	r22, 0x088D	; 0x80088d <timer0_millis+0x2>
     e6a:	70 91 8e 08 	lds	r23, 0x088E	; 0x80088e <timer0_millis+0x3>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
     e6e:	80 91 8a 08 	lds	r24, 0x088A	; 0x80088a <timer0_fract>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:174

  f += FRACT_INC FRACT_INC_PLUS;

#ifdef CORRECT_EXACT_MILLIS
  // correct millis () to be exact for certain clocks
  if (timer0_exact == CORRECT_ROLL - 1) {
     e72:	90 91 89 08 	lds	r25, 0x0889	; 0x800889 <timer0_exact.2342>
     e76:	9a 31       	cpi	r25, 0x1A	; 26
     e78:	19 f5       	brne	.+70     	; 0xec0 <__vector_16+0x78>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:175
    timer0_exact = 0;
     e7a:	10 92 89 08 	sts	0x0889, r1	; 0x800889 <timer0_exact.2342>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:194
  if (timer0_exact & 1) {
    ++f;
  }
#endif
#ifdef CORRECT_BRUTE
  if (timer0_exact < CORRECT_BRUTE) {
     e7e:	90 91 89 08 	lds	r25, 0x0889	; 0x800889 <timer0_exact.2342>
     e82:	95 30       	cpi	r25, 0x05	; 5
     e84:	08 f1       	brcs	.+66     	; 0xec8 <__vector_16+0x80>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:170
  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
  unsigned char f = timer0_fract;

  f += FRACT_INC FRACT_INC_PLUS;
     e86:	84 5c       	subi	r24, 0xC4	; 196
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
     e88:	8d 37       	cpi	r24, 0x7D	; 125
     e8a:	00 f1       	brcs	.+64     	; 0xecc <__vector_16+0x84>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
     e8c:	8d 57       	subi	r24, 0x7D	; 125
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
     e8e:	4e 5f       	subi	r20, 0xFE	; 254
     e90:	5f 4f       	sbci	r21, 0xFF	; 255
     e92:	6f 4f       	sbci	r22, 0xFF	; 255
     e94:	7f 4f       	sbci	r23, 0xFF	; 255
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
     e96:	80 93 8a 08 	sts	0x088A, r24	; 0x80088a <timer0_fract>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
     e9a:	40 93 8b 08 	sts	0x088B, r20	; 0x80088b <timer0_millis>
     e9e:	50 93 8c 08 	sts	0x088C, r21	; 0x80088c <timer0_millis+0x1>
     ea2:	60 93 8d 08 	sts	0x088D, r22	; 0x80088d <timer0_millis+0x2>
     ea6:	70 93 8e 08 	sts	0x088E, r23	; 0x80088e <timer0_millis+0x3>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:213
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
#endif
}
     eaa:	9f 91       	pop	r25
     eac:	8f 91       	pop	r24
     eae:	7f 91       	pop	r23
     eb0:	6f 91       	pop	r22
     eb2:	5f 91       	pop	r21
     eb4:	4f 91       	pop	r20
     eb6:	0f 90       	pop	r0
     eb8:	0f be       	out	0x3f, r0	; 63
     eba:	0f 90       	pop	r0
     ebc:	1f 90       	pop	r1
     ebe:	18 95       	reti
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:181
#ifdef CORRECT_LO
    ++f;
#endif
  }
  else {
    ++timer0_exact;
     ec0:	9f 5f       	subi	r25, 0xFF	; 255
     ec2:	90 93 89 08 	sts	0x0889, r25	; 0x800889 <timer0_exact.2342>
     ec6:	db cf       	rjmp	.-74     	; 0xe7e <__vector_16+0x36>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:195
    ++f;
  }
#endif
#ifdef CORRECT_BRUTE
  if (timer0_exact < CORRECT_BRUTE) {
    ++f;
     ec8:	83 5c       	subi	r24, 0xC3	; 195
     eca:	de cf       	rjmp	.-68     	; 0xe88 <__vector_16+0x40>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
     ecc:	4f 5f       	subi	r20, 0xFF	; 255
     ece:	5f 4f       	sbci	r21, 0xFF	; 255
     ed0:	6f 4f       	sbci	r22, 0xFF	; 255
     ed2:	7f 4f       	sbci	r23, 0xFF	; 255
     ed4:	e0 cf       	rjmp	.-64     	; 0xe96 <__vector_16+0x4e>

00000ed6 <__vector_31>:
__vector_31():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial1.cpp:59
#elif defined(USART1_UDRE_vect)
ISR(USART1_UDRE_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
     ed6:	1f 92       	push	r1
     ed8:	0f 92       	push	r0
     eda:	0f b6       	in	r0, 0x3f	; 63
     edc:	0f 92       	push	r0
     ede:	11 24       	eor	r1, r1
     ee0:	0b b6       	in	r0, 0x3b	; 59
     ee2:	0f 92       	push	r0
     ee4:	2f 93       	push	r18
     ee6:	3f 93       	push	r19
     ee8:	4f 93       	push	r20
     eea:	5f 93       	push	r21
     eec:	6f 93       	push	r22
     eee:	7f 93       	push	r23
     ef0:	8f 93       	push	r24
     ef2:	9f 93       	push	r25
     ef4:	af 93       	push	r26
     ef6:	bf 93       	push	r27
     ef8:	ef 93       	push	r30
     efa:	ff 93       	push	r31
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial1.cpp:60
  Serial1._tx_udr_empty_irq();
     efc:	8e e2       	ldi	r24, 0x2E	; 46
     efe:	99 e0       	ldi	r25, 0x09	; 9
     f00:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial1.cpp:61
}
     f04:	ff 91       	pop	r31
     f06:	ef 91       	pop	r30
     f08:	bf 91       	pop	r27
     f0a:	af 91       	pop	r26
     f0c:	9f 91       	pop	r25
     f0e:	8f 91       	pop	r24
     f10:	7f 91       	pop	r23
     f12:	6f 91       	pop	r22
     f14:	5f 91       	pop	r21
     f16:	4f 91       	pop	r20
     f18:	3f 91       	pop	r19
     f1a:	2f 91       	pop	r18
     f1c:	0f 90       	pop	r0
     f1e:	0b be       	out	0x3b, r0	; 59
     f20:	0f 90       	pop	r0
     f22:	0f be       	out	0x3f, r0	; 63
     f24:	0f 90       	pop	r0
     f26:	1f 90       	pop	r1
     f28:	18 95       	reti

00000f2a <__vector_30>:
__vector_30():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial1.cpp:48
#elif defined(USART1_RXC_vect)
ISR(USART1_RXC_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
     f2a:	1f 92       	push	r1
     f2c:	0f 92       	push	r0
     f2e:	0f b6       	in	r0, 0x3f	; 63
     f30:	0f 92       	push	r0
     f32:	11 24       	eor	r1, r1
     f34:	0b b6       	in	r0, 0x3b	; 59
     f36:	0f 92       	push	r0
     f38:	2f 93       	push	r18
     f3a:	8f 93       	push	r24
     f3c:	9f 93       	push	r25
     f3e:	ef 93       	push	r30
     f40:	ff 93       	push	r31
_rx_complete_irq():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     f42:	e0 91 3e 09 	lds	r30, 0x093E	; 0x80093e <Serial1+0x10>
     f46:	f0 91 3f 09 	lds	r31, 0x093F	; 0x80093f <Serial1+0x11>
     f4a:	80 81       	ld	r24, Z
     f4c:	e0 91 44 09 	lds	r30, 0x0944	; 0x800944 <Serial1+0x16>
     f50:	f0 91 45 09 	lds	r31, 0x0945	; 0x800945 <Serial1+0x17>
     f54:	82 fd       	sbrc	r24, 2
     f56:	1d c0       	rjmp	.+58     	; 0xf92 <__vector_30+0x68>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     f58:	90 81       	ld	r25, Z
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     f5a:	80 91 47 09 	lds	r24, 0x0947	; 0x800947 <Serial1+0x19>
     f5e:	8f 5f       	subi	r24, 0xFF	; 255
     f60:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     f62:	20 91 48 09 	lds	r18, 0x0948	; 0x800948 <Serial1+0x1a>
     f66:	82 17       	cp	r24, r18
     f68:	41 f0       	breq	.+16     	; 0xf7a <__vector_30+0x50>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
     f6a:	e0 91 47 09 	lds	r30, 0x0947	; 0x800947 <Serial1+0x19>
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	e2 5d       	subi	r30, 0xD2	; 210
     f72:	f6 4f       	sbci	r31, 0xF6	; 246
     f74:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
     f76:	80 93 47 09 	sts	0x0947, r24	; 0x800947 <Serial1+0x19>
__vector_30():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial1.cpp:50
  Serial1._rx_complete_irq();
}
     f7a:	ff 91       	pop	r31
     f7c:	ef 91       	pop	r30
     f7e:	9f 91       	pop	r25
     f80:	8f 91       	pop	r24
     f82:	2f 91       	pop	r18
     f84:	0f 90       	pop	r0
     f86:	0b be       	out	0x3b, r0	; 59
     f88:	0f 90       	pop	r0
     f8a:	0f be       	out	0x3f, r0	; 63
     f8c:	0f 90       	pop	r0
     f8e:	1f 90       	pop	r1
     f90:	18 95       	reti
_rx_complete_irq():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     f92:	80 81       	ld	r24, Z
     f94:	f2 cf       	rjmp	.-28     	; 0xf7a <__vector_30+0x50>

00000f96 <__vector_19>:
__vector_19():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     f96:	1f 92       	push	r1
     f98:	0f 92       	push	r0
     f9a:	0f b6       	in	r0, 0x3f	; 63
     f9c:	0f 92       	push	r0
     f9e:	11 24       	eor	r1, r1
     fa0:	0b b6       	in	r0, 0x3b	; 59
     fa2:	0f 92       	push	r0
     fa4:	2f 93       	push	r18
     fa6:	3f 93       	push	r19
     fa8:	4f 93       	push	r20
     faa:	5f 93       	push	r21
     fac:	6f 93       	push	r22
     fae:	7f 93       	push	r23
     fb0:	8f 93       	push	r24
     fb2:	9f 93       	push	r25
     fb4:	af 93       	push	r26
     fb6:	bf 93       	push	r27
     fb8:	ef 93       	push	r30
     fba:	ff 93       	push	r31
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
     fbc:	8b ec       	ldi	r24, 0xCB	; 203
     fbe:	99 e0       	ldi	r25, 0x09	; 9
     fc0:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:65
}
     fc4:	ff 91       	pop	r31
     fc6:	ef 91       	pop	r30
     fc8:	bf 91       	pop	r27
     fca:	af 91       	pop	r26
     fcc:	9f 91       	pop	r25
     fce:	8f 91       	pop	r24
     fd0:	7f 91       	pop	r23
     fd2:	6f 91       	pop	r22
     fd4:	5f 91       	pop	r21
     fd6:	4f 91       	pop	r20
     fd8:	3f 91       	pop	r19
     fda:	2f 91       	pop	r18
     fdc:	0f 90       	pop	r0
     fde:	0b be       	out	0x3b, r0	; 59
     fe0:	0f 90       	pop	r0
     fe2:	0f be       	out	0x3f, r0	; 63
     fe4:	0f 90       	pop	r0
     fe6:	1f 90       	pop	r1
     fe8:	18 95       	reti

00000fea <__vector_18>:
__vector_18():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RX_vect)
  ISR(USART_RX_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     fea:	1f 92       	push	r1
     fec:	0f 92       	push	r0
     fee:	0f b6       	in	r0, 0x3f	; 63
     ff0:	0f 92       	push	r0
     ff2:	11 24       	eor	r1, r1
     ff4:	0b b6       	in	r0, 0x3b	; 59
     ff6:	0f 92       	push	r0
     ff8:	2f 93       	push	r18
     ffa:	8f 93       	push	r24
     ffc:	9f 93       	push	r25
     ffe:	ef 93       	push	r30
    1000:	ff 93       	push	r31
_rx_complete_irq():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1002:	e0 91 db 09 	lds	r30, 0x09DB	; 0x8009db <Serial+0x10>
    1006:	f0 91 dc 09 	lds	r31, 0x09DC	; 0x8009dc <Serial+0x11>
    100a:	80 81       	ld	r24, Z
    100c:	e0 91 e1 09 	lds	r30, 0x09E1	; 0x8009e1 <Serial+0x16>
    1010:	f0 91 e2 09 	lds	r31, 0x09E2	; 0x8009e2 <Serial+0x17>
    1014:	82 fd       	sbrc	r24, 2
    1016:	1d c0       	rjmp	.+58     	; 0x1052 <__vector_18+0x68>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1018:	90 81       	ld	r25, Z
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    101a:	80 91 e4 09 	lds	r24, 0x09E4	; 0x8009e4 <Serial+0x19>
    101e:	8f 5f       	subi	r24, 0xFF	; 255
    1020:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1022:	20 91 e5 09 	lds	r18, 0x09E5	; 0x8009e5 <Serial+0x1a>
    1026:	82 17       	cp	r24, r18
    1028:	41 f0       	breq	.+16     	; 0x103a <__vector_18+0x50>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
    102a:	e0 91 e4 09 	lds	r30, 0x09E4	; 0x8009e4 <Serial+0x19>
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	e5 53       	subi	r30, 0x35	; 53
    1032:	f6 4f       	sbci	r31, 0xF6	; 246
    1034:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
    1036:	80 93 e4 09 	sts	0x09E4, r24	; 0x8009e4 <Serial+0x19>
__vector_18():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
    103a:	ff 91       	pop	r31
    103c:	ef 91       	pop	r30
    103e:	9f 91       	pop	r25
    1040:	8f 91       	pop	r24
    1042:	2f 91       	pop	r18
    1044:	0f 90       	pop	r0
    1046:	0b be       	out	0x3b, r0	; 59
    1048:	0f 90       	pop	r0
    104a:	0f be       	out	0x3f, r0	; 63
    104c:	0f 90       	pop	r0
    104e:	1f 90       	pop	r1
    1050:	18 95       	reti
_rx_complete_irq():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1052:	80 81       	ld	r24, Z
    1054:	f2 cf       	rjmp	.-28     	; 0x103a <__vector_18+0x50>

00001056 <__vector_33>:
__vector_33():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:528
  }
  return(flag);
}

ISR(TWI_vect)
{
    1056:	1f 92       	push	r1
    1058:	0f 92       	push	r0
    105a:	0f b6       	in	r0, 0x3f	; 63
    105c:	0f 92       	push	r0
    105e:	11 24       	eor	r1, r1
    1060:	0b b6       	in	r0, 0x3b	; 59
    1062:	0f 92       	push	r0
    1064:	2f 93       	push	r18
    1066:	3f 93       	push	r19
    1068:	4f 93       	push	r20
    106a:	5f 93       	push	r21
    106c:	6f 93       	push	r22
    106e:	7f 93       	push	r23
    1070:	8f 93       	push	r24
    1072:	9f 93       	push	r25
    1074:	af 93       	push	r26
    1076:	bf 93       	push	r27
    1078:	ef 93       	push	r30
    107a:	ff 93       	push	r31
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:529
  switch(TW_STATUS){
    107c:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    1080:	88 7f       	andi	r24, 0xF8	; 248
    1082:	80 36       	cpi	r24, 0x60	; 96
    1084:	09 f4       	brne	.+2      	; 0x1088 <__vector_33+0x32>
    1086:	4d c0       	rjmp	.+154    	; 0x1122 <__stack+0x23>
    1088:	08 f0       	brcs	.+2      	; 0x108c <__vector_33+0x36>
    108a:	40 c0       	rjmp	.+128    	; 0x110c <__stack+0xd>
    108c:	88 32       	cpi	r24, 0x28	; 40
    108e:	09 f4       	brne	.+2      	; 0x1092 <__vector_33+0x3c>
    1090:	a9 c0       	rjmp	.+338    	; 0x11e4 <__stack+0xe5>
    1092:	28 f5       	brcc	.+74     	; 0x10de <__vector_33+0x88>
    1094:	80 31       	cpi	r24, 0x10	; 16
    1096:	09 f4       	brne	.+2      	; 0x109a <__vector_33+0x44>
    1098:	9d c0       	rjmp	.+314    	; 0x11d4 <__stack+0xd5>
    109a:	c8 f4       	brcc	.+50     	; 0x10ce <__vector_33+0x78>
    109c:	88 23       	and	r24, r24
    109e:	09 f4       	brne	.+2      	; 0x10a2 <__vector_33+0x4c>
    10a0:	07 c1       	rjmp	.+526    	; 0x12b0 <__stack+0x1b1>
    10a2:	88 30       	cpi	r24, 0x08	; 8
    10a4:	09 f4       	brne	.+2      	; 0x10a8 <__vector_33+0x52>
    10a6:	96 c0       	rjmp	.+300    	; 0x11d4 <__stack+0xd5>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:690
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    10a8:	ff 91       	pop	r31
    10aa:	ef 91       	pop	r30
    10ac:	bf 91       	pop	r27
    10ae:	af 91       	pop	r26
    10b0:	9f 91       	pop	r25
    10b2:	8f 91       	pop	r24
    10b4:	7f 91       	pop	r23
    10b6:	6f 91       	pop	r22
    10b8:	5f 91       	pop	r21
    10ba:	4f 91       	pop	r20
    10bc:	3f 91       	pop	r19
    10be:	2f 91       	pop	r18
    10c0:	0f 90       	pop	r0
    10c2:	0b be       	out	0x3b, r0	; 59
    10c4:	0f 90       	pop	r0
    10c6:	0f be       	out	0x3f, r0	; 63
    10c8:	0f 90       	pop	r0
    10ca:	1f 90       	pop	r1
    10cc:	18 95       	reti
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:529
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    10ce:	88 31       	cpi	r24, 0x18	; 24
    10d0:	09 f4       	brne	.+2      	; 0x10d4 <__vector_33+0x7e>
    10d2:	88 c0       	rjmp	.+272    	; 0x11e4 <__stack+0xe5>
    10d4:	80 32       	cpi	r24, 0x20	; 32
    10d6:	41 f7       	brne	.-48     	; 0x10a8 <__vector_33+0x52>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:564
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    10d8:	80 93 95 08 	sts	0x0895, r24	; 0x800895 <twi_error>
    10dc:	14 c0       	rjmp	.+40     	; 0x1106 <__stack+0x7>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:529
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    10de:	80 34       	cpi	r24, 0x40	; 64
    10e0:	09 f4       	brne	.+2      	; 0x10e4 <__vector_33+0x8e>
    10e2:	a5 c0       	rjmp	.+330    	; 0x122e <__stack+0x12f>
    10e4:	40 f4       	brcc	.+16     	; 0x10f6 <__vector_33+0xa0>
    10e6:	80 33       	cpi	r24, 0x30	; 48
    10e8:	b9 f3       	breq	.-18     	; 0x10d8 <__vector_33+0x82>
    10ea:	88 33       	cpi	r24, 0x38	; 56
    10ec:	e9 f6       	brne	.-70     	; 0x10a8 <__vector_33+0x52>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:568
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    10ee:	80 93 95 08 	sts	0x0895, r24	; 0x800895 <twi_error>
twi_reply():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:415
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    10f2:	85 ec       	ldi	r24, 0xC5	; 197
    10f4:	bc c0       	rjmp	.+376    	; 0x126e <__stack+0x16f>
__vector_33():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:529
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    10f6:	80 35       	cpi	r24, 0x50	; 80
    10f8:	09 f4       	brne	.+2      	; 0x10fc <__vector_33+0xa6>
    10fa:	89 c0       	rjmp	.+274    	; 0x120e <__stack+0x10f>
    10fc:	88 35       	cpi	r24, 0x58	; 88
    10fe:	09 f4       	brne	.+2      	; 0x1102 <__stack+0x3>
    1100:	9e c0       	rjmp	.+316    	; 0x123e <__stack+0x13f>
    1102:	88 34       	cpi	r24, 0x48	; 72
    1104:	89 f6       	brne	.-94     	; 0x10a8 <__vector_33+0x52>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:687
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
    1106:	0e 94 fe 03 	call	0x7fc	; 0x7fc <twi_stop>
    110a:	ce cf       	rjmp	.-100    	; 0x10a8 <__vector_33+0x52>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:529
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    110c:	88 39       	cpi	r24, 0x98	; 152
    110e:	09 f4       	brne	.+2      	; 0x1112 <__stack+0x13>
    1110:	94 c0       	rjmp	.+296    	; 0x123a <__stack+0x13b>
    1112:	38 f5       	brcc	.+78     	; 0x1162 <__stack+0x63>
    1114:	88 37       	cpi	r24, 0x78	; 120
    1116:	29 f0       	breq	.+10     	; 0x1122 <__stack+0x23>
    1118:	50 f4       	brcc	.+20     	; 0x112e <__stack+0x2f>
    111a:	88 36       	cpi	r24, 0x68	; 104
    111c:	11 f0       	breq	.+4      	; 0x1122 <__stack+0x23>
    111e:	80 37       	cpi	r24, 0x70	; 112
    1120:	19 f6       	brne	.-122    	; 0x10a8 <__vector_33+0x52>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:610
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    1122:	83 e0       	ldi	r24, 0x03	; 3
    1124:	80 93 97 08 	sts	0x0897, r24	; 0x800897 <twi_state>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:612
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    1128:	10 92 64 08 	sts	0x0864, r1	; 0x800864 <twi_rxBufferIndex>
    112c:	57 c0       	rjmp	.+174    	; 0x11dc <__stack+0xdd>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:529
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    112e:	88 38       	cpi	r24, 0x88	; 136
    1130:	09 f4       	brne	.+2      	; 0x1134 <__stack+0x35>
    1132:	83 c0       	rjmp	.+262    	; 0x123a <__stack+0x13b>
    1134:	80 39       	cpi	r24, 0x90	; 144
    1136:	19 f0       	breq	.+6      	; 0x113e <__stack+0x3f>
    1138:	80 38       	cpi	r24, 0x80	; 128
    113a:	09 f0       	breq	.+2      	; 0x113e <__stack+0x3f>
    113c:	b5 cf       	rjmp	.-150    	; 0x10a8 <__vector_33+0x52>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:618
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    113e:	80 91 64 08 	lds	r24, 0x0864	; 0x800864 <twi_rxBufferIndex>
    1142:	80 32       	cpi	r24, 0x20	; 32
    1144:	08 f0       	brcs	.+2      	; 0x1148 <__stack+0x49>
    1146:	79 c0       	rjmp	.+242    	; 0x123a <__stack+0x13b>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:620
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    1148:	e0 91 64 08 	lds	r30, 0x0864	; 0x800864 <twi_rxBufferIndex>
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	8e 0f       	add	r24, r30
    1150:	80 93 64 08 	sts	0x0864, r24	; 0x800864 <twi_rxBufferIndex>
    1154:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	ec 5b       	subi	r30, 0xBC	; 188
    115c:	f7 4f       	sbci	r31, 0xF7	; 247
    115e:	80 83       	st	Z, r24
    1160:	3d c0       	rjmp	.+122    	; 0x11dc <__stack+0xdd>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:529
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1162:	80 3b       	cpi	r24, 0xB0	; 176
    1164:	39 f0       	breq	.+14     	; 0x1174 <__stack+0x75>
    1166:	e0 f4       	brcc	.+56     	; 0x11a0 <__stack+0xa1>
    1168:	80 3a       	cpi	r24, 0xA0	; 160
    116a:	09 f4       	brne	.+2      	; 0x116e <__stack+0x6f>
    116c:	85 c0       	rjmp	.+266    	; 0x1278 <__stack+0x179>
    116e:	88 3a       	cpi	r24, 0xA8	; 168
    1170:	09 f0       	breq	.+2      	; 0x1174 <__stack+0x75>
    1172:	9a cf       	rjmp	.-204    	; 0x10a8 <__vector_33+0x52>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:649

    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    1174:	84 e0       	ldi	r24, 0x04	; 4
    1176:	80 93 97 08 	sts	0x0897, r24	; 0x800897 <twi_state>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:651
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    117a:	10 92 43 08 	sts	0x0843, r1	; 0x800843 <twi_txBufferIndex>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:653
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    117e:	10 92 42 08 	sts	0x0842, r1	; 0x800842 <twi_txBufferLength>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:656
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    1182:	e0 91 67 08 	lds	r30, 0x0867	; 0x800867 <twi_onSlaveTransmit>
    1186:	f0 91 68 08 	lds	r31, 0x0868	; 0x800868 <twi_onSlaveTransmit+0x1>
    118a:	09 95       	icall
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:658
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    118c:	80 91 42 08 	lds	r24, 0x0842	; 0x800842 <twi_txBufferLength>
    1190:	81 11       	cpse	r24, r1
    1192:	0f c0       	rjmp	.+30     	; 0x11b2 <__stack+0xb3>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:659
        twi_txBufferLength = 1;
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	80 93 42 08 	sts	0x0842, r24	; 0x800842 <twi_txBufferLength>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:660
        twi_txBuffer[0] = 0x00;
    119a:	10 92 22 08 	sts	0x0822, r1	; 0x800822 <twi_txBuffer>
    119e:	09 c0       	rjmp	.+18     	; 0x11b2 <__stack+0xb3>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:529
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    11a0:	80 3c       	cpi	r24, 0xC0	; 192
    11a2:	09 f4       	brne	.+2      	; 0x11a6 <__stack+0xa7>
    11a4:	a6 cf       	rjmp	.-180    	; 0x10f2 <__vector_33+0x9c>
    11a6:	88 3c       	cpi	r24, 0xC8	; 200
    11a8:	09 f4       	brne	.+2      	; 0x11ac <__stack+0xad>
    11aa:	a3 cf       	rjmp	.-186    	; 0x10f2 <__vector_33+0x9c>
    11ac:	88 3b       	cpi	r24, 0xB8	; 184
    11ae:	09 f0       	breq	.+2      	; 0x11b2 <__stack+0xb3>
    11b0:	7b cf       	rjmp	.-266    	; 0x10a8 <__vector_33+0x52>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:666
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    11b2:	e0 91 43 08 	lds	r30, 0x0843	; 0x800843 <twi_txBufferIndex>
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	8e 0f       	add	r24, r30
    11ba:	80 93 43 08 	sts	0x0843, r24	; 0x800843 <twi_txBufferIndex>
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	ee 5d       	subi	r30, 0xDE	; 222
    11c2:	f7 4f       	sbci	r31, 0xF7	; 247
    11c4:	80 81       	ld	r24, Z
    11c6:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:668
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    11ca:	90 91 43 08 	lds	r25, 0x0843	; 0x800843 <twi_txBufferIndex>
    11ce:	80 91 42 08 	lds	r24, 0x0842	; 0x800842 <twi_txBufferLength>
    11d2:	31 c0       	rjmp	.+98     	; 0x1236 <__stack+0x137>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:534
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    11d4:	80 91 90 08 	lds	r24, 0x0890	; 0x800890 <twi_slarw>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:544
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    11d8:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
twi_reply():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:415
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    11dc:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:417
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    11de:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    11e2:	62 cf       	rjmp	.-316    	; 0x10a8 <__vector_33+0x52>
__vector_33():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:542

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
    11e4:	90 91 92 08 	lds	r25, 0x0892	; 0x800892 <twi_masterBufferIndex>
    11e8:	80 91 91 08 	lds	r24, 0x0891	; 0x800891 <twi_masterBufferLength>
    11ec:	98 17       	cp	r25, r24
    11ee:	b8 f5       	brcc	.+110    	; 0x125e <__stack+0x15f>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:544
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    11f0:	80 91 93 08 	lds	r24, 0x0893	; 0x800893 <twi_masterBuffer>
    11f4:	90 91 94 08 	lds	r25, 0x0894	; 0x800894 <twi_masterBuffer+0x1>
    11f8:	e0 91 92 08 	lds	r30, 0x0892	; 0x800892 <twi_masterBufferIndex>
    11fc:	21 e0       	ldi	r18, 0x01	; 1
    11fe:	2e 0f       	add	r18, r30
    1200:	20 93 92 08 	sts	0x0892, r18	; 0x800892 <twi_masterBufferIndex>
    1204:	e8 0f       	add	r30, r24
    1206:	f9 2f       	mov	r31, r25
    1208:	f1 1d       	adc	r31, r1
    120a:	80 81       	ld	r24, Z
    120c:	e5 cf       	rjmp	.-54     	; 0x11d8 <__stack+0xd9>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:575
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    120e:	20 91 93 08 	lds	r18, 0x0893	; 0x800893 <twi_masterBuffer>
    1212:	30 91 94 08 	lds	r19, 0x0894	; 0x800894 <twi_masterBuffer+0x1>
    1216:	e0 91 92 08 	lds	r30, 0x0892	; 0x800892 <twi_masterBufferIndex>
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	8e 0f       	add	r24, r30
    121e:	80 93 92 08 	sts	0x0892, r24	; 0x800892 <twi_masterBufferIndex>
    1222:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    1226:	e2 0f       	add	r30, r18
    1228:	f3 2f       	mov	r31, r19
    122a:	f1 1d       	adc	r31, r1
    122c:	80 83       	st	Z, r24
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:579
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    122e:	90 91 92 08 	lds	r25, 0x0892	; 0x800892 <twi_masterBufferIndex>
    1232:	80 91 91 08 	lds	r24, 0x0891	; 0x800891 <twi_masterBufferLength>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:668
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    1236:	98 17       	cp	r25, r24
    1238:	88 f2       	brcs	.-94     	; 0x11dc <__stack+0xdd>
twi_reply():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:417
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    123a:	85 e8       	ldi	r24, 0x85	; 133
    123c:	d0 cf       	rjmp	.-96     	; 0x11de <__stack+0xdf>
__vector_33():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:587
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    123e:	20 91 93 08 	lds	r18, 0x0893	; 0x800893 <twi_masterBuffer>
    1242:	30 91 94 08 	lds	r19, 0x0894	; 0x800894 <twi_masterBuffer+0x1>
    1246:	e0 91 92 08 	lds	r30, 0x0892	; 0x800892 <twi_masterBufferIndex>
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	8e 0f       	add	r24, r30
    124e:	80 93 92 08 	sts	0x0892, r24	; 0x800892 <twi_masterBufferIndex>
    1252:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    1256:	e2 0f       	add	r30, r18
    1258:	f3 2f       	mov	r31, r19
    125a:	f1 1d       	adc	r31, r1
    125c:	80 83       	st	Z, r24
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:588
  if (twi_sendStop)
    125e:	80 91 96 08 	lds	r24, 0x0896	; 0x800896 <twi_sendStop>
    1262:	81 11       	cpse	r24, r1
    1264:	50 cf       	rjmp	.-352    	; 0x1106 <__stack+0x7>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:591
          twi_stop();
  else {
    twi_inRepStart = true;  // we're going to send the START
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	80 93 8f 08 	sts	0x088F, r24	; 0x80088f <twi_inRepStart>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:595
    // don't enable the interrupt. We'll generate the start, but we
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    126c:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:415
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    126e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
__vector_33():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:679
    case TW_ST_DATA_NACK: // received nack, we are done
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    1272:	10 92 97 08 	sts	0x0897, r1	; 0x800897 <twi_state>
    1276:	18 cf       	rjmp	.-464    	; 0x10a8 <__vector_33+0x52>
twi_releaseBus():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:468
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    1278:	85 ec       	ldi	r24, 0xC5	; 197
    127a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:471

  // update twi state
  twi_state = TWI_READY;
    127e:	10 92 97 08 	sts	0x0897, r1	; 0x800897 <twi_state>
__vector_33():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:631
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    1282:	80 91 64 08 	lds	r24, 0x0864	; 0x800864 <twi_rxBufferIndex>
    1286:	80 32       	cpi	r24, 0x20	; 32
    1288:	30 f4       	brcc	.+12     	; 0x1296 <__stack+0x197>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:632
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    128a:	e0 91 64 08 	lds	r30, 0x0864	; 0x800864 <twi_rxBufferIndex>
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	ec 5b       	subi	r30, 0xBC	; 188
    1292:	f7 4f       	sbci	r31, 0xF7	; 247
    1294:	10 82       	st	Z, r1
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:635
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    1296:	60 91 64 08 	lds	r22, 0x0864	; 0x800864 <twi_rxBufferIndex>
    129a:	70 e0       	ldi	r23, 0x00	; 0
    129c:	e0 91 65 08 	lds	r30, 0x0865	; 0x800865 <twi_onSlaveReceive>
    12a0:	f0 91 66 08 	lds	r31, 0x0866	; 0x800866 <twi_onSlaveReceive+0x1>
    12a4:	84 e4       	ldi	r24, 0x44	; 68
    12a6:	98 e0       	ldi	r25, 0x08	; 8
    12a8:	09 95       	icall
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:637
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    12aa:	10 92 64 08 	sts	0x0864, r1	; 0x800864 <twi_rxBufferIndex>
    12ae:	fc ce       	rjmp	.-520    	; 0x10a8 <__vector_33+0x52>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:686

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    12b0:	10 92 95 08 	sts	0x0895, r1	; 0x800895 <twi_error>
    12b4:	28 cf       	rjmp	.-432    	; 0x1106 <__stack+0x7>

000012b6 <countPulseASM>:
countPulseASM():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:62

countPulseASM:

.LM0:
.LFBB1:
    push r12   ;   ;  130 pushqi1/1 [length = 1]
    12b6:	cf 92       	push	r12
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:63
    push r13   ;   ;  131 pushqi1/1 [length = 1]
    12b8:	df 92       	push	r13
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:64
    push r14   ;   ;  132 pushqi1/1 [length = 1]
    12ba:	ef 92       	push	r14
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:65
    push r15   ;   ;  133 pushqi1/1 [length = 1]
    12bc:	ff 92       	push	r15
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:66
    push r16   ;   ;  134 pushqi1/1 [length = 1]
    12be:	0f 93       	push	r16
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:67
    push r17   ;   ;  135 pushqi1/1 [length = 1]
    12c0:	1f 93       	push	r17
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:72
/* prologue: function */
/* frame size = 0 */
/* stack size = 6 */
.L__stack_usage = 6
    mov r30,r24  ;  port, port   ;  2 *movhi/1  [length = 2]
    12c2:	e8 2f       	mov	r30, r24
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:73
    mov r31,r25  ;  port, port
    12c4:	f9 2f       	mov	r31, r25
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:79
/*     unsigned long width = 0;
***     // wait for any previous pulse to end
***     while ((*port & bit) == stateMask)
*/
.LM1:
    rjmp .L2   ;   ;  181 jump  [length = 1]
    12c6:	05 c0       	rjmp	.+10     	; 0x12d2 <countPulseASM+0x1c>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:83
.L4:
/*         if (--maxloops == 0) */
.LM2:
    subi r16,1   ;  maxloops,  ;  17  addsi3/2  [length = 4]
    12c8:	01 50       	subi	r16, 0x01	; 1
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:84
    sbc r17, r1   ;  maxloops
    12ca:	11 09       	sbc	r17, r1
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:85
    sbc r18, r1   ;  maxloops
    12cc:	21 09       	sbc	r18, r1
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:86
    sbc r19, r1   ;  maxloops
    12ce:	31 09       	sbc	r19, r1
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:87
    breq .L13  ; ,   ;  19  branch  [length = 1]
    12d0:	61 f1       	breq	.+88     	; 0x132a <countPulseASM+0x74>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:91
.L2:
/*         if (--maxloops == 0) */
.LM3:
    ld r25,Z   ;  D.1554, *port_7(D)   ;  22  movqi_insn/4  [length = 1]
    12d2:	90 81       	ld	r25, Z
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:92
    and r25,r22  ;  D.1554, bit  ;  24  andqi3/1  [length = 1]
    12d4:	96 23       	and	r25, r22
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:93
    cp r25,r20   ;  D.1554, stateMask  ;  25  *cmpqi/2  [length = 1]
    12d6:	94 17       	cp	r25, r20
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:94
    breq .L4   ; ,   ;  26  branch  [length = 1]
    12d8:	b9 f3       	breq	.-18     	; 0x12c8 <countPulseASM+0x12>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:95
    rjmp .L6   ;   ;  184 jump  [length = 1]
    12da:	05 c0       	rjmp	.+10     	; 0x12e6 <countPulseASM+0x30>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:104
***     // wait for the pulse to start
***     while ((*port & bit) != stateMask)
***         if (--maxloops == 0)
*/
.LM4:
    subi r16,1   ;  maxloops,  ;  31  addsi3/2  [length = 4]
    12dc:	01 50       	subi	r16, 0x01	; 1
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:105
    sbc r17, r1   ;  maxloops
    12de:	11 09       	sbc	r17, r1
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:106
    sbc r18, r1   ;  maxloops
    12e0:	21 09       	sbc	r18, r1
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:107
    sbc r19, r1   ;  maxloops
    12e2:	31 09       	sbc	r19, r1
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:108
    breq .L13  ; ,   ;  33  branch  [length = 1]
    12e4:	11 f1       	breq	.+68     	; 0x132a <countPulseASM+0x74>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:112
.L6:
/*         if (--maxloops == 0) */
.LM5:
    ld r25,Z   ;  D.1554, *port_7(D)   ;  41  movqi_insn/4  [length = 1]
    12e6:	90 81       	ld	r25, Z
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:113
    and r25,r22  ;  D.1554, bit  ;  43  andqi3/1  [length = 1]
    12e8:	96 23       	and	r25, r22
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:114
    cpse r25,r20   ;  D.1554, stateMask  ;  44  enable_interrupt-3  [length = 1]
    12ea:	94 13       	cpse	r25, r20
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:115
    rjmp .L7   ;
    12ec:	f7 cf       	rjmp	.-18     	; 0x12dc <countPulseASM+0x26>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:116
    mov r12, r1   ;  width  ;  7 *movsi/2  [length = 4]
    12ee:	c1 2c       	mov	r12, r1
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:117
    mov r13, r1   ;  width
    12f0:	d1 2c       	mov	r13, r1
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:118
    mov r14, r1   ;  width
    12f2:	e1 2c       	mov	r14, r1
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:119
    mov r15, r1   ;  width
    12f4:	f1 2c       	mov	r15, r1
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:120
    rjmp .L9   ;   ;  186 jump  [length = 1]
    12f6:	0a c0       	rjmp	.+20     	; 0x130c <countPulseASM+0x56>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:129
***     // wait for the pulse to stop
***     while ((*port & bit) == stateMask) {
***         if (++width == maxloops)
*/
.LM6:
    ldi r24,-1   ; ,   ;  50  addsi3/3  [length = 5]
    12f8:	8f ef       	ldi	r24, 0xFF	; 255
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:130
    sub r12,r24  ;  width,
    12fa:	c8 1a       	sub	r12, r24
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:131
    sbc r13,r24  ;  width,
    12fc:	d8 0a       	sbc	r13, r24
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:132
    sbc r14,r24  ;  width,
    12fe:	e8 0a       	sbc	r14, r24
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:133
    sbc r15,r24  ;  width,
    1300:	f8 0a       	sbc	r15, r24
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:134
    cp r16,r12   ;  maxloops, width  ;  51  *cmpsi/2  [length = 4]
    1302:	0c 15       	cp	r16, r12
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:135
    cpc r17,r13  ;  maxloops, width
    1304:	1d 05       	cpc	r17, r13
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:136
    cpc r18,r14  ;  maxloops, width
    1306:	2e 05       	cpc	r18, r14
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:137
    cpc r19,r15  ;  maxloops, width
    1308:	3f 05       	cpc	r19, r15
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:138
    breq .L13  ; ,   ;  52  branch  [length = 1]
    130a:	79 f0       	breq	.+30     	; 0x132a <countPulseASM+0x74>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:142
.L9:
/*         if (++width == maxloops) */
.LM7:
    ld r24,Z   ;  D.1554, *port_7(D)   ;  60  movqi_insn/4  [length = 1]
    130c:	80 81       	ld	r24, Z
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:143
    and r24,r22  ;  D.1554, bit  ;  62  andqi3/1  [length = 1]
    130e:	86 23       	and	r24, r22
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:144
    cp r24,r20   ;  D.1554, stateMask  ;  63  *cmpqi/2  [length = 1]
    1310:	84 17       	cp	r24, r20
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:145
    breq .L10  ; ,   ;  64  branch  [length = 1]
    1312:	91 f3       	breq	.-28     	; 0x12f8 <countPulseASM+0x42>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:151
/*             return 0;
***     }
***     return width;
*/
.LM8:
    mov r22,r12  ;  D.1553, width  ;  108 movqi_insn/1  [length = 1]
    1314:	6c 2d       	mov	r22, r12
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:152
    mov r23,r13  ;  D.1553, width  ;  109 movqi_insn/1  [length = 1]
    1316:	7d 2d       	mov	r23, r13
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:153
    mov r24,r14  ;  D.1553, width  ;  110 movqi_insn/1  [length = 1]
    1318:	8e 2d       	mov	r24, r14
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:154
    mov r25,r15  ;  D.1553, width  ;  111 movqi_insn/1  [length = 1]
    131a:	9f 2d       	mov	r25, r15
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:157
/* epilogue start */
.LM9:
    pop r17  ;   ;  171 popqi [length = 1]
    131c:	1f 91       	pop	r17
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:158
    pop r16  ;   ;  172 popqi [length = 1]
    131e:	0f 91       	pop	r16
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:159
    pop r15  ;   ;  173 popqi [length = 1]
    1320:	ff 90       	pop	r15
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:160
    pop r14  ;   ;  174 popqi [length = 1]
    1322:	ef 90       	pop	r14
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:161
    pop r13  ;   ;  175 popqi [length = 1]
    1324:	df 90       	pop	r13
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:162
    pop r12  ;   ;  176 popqi [length = 1]
    1326:	cf 90       	pop	r12
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:163
    ret  ;  177 return_from_epilogue  [length = 1]
    1328:	08 95       	ret
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:166
.L13:
.LM10:
    ldi r22,0  ;  D.1553   ;  120 movqi_insn/1  [length = 1]
    132a:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:167
    ldi r23,0  ;  D.1553   ;  121 movqi_insn/1  [length = 1]
    132c:	70 e0       	ldi	r23, 0x00	; 0
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:168
    ldi r24,0  ;  D.1553   ;  122 movqi_insn/1  [length = 1]
    132e:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:169
    ldi r25,0  ;  D.1553   ;  123 movqi_insn/1  [length = 1]
    1330:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:172
/* epilogue start */
.LM11:
    pop r17  ;   ;  138 popqi [length = 1]
    1332:	1f 91       	pop	r17
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:173
    pop r16  ;   ;  139 popqi [length = 1]
    1334:	0f 91       	pop	r16
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:174
    pop r15  ;   ;  140 popqi [length = 1]
    1336:	ff 90       	pop	r15
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:175
    pop r14  ;   ;  141 popqi [length = 1]
    1338:	ef 90       	pop	r14
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:176
    pop r13  ;   ;  142 popqi [length = 1]
    133a:	df 90       	pop	r13
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:177
    pop r12  ;   ;  143 popqi [length = 1]
    133c:	cf 90       	pop	r12
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.S:178
    ret  ;  144 return_from_epilogue  [length = 1]
    133e:	08 95       	ret

00001340 <update_crc(unsigned short, unsigned short*, unsigned short) [clone .constprop.28]>:
update_crc():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:40
unsigned int puls_cnt;

unsigned char TxBuffer[20];
unsigned short gbpTxBuffer[20], gbpParameter[20], packet[30];

unsigned short update_crc(unsigned short crc_accum, unsigned short *data_blk_ptr, unsigned short data_blk_size)
    1340:	cf 93       	push	r28
    1342:	df 93       	push	r29
    1344:	cd b7       	in	r28, 0x3d	; 61
    1346:	de b7       	in	r29, 0x3e	; 62
    1348:	d2 50       	subi	r29, 0x02	; 2
    134a:	0f b6       	in	r0, 0x3f	; 63
    134c:	f8 94       	cli
    134e:	de bf       	out	0x3e, r29	; 62
    1350:	0f be       	out	0x3f, r0	; 63
    1352:	cd bf       	out	0x3d, r28	; 61
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:43
{
    unsigned short i, j;
    unsigned short crc_table[256] = {
    1354:	80 e0       	ldi	r24, 0x00	; 0
    1356:	92 e0       	ldi	r25, 0x02	; 2
    1358:	e6 e0       	ldi	r30, 0x06	; 6
    135a:	f1 e0       	ldi	r31, 0x01	; 1
    135c:	de 01       	movw	r26, r28
    135e:	11 96       	adiw	r26, 0x01	; 1
    1360:	01 90       	ld	r0, Z+
    1362:	0d 92       	st	X+, r0
    1364:	01 97       	sbiw	r24, 0x01	; 1
    1366:	e1 f7       	brne	.-8      	; 0x1360 <update_crc(unsigned short, unsigned short*, unsigned short) [clone .constprop.28]+0x20>
    1368:	a2 ef       	ldi	r26, 0xF2	; 242
    136a:	b8 e0       	ldi	r27, 0x08	; 8
    136c:	2e e0       	ldi	r18, 0x0E	; 14
    136e:	39 e0       	ldi	r19, 0x09	; 9
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:79
        0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231,
        0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202};

    for (j = 0; j < data_blk_size; j++)
    {
        i = ((unsigned short)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
    1374:	6d 91       	ld	r22, X+
    1376:	7d 91       	ld	r23, X+
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:80
        crc_accum = (crc_accum << 8) ^ crc_table[i];
    1378:	58 2f       	mov	r21, r24
    137a:	44 27       	eor	r20, r20
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:79
        0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231,
        0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202};

    for (j = 0; j < data_blk_size; j++)
    {
        i = ((unsigned short)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
    137c:	e9 2f       	mov	r30, r25
    137e:	ff 27       	eor	r31, r31
    1380:	e6 27       	eor	r30, r22
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:80
        crc_accum = (crc_accum << 8) ^ crc_table[i];
    1382:	ee 0f       	add	r30, r30
    1384:	ff 1f       	adc	r31, r31
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	8c 0f       	add	r24, r28
    138c:	9d 1f       	adc	r25, r29
    138e:	e8 0f       	add	r30, r24
    1390:	f9 1f       	adc	r31, r25
    1392:	80 81       	ld	r24, Z
    1394:	91 81       	ldd	r25, Z+1	; 0x01
    1396:	84 27       	eor	r24, r20
    1398:	95 27       	eor	r25, r21
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:77
        0x8243, 0x0246, 0x024C, 0x8249, 0x0258, 0x825D, 0x8257, 0x0252,
        0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261,
        0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231,
        0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202};

    for (j = 0; j < data_blk_size; j++)
    139a:	2a 17       	cp	r18, r26
    139c:	3b 07       	cpc	r19, r27
    139e:	51 f7       	brne	.-44     	; 0x1374 <update_crc(unsigned short, unsigned short*, unsigned short) [clone .constprop.28]+0x34>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:83
    {
        i = ((unsigned short)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
        crc_accum = (crc_accum << 8) ^ crc_table[i];
    }
    return crc_accum;
}
    13a0:	de 5f       	subi	r29, 0xFE	; 254
    13a2:	0f b6       	in	r0, 0x3f	; 63
    13a4:	f8 94       	cli
    13a6:	de bf       	out	0x3e, r29	; 62
    13a8:	0f be       	out	0x3f, r0	; 63
    13aa:	cd bf       	out	0x3d, r28	; 61
    13ac:	df 91       	pop	r29
    13ae:	cf 91       	pop	r28
    13b0:	08 95       	ret

000013b2 <TwoWire::read() [clone .constprop.16]>:
read():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:303
int TwoWire::read(void)
{
  int value = -1;

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    13b2:	90 91 dd 08 	lds	r25, 0x08DD	; 0x8008dd <TwoWire::rxBufferIndex>
    13b6:	80 91 dc 08 	lds	r24, 0x08DC	; 0x8008dc <TwoWire::rxBufferLength>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:300
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
    13ba:	2f ef       	ldi	r18, 0xFF	; 255
    13bc:	3f ef       	ldi	r19, 0xFF	; 255
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:303

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    13be:	98 17       	cp	r25, r24
    13c0:	48 f4       	brcc	.+18     	; 0x13d4 <TwoWire::read() [clone .constprop.16]+0x22>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:304
    value = rxBuffer[rxBufferIndex];
    13c2:	e9 2f       	mov	r30, r25
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	e4 54       	subi	r30, 0x44	; 68
    13c8:	f7 4f       	sbci	r31, 0xF7	; 247
    13ca:	20 81       	ld	r18, Z
    13cc:	30 e0       	ldi	r19, 0x00	; 0
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:305
    ++rxBufferIndex;
    13ce:	9f 5f       	subi	r25, 0xFF	; 255
    13d0:	90 93 dd 08 	sts	0x08DD, r25	; 0x8008dd <TwoWire::rxBufferIndex>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:309
  }

  return value;
}
    13d4:	c9 01       	movw	r24, r18
    13d6:	08 95       	ret

000013d8 <TwoWire::endTransmission(unsigned char) [clone .constprop.12]>:
endTransmission():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:224
//  the bus tenure has been properly ended with a STOP. It
//  is very possible to leave the bus in a hung state if
//  no call to endTransmission(true) is made. Some I2C
//  devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
    13d8:	28 2f       	mov	r18, r24
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:227
{
  // transmit buffer (blocking)
  uint8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
    13da:	90 91 bb 08 	lds	r25, 0x08BB	; 0x8008bb <TwoWire::txBufferLength>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:263
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
    return 1;
    13de:	81 e0       	ldi	r24, 0x01	; 1
twi_writeTo():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:262
 *          5 .. timeout
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
    13e0:	91 32       	cpi	r25, 0x21	; 33
    13e2:	08 f0       	brcs	.+2      	; 0x13e6 <TwoWire::endTransmission(unsigned char) [clone .constprop.12]+0xe>
    13e4:	42 c0       	rjmp	.+132    	; 0x146a <TwoWire::endTransmission(unsigned char) [clone .constprop.12]+0x92>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:276
        twi_handleTimeout(twi_do_reset_on_timeout);
        return (5);
      }
    }
  #else
    while(TWI_READY != twi_state){
    13e6:	80 91 97 08 	lds	r24, 0x0897	; 0x800897 <twi_state>
    13ea:	81 11       	cpse	r24, r1
    13ec:	fc cf       	rjmp	.-8      	; 0x13e6 <TwoWire::endTransmission(unsigned char) [clone .constprop.12]+0xe>
endTransmission():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:227
    13ee:	80 91 ba 08 	lds	r24, 0x08BA	; 0x8008ba <TwoWire::txAddress>
twi_writeTo():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:281
      continue;
    }
  #endif

  twi_state = TWI_MTX;
    13f2:	32 e0       	ldi	r19, 0x02	; 2
    13f4:	30 93 97 08 	sts	0x0897, r19	; 0x800897 <twi_state>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:282
  twi_sendStop = sendStop;
    13f8:	20 93 96 08 	sts	0x0896, r18	; 0x800896 <twi_sendStop>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:284
  // reset error state (0xFF.. no error occurred)
  twi_error = 0xFF;
    13fc:	2f ef       	ldi	r18, 0xFF	; 255
    13fe:	20 93 95 08 	sts	0x0895, r18	; 0x800895 <twi_error>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:287

  // initialize buffer iteration vars
  twi_masterBuffer = data;
    1402:	2a e9       	ldi	r18, 0x9A	; 154
    1404:	38 e0       	ldi	r19, 0x08	; 8
    1406:	30 93 94 08 	sts	0x0894, r19	; 0x800894 <twi_masterBuffer+0x1>
    140a:	20 93 93 08 	sts	0x0893, r18	; 0x800893 <twi_masterBuffer>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:288
  twi_masterBufferIndex = 0;
    140e:	10 92 92 08 	sts	0x0892, r1	; 0x800892 <twi_masterBufferIndex>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:289
  twi_masterBufferLength = length;
    1412:	90 93 91 08 	sts	0x0891, r25	; 0x800891 <twi_masterBufferLength>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:292

  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
    1416:	10 92 90 08 	sts	0x0890, r1	; 0x800890 <twi_slarw>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:293
  twi_slarw |= address << 1;
    141a:	90 91 90 08 	lds	r25, 0x0890	; 0x800890 <twi_slarw>
    141e:	88 0f       	add	r24, r24
    1420:	89 2b       	or	r24, r25
    1422:	80 93 90 08 	sts	0x0890, r24	; 0x800890 <twi_slarw>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:298

  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
    1426:	80 91 8f 08 	lds	r24, 0x088F	; 0x80088f <twi_inRepStart>
    142a:	81 30       	cpi	r24, 0x01	; 1
    142c:	29 f5       	brne	.+74     	; 0x1478 <TwoWire::endTransmission(unsigned char) [clone .constprop.12]+0xa0>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:305
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // Remember, we're dealing with an ASYNC ISR
    142e:	10 92 8f 08 	sts	0x088F, r1	; 0x80088f <twi_inRepStart>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:316
          return (5);
        }
      } while(TWCR & _BV(TWWC));
    #else
      do {
        TWDR = twi_slarw;
    1432:	80 91 90 08 	lds	r24, 0x0890	; 0x800890 <twi_slarw>
    1436:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:317
      } while(TWCR & _BV(TWWC));
    143a:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    143e:	83 fd       	sbrc	r24, 3
    1440:	f8 cf       	rjmp	.-16     	; 0x1432 <TwoWire::endTransmission(unsigned char) [clone .constprop.12]+0x5a>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:319
    #endif
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
    1442:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:323
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
    1444:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:335
        twi_handleTimeout(twi_do_reset_on_timeout);
        return (5);
      }
    }
  #else
    while(wait && (TWI_MTX == twi_state)){
    1448:	80 91 97 08 	lds	r24, 0x0897	; 0x800897 <twi_state>
    144c:	82 30       	cpi	r24, 0x02	; 2
    144e:	e1 f3       	breq	.-8      	; 0x1448 <TwoWire::endTransmission(unsigned char) [clone .constprop.12]+0x70>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:340
      continue;
    }
  #endif

  if (twi_error == 0xFF)
    1450:	80 91 95 08 	lds	r24, 0x0895	; 0x800895 <twi_error>
    1454:	8f 3f       	cpi	r24, 0xFF	; 255
    1456:	91 f0       	breq	.+36     	; 0x147c <TwoWire::endTransmission(unsigned char) [clone .constprop.12]+0xa4>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:342
    return 0; // success
  else if (twi_error == TW_MT_SLA_NACK)
    1458:	80 91 95 08 	lds	r24, 0x0895	; 0x800895 <twi_error>
    145c:	80 32       	cpi	r24, 0x20	; 32
    145e:	81 f0       	breq	.+32     	; 0x1480 <TwoWire::endTransmission(unsigned char) [clone .constprop.12]+0xa8>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:344
    return 2; // error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    1460:	80 91 95 08 	lds	r24, 0x0895	; 0x800895 <twi_error>
    1464:	80 33       	cpi	r24, 0x30	; 48
    1466:	71 f0       	breq	.+28     	; 0x1484 <TwoWire::endTransmission(unsigned char) [clone .constprop.12]+0xac>
endTransmission():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:347
    return 3; // error: data send, nack received
  else
    return 4; // other twi error
    1468:	84 e0       	ldi	r24, 0x04	; 4
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:229
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    146a:	10 92 99 08 	sts	0x0899, r1	; 0x800899 <TwoWire::txBufferIndex>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:230
  txBufferLength = 0;
    146e:	10 92 bb 08 	sts	0x08BB, r1	; 0x8008bb <TwoWire::txBufferLength>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:232
  // indicate that we are done transmitting
  transmitting = 0;
    1472:	10 92 98 08 	sts	0x0898, r1	; 0x800898 <TwoWire::transmitting>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:234
  return ret;
}
    1476:	08 95       	ret
twi_writeTo():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:323
    #endif
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
    1478:	85 ee       	ldi	r24, 0xE5	; 229
    147a:	e4 cf       	rjmp	.-56     	; 0x1444 <TwoWire::endTransmission(unsigned char) [clone .constprop.12]+0x6c>
endTransmission():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:341
      continue;
    }
  #endif

  if (twi_error == 0xFF)
    return 0; // success
    147c:	80 e0       	ldi	r24, 0x00	; 0
    147e:	f5 cf       	rjmp	.-22     	; 0x146a <TwoWire::endTransmission(unsigned char) [clone .constprop.12]+0x92>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:343
  else if (twi_error == TW_MT_SLA_NACK)
    return 2; // error: address send, nack received
    1480:	82 e0       	ldi	r24, 0x02	; 2
    1482:	f3 cf       	rjmp	.-26     	; 0x146a <TwoWire::endTransmission(unsigned char) [clone .constprop.12]+0x92>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:345
  else if (twi_error == TW_MT_DATA_NACK)
    return 3; // error: data send, nack received
    1484:	83 e0       	ldi	r24, 0x03	; 3
    1486:	f1 cf       	rjmp	.-30     	; 0x146a <TwoWire::endTransmission(unsigned char) [clone .constprop.12]+0x92>

00001488 <TwoWire::beginTransmission(unsigned char) [clone .constprop.11]>:
beginTransmission():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:198
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    1488:	91 e0       	ldi	r25, 0x01	; 1
    148a:	90 93 98 08 	sts	0x0898, r25	; 0x800898 <TwoWire::transmitting>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:200
  // set address of targeted slave
  txAddress = address;
    148e:	80 93 ba 08 	sts	0x08BA, r24	; 0x8008ba <TwoWire::txAddress>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:202
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    1492:	10 92 99 08 	sts	0x0899, r1	; 0x800899 <TwoWire::txBufferIndex>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:203
  txBufferLength = 0;
    1496:	10 92 bb 08 	sts	0x08BB, r1	; 0x8008bb <TwoWire::txBufferLength>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:204
}
    149a:	08 95       	ret

0000149c <TwoWire::endTransmission() [clone .constprop.7]>:
endTransmission():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:241
//  This provides backwards compatibility with the original
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	0c 94 ec 09 	jmp	0x13d8	; 0x13d8 <TwoWire::endTransmission(unsigned char) [clone .constprop.12]>

000014a2 <XL_Gripper(char, int, int) [clone .constprop.27]>:
XL_Gripper():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:151
void XL_Gripper(char ID, int position, int speed)
{
    char Count;
    unsigned short CRC;

    packet[0] = 0xFF;
    14a2:	2f ef       	ldi	r18, 0xFF	; 255
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	30 93 f3 08 	sts	0x08F3, r19	; 0x8008f3 <packet+0x1>
    14aa:	20 93 f2 08 	sts	0x08F2, r18	; 0x8008f2 <packet>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:152
    packet[1] = 0xFF;
    14ae:	30 93 f5 08 	sts	0x08F5, r19	; 0x8008f5 <packet+0x3>
    14b2:	20 93 f4 08 	sts	0x08F4, r18	; 0x8008f4 <packet+0x2>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:153
    packet[2] = 0xFD;
    14b6:	2d ef       	ldi	r18, 0xFD	; 253
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	30 93 f7 08 	sts	0x08F7, r19	; 0x8008f7 <packet+0x5>
    14be:	20 93 f6 08 	sts	0x08F6, r18	; 0x8008f6 <packet+0x4>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:154
    packet[3] = 0x00;                   // RESERVED
    14c2:	10 92 f9 08 	sts	0x08F9, r1	; 0x8008f9 <packet+0x7>
    14c6:	10 92 f8 08 	sts	0x08F8, r1	; 0x8008f8 <packet+0x6>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:155
    packet[4] = ID;                     // id
    14ca:	08 2e       	mov	r0, r24
    14cc:	00 0c       	add	r0, r0
    14ce:	99 0b       	sbc	r25, r25
    14d0:	90 93 fb 08 	sts	0x08FB, r25	; 0x8008fb <packet+0x9>
    14d4:	80 93 fa 08 	sts	0x08FA, r24	; 0x8008fa <packet+0x8>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:156
    packet[5] = 7 + 2;                  // packet lengh L  : packet lengh after packet lengh
    14d8:	89 e0       	ldi	r24, 0x09	; 9
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	90 93 fd 08 	sts	0x08FD, r25	; 0x8008fd <packet+0xb>
    14e0:	80 93 fc 08 	sts	0x08FC, r24	; 0x8008fc <packet+0xa>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:157
    packet[6] = 0;                      // packet lengh H
    14e4:	10 92 ff 08 	sts	0x08FF, r1	; 0x8008ff <packet+0xd>
    14e8:	10 92 fe 08 	sts	0x08FE, r1	; 0x8008fe <packet+0xc>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:158
    packet[7] = 3;                      // Instraction
    14ec:	83 e0       	ldi	r24, 0x03	; 3
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	90 93 01 09 	sts	0x0901, r25	; 0x800901 <packet+0xf>
    14f4:	80 93 00 09 	sts	0x0900, r24	; 0x800900 <packet+0xe>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:159
    packet[8] = 30;                     // address L
    14f8:	8e e1       	ldi	r24, 0x1E	; 30
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	90 93 03 09 	sts	0x0903, r25	; 0x800903 <packet+0x11>
    1500:	80 93 02 09 	sts	0x0902, r24	; 0x800902 <packet+0x10>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:160
    packet[9] = 0;                      // address H
    1504:	10 92 05 09 	sts	0x0905, r1	; 0x800905 <packet+0x13>
    1508:	10 92 04 09 	sts	0x0904, r1	; 0x800904 <packet+0x12>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:161
    packet[10] = position & 255;        // parameter
    150c:	cb 01       	movw	r24, r22
    150e:	99 27       	eor	r25, r25
    1510:	90 93 07 09 	sts	0x0907, r25	; 0x800907 <packet+0x15>
    1514:	80 93 06 09 	sts	0x0906, r24	; 0x800906 <packet+0x14>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:162
    packet[11] = (position >> 8) & 255; // parameter
    1518:	70 93 08 09 	sts	0x0908, r23	; 0x800908 <packet+0x16>
    151c:	10 92 09 09 	sts	0x0909, r1	; 0x800909 <packet+0x17>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:163
    packet[12] = speed & 255;           // parameter
    1520:	84 e6       	ldi	r24, 0x64	; 100
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	90 93 0b 09 	sts	0x090B, r25	; 0x80090b <packet+0x19>
    1528:	80 93 0a 09 	sts	0x090A, r24	; 0x80090a <packet+0x18>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:164
    packet[13] = (speed >> 8) & 255;    // parameter
    152c:	10 92 0d 09 	sts	0x090D, r1	; 0x80090d <packet+0x1b>
    1530:	10 92 0c 09 	sts	0x090C, r1	; 0x80090c <packet+0x1a>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:166

    CRC = update_crc(0, packet, 14);
    1534:	0e 94 a0 09 	call	0x1340	; 0x1340 <update_crc(unsigned short, unsigned short*, unsigned short) [clone .constprop.28]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:167
    packet[14] = CRC & 0xFF;        // CRC_L
    1538:	9c 01       	movw	r18, r24
    153a:	33 27       	eor	r19, r19
    153c:	30 93 0f 09 	sts	0x090F, r19	; 0x80090f <packet+0x1d>
    1540:	20 93 0e 09 	sts	0x090E, r18	; 0x80090e <packet+0x1c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:168
    packet[15] = (CRC >> 8) & 0xFF; // CRC_H
    1544:	90 93 10 09 	sts	0x0910, r25	; 0x800910 <packet+0x1e>
    1548:	10 92 11 09 	sts	0x0911, r1	; 0x800911 <packet+0x1f>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:169
    send_mode;
    154c:	61 e0       	ldi	r22, 0x01	; 1
    154e:	86 e1       	ldi	r24, 0x16	; 22
    1550:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <digitalWrite>
    1554:	e2 ef       	ldi	r30, 0xF2	; 242
    1556:	f8 e0       	ldi	r31, 0x08	; 8
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:172
    for (Count = 0; Count < 16; Count++)
    {
        while (!TXD_READY)
    1558:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    155c:	85 ff       	sbrs	r24, 5
    155e:	fc cf       	rjmp	.-8      	; 0x1558 <XL_Gripper(char, int, int) [clone .constprop.27]+0xb6>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:174
            ;
        M_UDR = packet[Count];
    1560:	80 81       	ld	r24, Z
    1562:	32 96       	adiw	r30, 0x02	; 2
    1564:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:170

    CRC = update_crc(0, packet, 14);
    packet[14] = CRC & 0xFF;        // CRC_L
    packet[15] = (CRC >> 8) & 0xFF; // CRC_H
    send_mode;
    for (Count = 0; Count < 16; Count++)
    1568:	89 e0       	ldi	r24, 0x09	; 9
    156a:	e2 31       	cpi	r30, 0x12	; 18
    156c:	f8 07       	cpc	r31, r24
    156e:	a1 f7       	brne	.-24     	; 0x1558 <XL_Gripper(char, int, int) [clone .constprop.27]+0xb6>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:176
    {
        while (!TXD_READY)
            ;
        M_UDR = packet[Count];
    }
    while (!CHECK_TXD_FINISH)
    1570:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    1574:	86 ff       	sbrs	r24, 6
    1576:	fc cf       	rjmp	.-8      	; 0x1570 <XL_Gripper(char, int, int) [clone .constprop.27]+0xce>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:178
        ; // Wait until TXD Shift register empty
    delay(15);
    1578:	6f e0       	ldi	r22, 0x0F	; 15
    157a:	70 e0       	ldi	r23, 0x00	; 0
    157c:	80 e0       	ldi	r24, 0x00	; 0
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	0c 94 aa 02 	jmp	0x554	; 0x554 <delay>

00001584 <AX(char, int, int) [clone .constprop.24]>:
AX():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:284
    delay(10); // bayad bashe hatman    hade aghal=10  // 1 bazi vaghta error mideh
               //    RXD;
}
void AX(char ID, int position, int speed)
{
    TxBuffer[0] = 0xff;
    1584:	9f ef       	ldi	r25, 0xFF	; 255
    1586:	90 93 de 08 	sts	0x08DE, r25	; 0x8008de <TxBuffer>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:285
    TxBuffer[1] = 0xff;
    158a:	90 93 df 08 	sts	0x08DF, r25	; 0x8008df <TxBuffer+0x1>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:286
    TxBuffer[2] = ID; // ID
    158e:	80 93 e0 08 	sts	0x08E0, r24	; 0x8008e0 <TxBuffer+0x2>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:287
    TxBuffer[3] = 7;  // Length(Paramter=5,Instruction=1,Checksum=1)
    1592:	87 e0       	ldi	r24, 0x07	; 7
    1594:	80 93 e1 08 	sts	0x08E1, r24	; 0x8008e1 <TxBuffer+0x3>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:288
    TxBuffer[4] = 3;  // bInstruction;
    1598:	83 e0       	ldi	r24, 0x03	; 3
    159a:	80 93 e2 08 	sts	0x08E2, r24	; 0x8008e2 <TxBuffer+0x4>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:290

    TxBuffer[5] = 30;             // Address of position
    159e:	8e e1       	ldi	r24, 0x1E	; 30
    15a0:	80 93 e3 08 	sts	0x08E3, r24	; 0x8008e3 <TxBuffer+0x5>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:291
    TxBuffer[6] = position & 255; // Writing Data P_GOAL_POSITION_L2
    15a4:	60 93 e4 08 	sts	0x08E4, r22	; 0x8008e4 <TxBuffer+0x6>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:292
    TxBuffer[7] = position >> 8;  // Writing Data P_GOAL_POSITION_H
    15a8:	70 93 e5 08 	sts	0x08E5, r23	; 0x8008e5 <TxBuffer+0x7>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:293
    TxBuffer[8] = speed & 255;    // Writing Data P_GOAL_SPEED_L2
    15ac:	86 e9       	ldi	r24, 0x96	; 150
    15ae:	80 93 e6 08 	sts	0x08E6, r24	; 0x8008e6 <TxBuffer+0x8>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:294
    TxBuffer[9] = speed >> 8;     // Writing Data P_GOAL_SPEED_H
    15b2:	10 92 e7 08 	sts	0x08E7, r1	; 0x8008e7 <TxBuffer+0x9>
_TXsend():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:262
void _TXsend(char last_TXBuffer)
{
    unsigned char CheckSum, Count;
    //    TXD;
    //    DDRD.3=1; ready to send
    send_mode;
    15b6:	61 e0       	ldi	r22, 0x01	; 1
    15b8:	86 e1       	ldi	r24, 0x16	; 22
    15ba:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <digitalWrite>
    15be:	e0 ee       	ldi	r30, 0xE0	; 224
    15c0:	f8 e0       	ldi	r31, 0x08	; 8
AX():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:263
    CheckSum = 0;
    15c2:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:264
    for (Count = 2; Count <= last_TXBuffer; Count++) // except 0xff,checksum
    15c4:	92 e0       	ldi	r25, 0x02	; 2
_TXsend():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:265
        CheckSum += TxBuffer[Count];
    15c6:	21 91       	ld	r18, Z+
    15c8:	82 0f       	add	r24, r18
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:264
    unsigned char CheckSum, Count;
    //    TXD;
    //    DDRD.3=1; ready to send
    send_mode;
    CheckSum = 0;
    for (Count = 2; Count <= last_TXBuffer; Count++) // except 0xff,checksum
    15ca:	9f 5f       	subi	r25, 0xFF	; 255
    15cc:	9a 30       	cpi	r25, 0x0A	; 10
    15ce:	d9 f7       	brne	.-10     	; 0x15c6 <AX(char, int, int) [clone .constprop.24]+0x42>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:266
        CheckSum += TxBuffer[Count];
    TxBuffer[last_TXBuffer + 1] = ~CheckSum; // Writing Checksum with Bit Inversion
    15d0:	80 95       	com	r24
    15d2:	80 93 e8 08 	sts	0x08E8, r24	; 0x8008e8 <TxBuffer+0xa>
    15d6:	ee ed       	ldi	r30, 0xDE	; 222
    15d8:	f8 e0       	ldi	r31, 0x08	; 8
AX():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:267
    for (Count = 0; Count <= last_TXBuffer + 1; Count++)
    15da:	80 e0       	ldi	r24, 0x00	; 0
_TXsend():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:271
    {
        // Serial1.write(TxBuffer[Count]);
        // delayMicroseconds(100);
        while (!TXD_READY)
    15dc:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    15e0:	95 ff       	sbrs	r25, 5
    15e2:	fc cf       	rjmp	.-8      	; 0x15dc <AX(char, int, int) [clone .constprop.24]+0x58>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:273
            ;
        M_UDR = TxBuffer[Count];
    15e4:	91 91       	ld	r25, Z+
    15e6:	90 93 9c 00 	sts	0x009C, r25	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:267
    send_mode;
    CheckSum = 0;
    for (Count = 2; Count <= last_TXBuffer; Count++) // except 0xff,checksum
        CheckSum += TxBuffer[Count];
    TxBuffer[last_TXBuffer + 1] = ~CheckSum; // Writing Checksum with Bit Inversion
    for (Count = 0; Count <= last_TXBuffer + 1; Count++)
    15ea:	8f 5f       	subi	r24, 0xFF	; 255
    15ec:	8b 30       	cpi	r24, 0x0B	; 11
    15ee:	b1 f7       	brne	.-20     	; 0x15dc <AX(char, int, int) [clone .constprop.24]+0x58>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:275
        // delayMicroseconds(100);
        while (!TXD_READY)
            ;
        M_UDR = TxBuffer[Count];
    }
    while (!CHECK_TXD_FINISH)
    15f0:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    15f4:	86 ff       	sbrs	r24, 6
    15f6:	fc cf       	rjmp	.-8      	; 0x15f0 <AX(char, int, int) [clone .constprop.24]+0x6c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:279
        ; // Wait until TXD Shift register empty

    //    DDRD.3=0;
    delay(10); // bayad bashe hatman    hade aghal=10  // 1 bazi vaghta error mideh
    15f8:	6a e0       	ldi	r22, 0x0A	; 10
    15fa:	70 e0       	ldi	r23, 0x00	; 0
    15fc:	80 e0       	ldi	r24, 0x00	; 0
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	0c 94 aa 02 	jmp	0x554	; 0x554 <delay>

00001604 <TwoWire::write(int) [clone .constprop.23]>:
write():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.h:88
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    1604:	68 2f       	mov	r22, r24
    1606:	88 e6       	ldi	r24, 0x68	; 104
    1608:	9a e0       	ldi	r25, 0x0A	; 10
    160a:	0c 94 73 04 	jmp	0x8e6	; 0x8e6 <TwoWire::write(unsigned char)>

0000160e <TwoWire::requestFrom(int, int) [clone .constprop.8]>:
requestFrom():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:185
uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
    160e:	ac 01       	movw	r20, r24
twi_readFrom():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:171
        twi_handleTimeout(twi_do_reset_on_timeout);
        return 0;
      }
    }
  #else
    while(TWI_READY != twi_state){
    1610:	80 91 97 08 	lds	r24, 0x0897	; 0x800897 <twi_state>
    1614:	81 11       	cpse	r24, r1
    1616:	fc cf       	rjmp	.-8      	; 0x1610 <TwoWire::requestFrom(int, int) [clone .constprop.8]+0x2>
requestFrom():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:187
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
    1618:	96 2f       	mov	r25, r22
twi_readFrom():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:175
      continue;
    }
  #endif
  twi_state = TWI_MRX;
    161a:	81 e0       	ldi	r24, 0x01	; 1
    161c:	80 93 97 08 	sts	0x0897, r24	; 0x800897 <twi_state>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:176
  twi_sendStop = sendStop;
    1620:	80 93 96 08 	sts	0x0896, r24	; 0x800896 <twi_sendStop>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:178
  // reset error state (0xFF.. no error occurred)
  twi_error = 0xFF;
    1624:	2f ef       	ldi	r18, 0xFF	; 255
    1626:	20 93 95 08 	sts	0x0895, r18	; 0x800895 <twi_error>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:181

  // initialize buffer iteration vars
  twi_masterBuffer = data;
    162a:	2c eb       	ldi	r18, 0xBC	; 188
    162c:	38 e0       	ldi	r19, 0x08	; 8
    162e:	30 93 94 08 	sts	0x0894, r19	; 0x800894 <twi_masterBuffer+0x1>
    1632:	20 93 93 08 	sts	0x0893, r18	; 0x800893 <twi_masterBuffer>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:182
  twi_masterBufferIndex = 0;
    1636:	10 92 92 08 	sts	0x0892, r1	; 0x800892 <twi_masterBufferIndex>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:183
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    163a:	2f ef       	ldi	r18, 0xFF	; 255
    163c:	26 0f       	add	r18, r22
    163e:	20 93 91 08 	sts	0x0891, r18	; 0x800891 <twi_masterBufferLength>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:191
  // Therefore we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    1642:	80 93 90 08 	sts	0x0890, r24	; 0x800890 <twi_slarw>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:192
  twi_slarw |= address << 1;
    1646:	20 91 90 08 	lds	r18, 0x0890	; 0x800890 <twi_slarw>
    164a:	44 0f       	add	r20, r20
    164c:	55 1f       	adc	r21, r21
    164e:	82 2f       	mov	r24, r18
    1650:	84 2b       	or	r24, r20
    1652:	80 93 90 08 	sts	0x0890, r24	; 0x800890 <twi_slarw>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:194

  if (true == twi_inRepStart) {
    1656:	80 91 8f 08 	lds	r24, 0x088F	; 0x80088f <twi_inRepStart>
    165a:	81 30       	cpi	r24, 0x01	; 1
    165c:	e9 f4       	brne	.+58     	; 0x1698 <TwoWire::requestFrom(int, int) [clone .constprop.8]+0x8a>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:201
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // Remember, we're dealing with an ASYNC ISR
    165e:	10 92 8f 08 	sts	0x088F, r1	; 0x80088f <twi_inRepStart>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:213
          return 0;
        }
      } while(TWCR & _BV(TWWC));
    #else
      do {
        TWDR = twi_slarw;
    1662:	80 91 90 08 	lds	r24, 0x0890	; 0x800890 <twi_slarw>
    1666:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:214
      } while(TWCR & _BV(TWWC));
    166a:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    166e:	83 fd       	sbrc	r24, 3
    1670:	f8 cf       	rjmp	.-16     	; 0x1662 <TwoWire::requestFrom(int, int) [clone .constprop.8]+0x54>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:216
    #endif
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
    1672:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:220
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    1674:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:232
        twi_handleTimeout(twi_do_reset_on_timeout);
        return 0;
      }
    }
  #else
    while(TWI_MRX == twi_state){
    1678:	80 91 97 08 	lds	r24, 0x0897	; 0x800897 <twi_state>
    167c:	81 30       	cpi	r24, 0x01	; 1
    167e:	e1 f3       	breq	.-8      	; 0x1678 <TwoWire::requestFrom(int, int) [clone .constprop.8]+0x6a>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:237
      continue;
    }
  #endif

  if (twi_masterBufferIndex < length)
    1680:	80 91 92 08 	lds	r24, 0x0892	; 0x800892 <twi_masterBufferIndex>
    1684:	86 17       	cp	r24, r22
    1686:	10 f4       	brcc	.+4      	; 0x168c <TwoWire::requestFrom(int, int) [clone .constprop.8]+0x7e>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:238
    length = twi_masterBufferIndex;
    1688:	90 91 92 08 	lds	r25, 0x0892	; 0x800892 <twi_masterBufferIndex>
requestFrom():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:122
    quantity = TWI_BUFFER_SIZE;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    168c:	10 92 dd 08 	sts	0x08DD, r1	; 0x8008dd <TwoWire::rxBufferIndex>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:123
  rxBufferLength = read;
    1690:	90 93 dc 08 	sts	0x08DC, r25	; 0x8008dc <TwoWire::rxBufferLength>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:188
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}
    1694:	89 2f       	mov	r24, r25
    1696:	08 95       	ret
twi_readFrom():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:220
    #endif
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    1698:	85 ee       	ldi	r24, 0xE5	; 229
    169a:	ec cf       	rjmp	.-40     	; 0x1674 <TwoWire::requestFrom(int, int) [clone .constprop.8]+0x66>

0000169c <vl(char)>:
vl():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1692

  // Your additional processing logic here
  
  return vl_dis;
}
unsigned int vl(char xv) {
    169c:	cf 93       	push	r28
    169e:	df 93       	push	r29
    16a0:	c8 2f       	mov	r28, r24
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1701

  // Select the appropriate sensor
  if (xv == 1) {
    // Set MUX pins to select sensor 1
    // B11 Right
    digitalWrite(MUX_A, LOW);
    16a2:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1698
  unsigned int vl_dis = 1;

  // Your pin manipulation logic here if needed

  // Select the appropriate sensor
  if (xv == 1) {
    16a4:	81 30       	cpi	r24, 0x01	; 1
    16a6:	09 f4       	brne	.+2      	; 0x16aa <vl(char)+0xe>
    16a8:	3f c0       	rjmp	.+126    	; 0x1728 <vl(char)+0x8c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1714
    digitalWrite(MUX_C, HIGH);
  }
  else if (xv == 3) {
    // Set MUX pins to select sensor 2
    // B13 Left
    digitalWrite(MUX_A, HIGH);
    16aa:	61 e0       	ldi	r22, 0x01	; 1
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1704
    // Set MUX pins to select sensor 1
    // B11 Right
    digitalWrite(MUX_A, LOW);
    digitalWrite(MUX_B, HIGH);
    digitalWrite(MUX_C, LOW);
  } else if (xv == 2) {
    16ac:	82 30       	cpi	r24, 0x02	; 2
    16ae:	e1 f5       	brne	.+120    	; 0x1728 <vl(char)+0x8c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1707
    // Set MUX pins to select sensor 2
    // B13 Left
    digitalWrite(MUX_A, LOW);
    16b0:	60 e0       	ldi	r22, 0x00	; 0
    16b2:	8c e2       	ldi	r24, 0x2C	; 44
    16b4:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <digitalWrite>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1708
    digitalWrite(MUX_B, LOW);
    16b8:	60 e0       	ldi	r22, 0x00	; 0
    16ba:	8b e2       	ldi	r24, 0x2B	; 43
    16bc:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <digitalWrite>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1709
    digitalWrite(MUX_C, HIGH);
    16c0:	61 e0       	ldi	r22, 0x01	; 1
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1716
  else if (xv == 3) {
    // Set MUX pins to select sensor 2
    // B13 Left
    digitalWrite(MUX_A, HIGH);
    digitalWrite(MUX_B, HIGH);
    digitalWrite(MUX_C, LOW);
    16c2:	8a e2       	ldi	r24, 0x2A	; 42
    16c4:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <digitalWrite>
beginTransmission():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:208
  txBufferLength = 0;
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
    16c8:	89 e2       	ldi	r24, 0x29	; 41
    16ca:	0e 94 44 0a 	call	0x1488	; 0x1488 <TwoWire::beginTransmission(unsigned char) [clone .constprop.11]>
vl():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1720
  }
  // Send command to start distance measurement
  Wire.beginTransmission(VL53L0X_ADDRESS);
  Wire.write(VL53L0X_REG_SYSRANGE_START);
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	80 e0       	ldi	r24, 0x00	; 0
    16d2:	0e 94 02 0b 	call	0x1604	; 0x1604 <TwoWire::write(int) [clone .constprop.23]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1721
  Wire.write(0x01);
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	0e 94 02 0b 	call	0x1604	; 0x1604 <TwoWire::write(int) [clone .constprop.23]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1722
  Wire.endTransmission();
    16de:	0e 94 4e 0a 	call	0x149c	; 0x149c <TwoWire::endTransmission() [clone .constprop.7]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1725

  // Delay for measurement completion
  delay(10);  // Adjust delay if needed
    16e2:	6a e0       	ldi	r22, 0x0A	; 10
    16e4:	70 e0       	ldi	r23, 0x00	; 0
    16e6:	80 e0       	ldi	r24, 0x00	; 0
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	0e 94 aa 02 	call	0x554	; 0x554 <delay>
beginTransmission():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:208
    16ee:	89 e2       	ldi	r24, 0x29	; 41
    16f0:	0e 94 44 0a 	call	0x1488	; 0x1488 <TwoWire::beginTransmission(unsigned char) [clone .constprop.11]>
vl():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1729

  // Request distance measurement
  Wire.beginTransmission(VL53L0X_ADDRESS);
  Wire.write(VL53L0X_REG_RESULT_RANGE_VAL);
    16f4:	8e e1       	ldi	r24, 0x1E	; 30
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	0e 94 02 0b 	call	0x1604	; 0x1604 <TwoWire::write(int) [clone .constprop.23]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1730
  Wire.endTransmission(false);
    16fc:	80 e0       	ldi	r24, 0x00	; 0
    16fe:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <TwoWire::endTransmission(unsigned char) [clone .constprop.12]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1733

  // Read distance measurement (2 bytes)
  Wire.requestFrom(VL53L0X_ADDRESS, 2);
    1702:	62 e0       	ldi	r22, 0x02	; 2
    1704:	70 e0       	ldi	r23, 0x00	; 0
    1706:	89 e2       	ldi	r24, 0x29	; 41
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	0e 94 07 0b 	call	0x160e	; 0x160e <TwoWire::requestFrom(int, int) [clone .constprop.8]>
available():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:292
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
    170e:	80 91 dc 08 	lds	r24, 0x08DC	; 0x8008dc <TwoWire::rxBufferLength>
    1712:	90 91 dd 08 	lds	r25, 0x08DD	; 0x8008dd <TwoWire::rxBufferIndex>
    1716:	89 1b       	sub	r24, r25
    1718:	99 0b       	sbc	r25, r25
vl():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1734
  if (Wire.available() >= 2) {
    171a:	02 97       	sbiw	r24, 0x02	; 2
    171c:	74 f4       	brge	.+28     	; 0x173a <vl(char)+0x9e>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1693
  // Your additional processing logic here
  
  return vl_dis;
}
unsigned int vl(char xv) {
  unsigned int vl_dis = 1;
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1743
  }

  // Your additional processing logic here
  if(vl_dis==20) {delay(10);return vl_double_check(xv);}
  else return vl_dis;
}
    1722:	df 91       	pop	r29
    1724:	cf 91       	pop	r28
    1726:	08 95       	ret
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1714
    digitalWrite(MUX_C, HIGH);
  }
  else if (xv == 3) {
    // Set MUX pins to select sensor 2
    // B13 Left
    digitalWrite(MUX_A, HIGH);
    1728:	8c e2       	ldi	r24, 0x2C	; 44
    172a:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <digitalWrite>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1715
    digitalWrite(MUX_B, HIGH);
    172e:	61 e0       	ldi	r22, 0x01	; 1
    1730:	8b e2       	ldi	r24, 0x2B	; 43
    1732:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <digitalWrite>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1716
    digitalWrite(MUX_C, LOW);
    1736:	60 e0       	ldi	r22, 0x00	; 0
    1738:	c4 cf       	rjmp	.-120    	; 0x16c2 <vl(char)+0x26>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1735
  Wire.endTransmission(false);

  // Read distance measurement (2 bytes)
  Wire.requestFrom(VL53L0X_ADDRESS, 2);
  if (Wire.available() >= 2) {
    byte distance_msb = Wire.read();
    173a:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <TwoWire::read() [clone .constprop.16]>
    173e:	d8 2f       	mov	r29, r24
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1736
    byte distance_lsb = Wire.read();
    1740:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <TwoWire::read() [clone .constprop.16]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1737
    vl_dis = ((unsigned int)distance_msb << 8) | distance_lsb;
    1744:	20 e0       	ldi	r18, 0x00	; 0
    1746:	3d 2f       	mov	r19, r29
    1748:	a9 01       	movw	r20, r18
    174a:	48 2b       	or	r20, r24
    174c:	ca 01       	movw	r24, r20
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1741
  }

  // Your additional processing logic here
  if(vl_dis==20) {delay(10);return vl_double_check(xv);}
    174e:	84 31       	cpi	r24, 0x14	; 20
    1750:	91 05       	cpc	r25, r1
    1752:	39 f7       	brne	.-50     	; 0x1722 <vl(char)+0x86>
    1754:	6a e0       	ldi	r22, 0x0A	; 10
    1756:	70 e0       	ldi	r23, 0x00	; 0
    1758:	80 e0       	ldi	r24, 0x00	; 0
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	0e 94 aa 02 	call	0x554	; 0x554 <delay>
vl_double_check():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1649

  // Select the appropriate sensor
  if (xv == 1) {
    // Set MUX pins to select sensor 1
    // B11 Right
    digitalWrite(MUX_A, LOW);
    1760:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1646
  unsigned int vl_dis = 1;

  // Your pin manipulation logic here if needed

  // Select the appropriate sensor
  if (xv == 1) {
    1762:	c1 30       	cpi	r28, 0x01	; 1
    1764:	09 f4       	brne	.+2      	; 0x1768 <vl(char)+0xcc>
    1766:	47 c0       	rjmp	.+142    	; 0x17f6 <vl(char)+0x15a>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1662
    digitalWrite(MUX_C, HIGH);
  }
  else if (xv == 3) {
    // Set MUX pins to select sensor 2
    // B13 Left
    digitalWrite(MUX_A, HIGH);
    1768:	61 e0       	ldi	r22, 0x01	; 1
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1652
    // Set MUX pins to select sensor 1
    // B11 Right
    digitalWrite(MUX_A, LOW);
    digitalWrite(MUX_B, HIGH);
    digitalWrite(MUX_C, LOW);
  } else if (xv == 2) {
    176a:	c2 30       	cpi	r28, 0x02	; 2
    176c:	09 f0       	breq	.+2      	; 0x1770 <vl(char)+0xd4>
    176e:	43 c0       	rjmp	.+134    	; 0x17f6 <vl(char)+0x15a>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1655
    // Set MUX pins to select sensor 2
    // B13 Left
    digitalWrite(MUX_A, LOW);
    1770:	60 e0       	ldi	r22, 0x00	; 0
    1772:	8c e2       	ldi	r24, 0x2C	; 44
    1774:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <digitalWrite>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1656
    digitalWrite(MUX_B, LOW);
    1778:	60 e0       	ldi	r22, 0x00	; 0
    177a:	8b e2       	ldi	r24, 0x2B	; 43
    177c:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <digitalWrite>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1657
    digitalWrite(MUX_C, HIGH);
    1780:	61 e0       	ldi	r22, 0x01	; 1
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1664
  else if (xv == 3) {
    // Set MUX pins to select sensor 2
    // B13 Left
    digitalWrite(MUX_A, HIGH);
    digitalWrite(MUX_B, HIGH);
    digitalWrite(MUX_C, LOW);
    1782:	8a e2       	ldi	r24, 0x2A	; 42
    1784:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <digitalWrite>
beginTransmission():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:208
  txBufferLength = 0;
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
    1788:	89 e2       	ldi	r24, 0x29	; 41
    178a:	0e 94 44 0a 	call	0x1488	; 0x1488 <TwoWire::beginTransmission(unsigned char) [clone .constprop.11]>
vl_double_check():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1668
  }
  // Send command to start distance measurement
  Wire.beginTransmission(VL53L0X_ADDRESS);
  Wire.write(VL53L0X_REG_SYSRANGE_START);
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	80 e0       	ldi	r24, 0x00	; 0
    1792:	0e 94 02 0b 	call	0x1604	; 0x1604 <TwoWire::write(int) [clone .constprop.23]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1669
  Wire.write(0x01);
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	0e 94 02 0b 	call	0x1604	; 0x1604 <TwoWire::write(int) [clone .constprop.23]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1670
  Wire.endTransmission();
    179e:	0e 94 4e 0a 	call	0x149c	; 0x149c <TwoWire::endTransmission() [clone .constprop.7]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1673

  // Delay for measurement completion
  delay(10);  // Adjust delay if needed
    17a2:	6a e0       	ldi	r22, 0x0A	; 10
    17a4:	70 e0       	ldi	r23, 0x00	; 0
    17a6:	80 e0       	ldi	r24, 0x00	; 0
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	0e 94 aa 02 	call	0x554	; 0x554 <delay>
beginTransmission():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:208
    17ae:	89 e2       	ldi	r24, 0x29	; 41
    17b0:	0e 94 44 0a 	call	0x1488	; 0x1488 <TwoWire::beginTransmission(unsigned char) [clone .constprop.11]>
vl_double_check():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1677

  // Request distance measurement
  Wire.beginTransmission(VL53L0X_ADDRESS);
  Wire.write(VL53L0X_REG_RESULT_RANGE_VAL);
    17b4:	8e e1       	ldi	r24, 0x1E	; 30
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	0e 94 02 0b 	call	0x1604	; 0x1604 <TwoWire::write(int) [clone .constprop.23]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1678
  Wire.endTransmission(false);
    17bc:	80 e0       	ldi	r24, 0x00	; 0
    17be:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <TwoWire::endTransmission(unsigned char) [clone .constprop.12]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1681

  // Read distance measurement (2 bytes)
  Wire.requestFrom(VL53L0X_ADDRESS, 2);
    17c2:	62 e0       	ldi	r22, 0x02	; 2
    17c4:	70 e0       	ldi	r23, 0x00	; 0
    17c6:	89 e2       	ldi	r24, 0x29	; 41
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	0e 94 07 0b 	call	0x160e	; 0x160e <TwoWire::requestFrom(int, int) [clone .constprop.8]>
available():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:292
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
    17ce:	80 91 dc 08 	lds	r24, 0x08DC	; 0x8008dc <TwoWire::rxBufferLength>
    17d2:	90 91 dd 08 	lds	r25, 0x08DD	; 0x8008dd <TwoWire::rxBufferIndex>
    17d6:	89 1b       	sub	r24, r25
    17d8:	99 0b       	sbc	r25, r25
vl_double_check():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1682
  if (Wire.available() >= 2) {
    17da:	02 97       	sbiw	r24, 0x02	; 2
    17dc:	0c f4       	brge	.+2      	; 0x17e0 <vl(char)+0x144>
    17de:	9f cf       	rjmp	.-194    	; 0x171e <vl(char)+0x82>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1683
    byte distance_msb = Wire.read();
    17e0:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <TwoWire::read() [clone .constprop.16]>
    17e4:	c8 2f       	mov	r28, r24
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1684
    byte distance_lsb = Wire.read();
    17e6:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <TwoWire::read() [clone .constprop.16]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1685
    vl_dis = ((unsigned int)distance_msb << 8) | distance_lsb;
    17ea:	20 e0       	ldi	r18, 0x00	; 0
    17ec:	3c 2f       	mov	r19, r28
    17ee:	a9 01       	movw	r20, r18
    17f0:	48 2b       	or	r20, r24
    17f2:	ca 01       	movw	r24, r20
    17f4:	96 cf       	rjmp	.-212    	; 0x1722 <vl(char)+0x86>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1662
    digitalWrite(MUX_C, HIGH);
  }
  else if (xv == 3) {
    // Set MUX pins to select sensor 2
    // B13 Left
    digitalWrite(MUX_A, HIGH);
    17f6:	8c e2       	ldi	r24, 0x2C	; 44
    17f8:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <digitalWrite>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1663
    digitalWrite(MUX_B, HIGH);
    17fc:	61 e0       	ldi	r22, 0x01	; 1
    17fe:	8b e2       	ldi	r24, 0x2B	; 43
    1800:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <digitalWrite>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1664
    digitalWrite(MUX_C, LOW);
    1804:	60 e0       	ldi	r22, 0x00	; 0
    1806:	bd cf       	rjmp	.-134    	; 0x1782 <vl(char)+0xe6>

00001808 <cmps(int)>:
cmps():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1557
      break;
    }
  }
}

int cmps(int select) {
    1808:	bf 92       	push	r11
    180a:	cf 92       	push	r12
    180c:	df 92       	push	r13
    180e:	ef 92       	push	r14
    1810:	ff 92       	push	r15
    1812:	0f 93       	push	r16
    1814:	1f 93       	push	r17
    1816:	cf 93       	push	r28
    1818:	df 93       	push	r29
    181a:	8c 01       	movw	r16, r24
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1560
  int degree, pi, rol;

    digitalWrite(MUX_A, HIGH);//switching the multiplaxer
    181c:	61 e0       	ldi	r22, 0x01	; 1
    181e:	8c e2       	ldi	r24, 0x2C	; 44
    1820:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <digitalWrite>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1561
    digitalWrite(MUX_B, HIGH);
    1824:	61 e0       	ldi	r22, 0x01	; 1
    1826:	8b e2       	ldi	r24, 0x2B	; 43
    1828:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <digitalWrite>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1562
    digitalWrite(MUX_C, LOW);
    182c:	60 e0       	ldi	r22, 0x00	; 0
    182e:	8a e2       	ldi	r24, 0x2A	; 42
    1830:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <digitalWrite>
beginTransmission():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:208
  txBufferLength = 0;
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
    1834:	80 e6       	ldi	r24, 0x60	; 96
    1836:	0e 94 44 0a 	call	0x1488	; 0x1488 <TwoWire::beginTransmission(unsigned char) [clone .constprop.11]>
cmps():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1565

  Wire.beginTransmission(cmps_address);
  Wire.write(0x02); // Register address for desired data (adjust as needed)
    183a:	82 e0       	ldi	r24, 0x02	; 2
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	0e 94 02 0b 	call	0x1604	; 0x1604 <TwoWire::write(int) [clone .constprop.23]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1566
  Wire.endTransmission();
    1842:	0e 94 4e 0a 	call	0x149c	; 0x149c <TwoWire::endTransmission() [clone .constprop.7]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1568

  Wire.requestFrom(cmps_address, 4); // Request 4 bytes of data
    1846:	64 e0       	ldi	r22, 0x04	; 4
    1848:	70 e0       	ldi	r23, 0x00	; 0
    184a:	80 e6       	ldi	r24, 0x60	; 96
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	0e 94 07 0b 	call	0x160e	; 0x160e <TwoWire::requestFrom(int, int) [clone .constprop.8]>
available():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:292
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
    1852:	80 91 dc 08 	lds	r24, 0x08DC	; 0x8008dc <TwoWire::rxBufferLength>
    1856:	90 91 dd 08 	lds	r25, 0x08DD	; 0x8008dd <TwoWire::rxBufferIndex>
    185a:	89 1b       	sub	r24, r25
    185c:	99 0b       	sbc	r25, r25
cmps():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1570

  if (Wire.available() >= 4) {
    185e:	04 97       	sbiw	r24, 0x04	; 4
    1860:	94 f1       	brlt	.+100    	; 0x18c6 <cmps(int)+0xbe>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1571
    degree = Wire.read();
    1862:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <TwoWire::read() [clone .constprop.16]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1572
    degree = (degree << 8) | Wire.read();
    1866:	d8 2f       	mov	r29, r24
    1868:	20 e0       	ldi	r18, 0x00	; 0
    186a:	c2 2f       	mov	r28, r18
    186c:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <TwoWire::read() [clone .constprop.16]>
    1870:	8c 2b       	or	r24, r28
    1872:	9d 2b       	or	r25, r29
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1573
    degree /= 10; // Adjust scaling if needed
    1874:	6a e0       	ldi	r22, 0x0A	; 10
    1876:	70 e0       	ldi	r23, 0x00	; 0
    1878:	0e 94 8f 2d 	call	0x5b1e	; 0x5b1e <__divmodhi4>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1574
    degree -= DN; // Replace DN with your offset value (if applicable)
    187c:	80 91 81 08 	lds	r24, 0x0881	; 0x800881 <DN>
    1880:	90 91 82 08 	lds	r25, 0x0882	; 0x800882 <DN+0x1>
    1884:	eb 01       	movw	r28, r22
    1886:	c8 1b       	sub	r28, r24
    1888:	d9 0b       	sbc	r29, r25
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1576

    pi = Wire.read();
    188a:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <TwoWire::read() [clone .constprop.16]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1577
    pi = pi * 180 / 255;
    188e:	24 eb       	ldi	r18, 0xB4	; 180
    1890:	d2 2e       	mov	r13, r18
    1892:	9c 01       	movw	r18, r24
    1894:	d2 9e       	mul	r13, r18
    1896:	c0 01       	movw	r24, r0
    1898:	d3 9e       	mul	r13, r19
    189a:	90 0d       	add	r25, r0
    189c:	11 24       	eor	r1, r1
    189e:	ee 24       	eor	r14, r14
    18a0:	ea 94       	dec	r14
    18a2:	f1 2c       	mov	r15, r1
    18a4:	b7 01       	movw	r22, r14
    18a6:	0e 94 8f 2d 	call	0x5b1e	; 0x5b1e <__divmodhi4>
    18aa:	b6 2e       	mov	r11, r22
    18ac:	c7 2e       	mov	r12, r23
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1579

    rol = Wire.read();
    18ae:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <TwoWire::read() [clone .constprop.16]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1580
    rol = rol * 180 / 255;
    18b2:	9c 01       	movw	r18, r24
    18b4:	d2 9e       	mul	r13, r18
    18b6:	c0 01       	movw	r24, r0
    18b8:	d3 9e       	mul	r13, r19
    18ba:	90 0d       	add	r25, r0
    18bc:	11 24       	eor	r1, r1
    18be:	b7 01       	movw	r22, r14
    18c0:	0e 94 8f 2d 	call	0x5b1e	; 0x5b1e <__divmodhi4>
    18c4:	7b 01       	movw	r14, r22
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1583
  }

  if (degree < 0) {
    18c6:	d7 ff       	sbrs	r29, 7
    18c8:	02 c0       	rjmp	.+4      	; 0x18ce <cmps(int)+0xc6>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1584
    degree += 360;
    18ca:	c8 59       	subi	r28, 0x98	; 152
    18cc:	de 4f       	sbci	r29, 0xFE	; 254
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1588
  }


  if (select == 1) {
    18ce:	01 30       	cpi	r16, 0x01	; 1
    18d0:	11 05       	cpc	r17, r1
    18d2:	29 f0       	breq	.+10     	; 0x18de <cmps(int)+0xd6>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1590
    return degree;
  } else if (select == 2) {
    18d4:	02 30       	cpi	r16, 0x02	; 2
    18d6:	11 05       	cpc	r17, r1
    18d8:	69 f0       	breq	.+26     	; 0x18f4 <cmps(int)+0xec>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1593
    return pi;
  } else {
    return rol;
    18da:	ce 2d       	mov	r28, r14
    18dc:	df 2d       	mov	r29, r15
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1595
  }
}
    18de:	ce 01       	movw	r24, r28
    18e0:	df 91       	pop	r29
    18e2:	cf 91       	pop	r28
    18e4:	1f 91       	pop	r17
    18e6:	0f 91       	pop	r16
    18e8:	ff 90       	pop	r15
    18ea:	ef 90       	pop	r14
    18ec:	df 90       	pop	r13
    18ee:	cf 90       	pop	r12
    18f0:	bf 90       	pop	r11
    18f2:	08 95       	ret
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1591


  if (select == 1) {
    return degree;
  } else if (select == 2) {
    return pi;
    18f4:	cb 2d       	mov	r28, r11
    18f6:	dc 2d       	mov	r29, r12
    18f8:	f2 cf       	rjmp	.-28     	; 0x18de <cmps(int)+0xd6>

000018fa <EEPROM_read_int(int)>:
EEPROM_read_int():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:193
void EEPROM_write_int(int address, int number) {
  EEPROM.write(address, number >> 8);
  EEPROM.write(address + 1, number & 0xFF);
}

int EEPROM_read_int(int address) {
    18fa:	0f 93       	push	r16
    18fc:	1f 93       	push	r17
    18fe:	cf 93       	push	r28
    1900:	8c 01       	movw	r16, r24
operator*():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\EEPROM\src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    1902:	0e 94 9a 2b 	call	0x5734	; 0x5734 <eeprom_read_byte>
    1906:	c8 2f       	mov	r28, r24
    1908:	c8 01       	movw	r24, r16
    190a:	01 96       	adiw	r24, 0x01	; 1
    190c:	0e 94 9a 2b 	call	0x5734	; 0x5734 <eeprom_read_byte>
EEPROM_read_int():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:195
  int result = 0;
  result = (EEPROM.read(address) << 8) + EEPROM.read(address + 1);
    1910:	2c 2f       	mov	r18, r28
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	32 2f       	mov	r19, r18
    1916:	22 27       	eor	r18, r18
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:197
  return result;
}
    1918:	82 0f       	add	r24, r18
    191a:	93 2f       	mov	r25, r19
    191c:	91 1d       	adc	r25, r1
    191e:	cf 91       	pop	r28
    1920:	1f 91       	pop	r17
    1922:	0f 91       	pop	r16
    1924:	08 95       	ret

00001926 <menu_motor()>:
menu_motor():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:942
}

void menu_motor(void) {
  static char page = 1, last_page = 8;
  signed int spd = 0;
  lcd.clear();
    1926:	0e 94 45 05 	call	0xa8a	; 0xa8a <LiquidCrystal::clear() [clone .constprop.34]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:943
  int basket_up = EEPROM_read_int(basket_up_address);
    192a:	84 ea       	ldi	r24, 0xA4	; 164
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    1932:	5c 01       	movw	r10, r24
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:944
  int basket_normal = EEPROM_read_int(basket_normal_address);
    1934:	86 ea       	ldi	r24, 0xA6	; 166
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    193c:	6c 01       	movw	r12, r24
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:945
  int arm_normal = EEPROM_read_int(arm_normal_address);
    193e:	88 ea       	ldi	r24, 0xA8	; 168
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    1946:	4c 01       	movw	r8, r24
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:946
  int arm_down = EEPROM_read_int(arm_down_address);
    1948:	8a ea       	ldi	r24, 0xAA	; 170
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    1950:	3c 01       	movw	r6, r24
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:947
  int arm_dropping = EEPROM_read_int(arm_dropping_address);
    1952:	8c ea       	ldi	r24, 0xAC	; 172
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    195a:	2c 01       	movw	r4, r24
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:948
  int gripper_close = EEPROM_read_int(gripper_close_address);
    195c:	8e ea       	ldi	r24, 0xAE	; 174
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    1964:	7c 01       	movw	r14, r24
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:949
  int gripper_open = EEPROM_read_int(gripper_open_address);
    1966:	80 eb       	ldi	r24, 0xB0	; 176
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    196e:	8c 01       	movw	r16, r24
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:941
  }
}

void menu_motor(void) {
  static char page = 1, last_page = 8;
  signed int spd = 0;
    1970:	d0 e0       	ldi	r29, 0x00	; 0
    1972:	c0 e0       	ldi	r28, 0x00	; 0
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1110
          gripper_close -= 5;
      } 
    }else if (page == 8)  // XL Gripper open 30 and 31
    {
      lcd.setCursor(0, 0);
      lcd.printf("gripper_open %d %4d", 10, gripper_open);
    1974:	84 e7       	ldi	r24, 0x74	; 116
    1976:	28 2e       	mov	r2, r24
    1978:	8a e0       	ldi	r24, 0x0A	; 10
    197a:	38 2e       	mov	r3, r24
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:952
  int arm_dropping = EEPROM_read_int(arm_dropping_address);
  int gripper_close = EEPROM_read_int(gripper_close_address);
  int gripper_open = EEPROM_read_int(gripper_open_address);

  while (1) {
    if (next_page == 0) {
    197c:	88 e0       	ldi	r24, 0x08	; 8
    197e:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    1982:	89 2b       	or	r24, r25
    1984:	a9 f4       	brne	.+42     	; 0x19b0 <menu_motor()+0x8a>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:953
      while (next_page == 0)
    1986:	88 e0       	ldi	r24, 0x08	; 8
    1988:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    198c:	89 2b       	or	r24, r25
    198e:	d9 f3       	breq	.-10     	; 0x1986 <menu_motor()+0x60>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:955
        ;
      delay(50);
    1990:	62 e3       	ldi	r22, 0x32	; 50
    1992:	70 e0       	ldi	r23, 0x00	; 0
    1994:	80 e0       	ldi	r24, 0x00	; 0
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	0e 94 aa 02 	call	0x554	; 0x554 <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:956
      page++;
    199c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    19a0:	8f 5f       	subi	r24, 0xFF	; 255
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:957
      if (page > last_page)
    19a2:	89 30       	cpi	r24, 0x09	; 9
    19a4:	0c f0       	brlt	.+2      	; 0x19a8 <menu_motor()+0x82>
    19a6:	59 c0       	rjmp	.+178    	; 0x1a5a <menu_motor()+0x134>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:958
        page = 1;
    19a8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:959
      lcd.clear();
    19ac:	0e 94 45 05 	call	0xa8a	; 0xa8a <LiquidCrystal::clear() [clone .constprop.34]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:962
    }

    if (previuse_page == 0) {
    19b0:	89 e0       	ldi	r24, 0x09	; 9
    19b2:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    19b6:	89 2b       	or	r24, r25
    19b8:	a9 f4       	brne	.+42     	; 0x19e4 <menu_motor()+0xbe>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:963
      while (previuse_page == 0)
    19ba:	89 e0       	ldi	r24, 0x09	; 9
    19bc:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    19c0:	89 2b       	or	r24, r25
    19c2:	d9 f3       	breq	.-10     	; 0x19ba <menu_motor()+0x94>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:965
        ;
      delay(50);
    19c4:	62 e3       	ldi	r22, 0x32	; 50
    19c6:	70 e0       	ldi	r23, 0x00	; 0
    19c8:	80 e0       	ldi	r24, 0x00	; 0
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	0e 94 aa 02 	call	0x554	; 0x554 <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:966
      page--;
    19d0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    19d4:	81 50       	subi	r24, 0x01	; 1
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:967
      if (page < 1)
    19d6:	18 16       	cp	r1, r24
    19d8:	0c f0       	brlt	.+2      	; 0x19dc <menu_motor()+0xb6>
    19da:	41 c0       	rjmp	.+130    	; 0x1a5e <menu_motor()+0x138>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:968
        page = last_page;
    19dc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:969
      lcd.clear();
    19e0:	0e 94 45 05 	call	0xa8a	; 0xa8a <LiquidCrystal::clear() [clone .constprop.34]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:972
    }

    if (page == 1)  // go
    19e4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    19e8:	81 30       	cpi	r24, 0x01	; 1
    19ea:	09 f0       	breq	.+2      	; 0x19ee <menu_motor()+0xc8>
    19ec:	44 c0       	rjmp	.+136    	; 0x1a76 <menu_motor()+0x150>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:974
    {
      lcd.setCursor(0, 0);
    19ee:	60 e0       	ldi	r22, 0x00	; 0
    19f0:	80 e0       	ldi	r24, 0x00	; 0
    19f2:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:975
      lcd.printf("go(%4d,%4d) ", spd, spd);
    19f6:	df 93       	push	r29
    19f8:	cf 93       	push	r28
    19fa:	df 93       	push	r29
    19fc:	cf 93       	push	r28
    19fe:	86 e3       	ldi	r24, 0x36	; 54
    1a00:	93 e0       	ldi	r25, 0x03	; 3
    1a02:	9f 93       	push	r25
    1a04:	8f 93       	push	r24
    1a06:	3f 92       	push	r3
    1a08:	2f 92       	push	r2
    1a0a:	0e 94 df 06 	call	0xdbe	; 0xdbe <Print::printf(char const*, ...) [clone .constprop.22]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:976
      if (increase == 0) {
    1a0e:	8a e0       	ldi	r24, 0x0A	; 10
    1a10:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    1a14:	2d b7       	in	r18, 0x3d	; 61
    1a16:	3e b7       	in	r19, 0x3e	; 62
    1a18:	28 5f       	subi	r18, 0xF8	; 248
    1a1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a1c:	0f b6       	in	r0, 0x3f	; 63
    1a1e:	f8 94       	cli
    1a20:	3e bf       	out	0x3e, r19	; 62
    1a22:	0f be       	out	0x3f, r0	; 63
    1a24:	2d bf       	out	0x3d, r18	; 61
    1a26:	89 2b       	or	r24, r25
    1a28:	e1 f4       	brne	.+56     	; 0x1a62 <menu_motor()+0x13c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:977
        spd += 50;
    1a2a:	e2 96       	adiw	r28, 0x32	; 50
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:981
        delay(400);
      } else if (decrease == 0) {
        spd -= 50;
        delay(400);
    1a2c:	60 e9       	ldi	r22, 0x90	; 144
    1a2e:	71 e0       	ldi	r23, 0x01	; 1
    1a30:	80 e0       	ldi	r24, 0x00	; 0
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	0e 94 aa 02 	call	0x554	; 0x554 <delay>
    1a38:	c1 30       	cpi	r28, 0x01	; 1
    1a3a:	3f ef       	ldi	r19, 0xFF	; 255
    1a3c:	d3 07       	cpc	r29, r19
    1a3e:	14 f4       	brge	.+4      	; 0x1a44 <menu_motor()+0x11e>
    1a40:	c1 e0       	ldi	r28, 0x01	; 1
    1a42:	df ef       	ldi	r29, 0xFF	; 255
    1a44:	cf 3f       	cpi	r28, 0xFF	; 255
    1a46:	d1 05       	cpc	r29, r1
    1a48:	19 f0       	breq	.+6      	; 0x1a50 <menu_motor()+0x12a>
    1a4a:	14 f0       	brlt	.+4      	; 0x1a50 <menu_motor()+0x12a>
    1a4c:	cf ef       	ldi	r28, 0xFF	; 255
    1a4e:	d0 e0       	ldi	r29, 0x00	; 0
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:990
      if (spd > 255)
        spd = 255;
      if (spd < -255)
        spd = -255;

      go(spd, spd);
    1a50:	be 01       	movw	r22, r28
    1a52:	ce 01       	movw	r24, r28
    1a54:	0e 94 56 06 	call	0xcac	; 0xcac <go(int, int)>
    1a58:	91 cf       	rjmp	.-222    	; 0x197c <menu_motor()+0x56>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:958
      while (next_page == 0)
        ;
      delay(50);
      page++;
      if (page > last_page)
        page = 1;
    1a5a:	81 e0       	ldi	r24, 0x01	; 1
    1a5c:	a5 cf       	rjmp	.-182    	; 0x19a8 <menu_motor()+0x82>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:968
      while (previuse_page == 0)
        ;
      delay(50);
      page--;
      if (page < 1)
        page = last_page;
    1a5e:	88 e0       	ldi	r24, 0x08	; 8
    1a60:	bd cf       	rjmp	.-134    	; 0x19dc <menu_motor()+0xb6>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:979
      lcd.setCursor(0, 0);
      lcd.printf("go(%4d,%4d) ", spd, spd);
      if (increase == 0) {
        spd += 50;
        delay(400);
      } else if (decrease == 0) {
    1a62:	8b e0       	ldi	r24, 0x0B	; 11
    1a64:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    1a68:	89 2b       	or	r24, r25
    1a6a:	11 f4       	brne	.+4      	; 0x1a70 <menu_motor()+0x14a>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:980
        spd -= 50;
    1a6c:	e2 97       	sbiw	r28, 0x32	; 50
    1a6e:	de cf       	rjmp	.-68     	; 0x1a2c <menu_motor()+0x106>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:983
        delay(400);
      } else
        spd = 0;
    1a70:	d0 e0       	ldi	r29, 0x00	; 0
    1a72:	c0 e0       	ldi	r28, 0x00	; 0
    1a74:	ed cf       	rjmp	.-38     	; 0x1a50 <menu_motor()+0x12a>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:992
      if (spd < -255)
        spd = -255;

      go(spd, spd);
    } 
    else if (page == 2)  // AX Basket ID=10
    1a76:	82 30       	cpi	r24, 0x02	; 2
    1a78:	09 f0       	breq	.+2      	; 0x1a7c <menu_motor()+0x156>
    1a7a:	53 c0       	rjmp	.+166    	; 0x1b22 <menu_motor()+0x1fc>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:994
    {
      lcd.setCursor(0, 0);
    1a7c:	60 e0       	ldi	r22, 0x00	; 0
    1a7e:	80 e0       	ldi	r24, 0x00	; 0
    1a80:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:995
      lcd.printf("Basket up %d %4d", 10, basket_up);
    1a84:	bf 92       	push	r11
    1a86:	af 92       	push	r10
    1a88:	1f 92       	push	r1
    1a8a:	8a e0       	ldi	r24, 0x0A	; 10
    1a8c:	8f 93       	push	r24
    1a8e:	83 e4       	ldi	r24, 0x43	; 67
    1a90:	93 e0       	ldi	r25, 0x03	; 3
    1a92:	9f 93       	push	r25
    1a94:	8f 93       	push	r24
    1a96:	3f 92       	push	r3
    1a98:	2f 92       	push	r2
    1a9a:	0e 94 df 06 	call	0xdbe	; 0xdbe <Print::printf(char const*, ...) [clone .constprop.22]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:996
      if (start == 0) {
    1a9e:	86 e0       	ldi	r24, 0x06	; 6
    1aa0:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    1aa4:	2d b7       	in	r18, 0x3d	; 61
    1aa6:	3e b7       	in	r19, 0x3e	; 62
    1aa8:	28 5f       	subi	r18, 0xF8	; 248
    1aaa:	3f 4f       	sbci	r19, 0xFF	; 255
    1aac:	0f b6       	in	r0, 0x3f	; 63
    1aae:	f8 94       	cli
    1ab0:	3e bf       	out	0x3e, r19	; 62
    1ab2:	0f be       	out	0x3f, r0	; 63
    1ab4:	2d bf       	out	0x3d, r18	; 61
    1ab6:	89 2b       	or	r24, r25
    1ab8:	51 f4       	brne	.+20     	; 0x1ace <menu_motor()+0x1a8>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:997
        EEPROM_write_int(basket_up_address, basket_up);
    1aba:	b5 01       	movw	r22, r10
    1abc:	84 ea       	ldi	r24, 0xA4	; 164
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:998
        AX(10, basket_up, 150);
    1ac4:	b5 01       	movw	r22, r10
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1018
    {
      lcd.setCursor(0, 0);
      lcd.printf("Basket normal %d %4d", 10, basket_normal);
      if (start == 0) {
        EEPROM_write_int(basket_normal_address, basket_normal);
        AX(10, basket_normal, 150);
    1ac6:	8a e0       	ldi	r24, 0x0A	; 10
    1ac8:	0e 94 c2 0a 	call	0x1584	; 0x1584 <AX(char, int, int) [clone .constprop.24]>
    1acc:	57 cf       	rjmp	.-338    	; 0x197c <menu_motor()+0x56>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1001
      if (start == 0) {
        EEPROM_write_int(basket_up_address, basket_up);
        AX(10, basket_up, 150);
        
      }
      else if (increase == 0) {
    1ace:	8a e0       	ldi	r24, 0x0A	; 10
    1ad0:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    1ad4:	89 2b       	or	r24, r25
    1ad6:	81 f4       	brne	.+32     	; 0x1af8 <menu_motor()+0x1d2>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1002
        delay(50);
    1ad8:	62 e3       	ldi	r22, 0x32	; 50
    1ada:	70 e0       	ldi	r23, 0x00	; 0
    1adc:	80 e0       	ldi	r24, 0x00	; 0
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	0e 94 aa 02 	call	0x554	; 0x554 <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1003
        if (basket_up < 520)
    1ae4:	38 e0       	ldi	r19, 0x08	; 8
    1ae6:	a3 16       	cp	r10, r19
    1ae8:	32 e0       	ldi	r19, 0x02	; 2
    1aea:	b3 06       	cpc	r11, r19
    1aec:	0c f0       	brlt	.+2      	; 0x1af0 <menu_motor()+0x1ca>
    1aee:	46 cf       	rjmp	.-372    	; 0x197c <menu_motor()+0x56>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1004
          basket_up += 5;
    1af0:	85 e0       	ldi	r24, 0x05	; 5
    1af2:	a8 0e       	add	r10, r24
    1af4:	b1 1c       	adc	r11, r1
    1af6:	42 cf       	rjmp	.-380    	; 0x197c <menu_motor()+0x56>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1005
      } else if (decrease == 0) {
    1af8:	8b e0       	ldi	r24, 0x0B	; 11
    1afa:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    1afe:	89 2b       	or	r24, r25
    1b00:	09 f0       	breq	.+2      	; 0x1b04 <menu_motor()+0x1de>
    1b02:	3c cf       	rjmp	.-392    	; 0x197c <menu_motor()+0x56>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1006
        delay(50);
    1b04:	62 e3       	ldi	r22, 0x32	; 50
    1b06:	70 e0       	ldi	r23, 0x00	; 0
    1b08:	80 e0       	ldi	r24, 0x00	; 0
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	0e 94 aa 02 	call	0x554	; 0x554 <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1008

        if (basket_up > 250)
    1b10:	9b ef       	ldi	r25, 0xFB	; 251
    1b12:	a9 16       	cp	r10, r25
    1b14:	b1 04       	cpc	r11, r1
    1b16:	0c f4       	brge	.+2      	; 0x1b1a <menu_motor()+0x1f4>
    1b18:	31 cf       	rjmp	.-414    	; 0x197c <menu_motor()+0x56>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1009
          basket_up -= 5;
    1b1a:	25 e0       	ldi	r18, 0x05	; 5
    1b1c:	a2 1a       	sub	r10, r18
    1b1e:	b1 08       	sbc	r11, r1
    1b20:	2d cf       	rjmp	.-422    	; 0x197c <menu_motor()+0x56>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1012
      } 

    } else if (page == 3)  // AX Basket Normal ID=10
    1b22:	83 30       	cpi	r24, 0x03	; 3
    1b24:	09 f0       	breq	.+2      	; 0x1b28 <menu_motor()+0x202>
    1b26:	50 c0       	rjmp	.+160    	; 0x1bc8 <menu_motor()+0x2a2>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1014
    {
      lcd.setCursor(0, 0);
    1b28:	60 e0       	ldi	r22, 0x00	; 0
    1b2a:	80 e0       	ldi	r24, 0x00	; 0
    1b2c:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1015
      lcd.printf("Basket normal %d %4d", 10, basket_normal);
    1b30:	df 92       	push	r13
    1b32:	cf 92       	push	r12
    1b34:	1f 92       	push	r1
    1b36:	8a e0       	ldi	r24, 0x0A	; 10
    1b38:	8f 93       	push	r24
    1b3a:	84 e5       	ldi	r24, 0x54	; 84
    1b3c:	93 e0       	ldi	r25, 0x03	; 3
    1b3e:	9f 93       	push	r25
    1b40:	8f 93       	push	r24
    1b42:	3f 92       	push	r3
    1b44:	2f 92       	push	r2
    1b46:	0e 94 df 06 	call	0xdbe	; 0xdbe <Print::printf(char const*, ...) [clone .constprop.22]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1016
      if (start == 0) {
    1b4a:	86 e0       	ldi	r24, 0x06	; 6
    1b4c:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    1b50:	2d b7       	in	r18, 0x3d	; 61
    1b52:	3e b7       	in	r19, 0x3e	; 62
    1b54:	28 5f       	subi	r18, 0xF8	; 248
    1b56:	3f 4f       	sbci	r19, 0xFF	; 255
    1b58:	0f b6       	in	r0, 0x3f	; 63
    1b5a:	f8 94       	cli
    1b5c:	3e bf       	out	0x3e, r19	; 62
    1b5e:	0f be       	out	0x3f, r0	; 63
    1b60:	2d bf       	out	0x3d, r18	; 61
    1b62:	89 2b       	or	r24, r25
    1b64:	39 f4       	brne	.+14     	; 0x1b74 <menu_motor()+0x24e>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1017
        EEPROM_write_int(basket_normal_address, basket_normal);
    1b66:	b6 01       	movw	r22, r12
    1b68:	86 ea       	ldi	r24, 0xA6	; 166
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1018
        AX(10, basket_normal, 150);
    1b70:	b6 01       	movw	r22, r12
    1b72:	a9 cf       	rjmp	.-174    	; 0x1ac6 <menu_motor()+0x1a0>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1020
      }
      else if (increase == 0) {
    1b74:	8a e0       	ldi	r24, 0x0A	; 10
    1b76:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    1b7a:	89 2b       	or	r24, r25
    1b7c:	81 f4       	brne	.+32     	; 0x1b9e <menu_motor()+0x278>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1021
        delay(50);
    1b7e:	62 e3       	ldi	r22, 0x32	; 50
    1b80:	70 e0       	ldi	r23, 0x00	; 0
    1b82:	80 e0       	ldi	r24, 0x00	; 0
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	0e 94 aa 02 	call	0x554	; 0x554 <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1022
        if (basket_normal < 520)
    1b8a:	38 e0       	ldi	r19, 0x08	; 8
    1b8c:	c3 16       	cp	r12, r19
    1b8e:	32 e0       	ldi	r19, 0x02	; 2
    1b90:	d3 06       	cpc	r13, r19
    1b92:	0c f0       	brlt	.+2      	; 0x1b96 <menu_motor()+0x270>
    1b94:	f3 ce       	rjmp	.-538    	; 0x197c <menu_motor()+0x56>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1023
          basket_normal += 5;
    1b96:	85 e0       	ldi	r24, 0x05	; 5
    1b98:	c8 0e       	add	r12, r24
    1b9a:	d1 1c       	adc	r13, r1
    1b9c:	ef ce       	rjmp	.-546    	; 0x197c <menu_motor()+0x56>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1024
      } else if (decrease == 0) {
    1b9e:	8b e0       	ldi	r24, 0x0B	; 11
    1ba0:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    1ba4:	89 2b       	or	r24, r25
    1ba6:	09 f0       	breq	.+2      	; 0x1baa <menu_motor()+0x284>
    1ba8:	e9 ce       	rjmp	.-558    	; 0x197c <menu_motor()+0x56>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1025
        delay(50);
    1baa:	62 e3       	ldi	r22, 0x32	; 50
    1bac:	70 e0       	ldi	r23, 0x00	; 0
    1bae:	80 e0       	ldi	r24, 0x00	; 0
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	0e 94 aa 02 	call	0x554	; 0x554 <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1027

        if (basket_normal > 250)
    1bb6:	9b ef       	ldi	r25, 0xFB	; 251
    1bb8:	c9 16       	cp	r12, r25
    1bba:	d1 04       	cpc	r13, r1
    1bbc:	0c f4       	brge	.+2      	; 0x1bc0 <menu_motor()+0x29a>
    1bbe:	de ce       	rjmp	.-580    	; 0x197c <menu_motor()+0x56>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1028
          basket_normal -= 5;
    1bc0:	25 e0       	ldi	r18, 0x05	; 5
    1bc2:	c2 1a       	sub	r12, r18
    1bc4:	d1 08       	sbc	r13, r1
    1bc6:	da ce       	rjmp	.-588    	; 0x197c <menu_motor()+0x56>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1031
      } 

    }else if (page == 4)  // AX Arm Normal ID=11
    1bc8:	84 30       	cpi	r24, 0x04	; 4
    1bca:	09 f0       	breq	.+2      	; 0x1bce <menu_motor()+0x2a8>
    1bcc:	53 c0       	rjmp	.+166    	; 0x1c74 <menu_motor()+0x34e>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1033
    {
      lcd.setCursor(0, 0);
    1bce:	60 e0       	ldi	r22, 0x00	; 0
    1bd0:	80 e0       	ldi	r24, 0x00	; 0
    1bd2:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1034
      lcd.printf("arm normal %d %4d", 10, arm_normal);
    1bd6:	9f 92       	push	r9
    1bd8:	8f 92       	push	r8
    1bda:	1f 92       	push	r1
    1bdc:	8a e0       	ldi	r24, 0x0A	; 10
    1bde:	8f 93       	push	r24
    1be0:	89 e6       	ldi	r24, 0x69	; 105
    1be2:	93 e0       	ldi	r25, 0x03	; 3
    1be4:	9f 93       	push	r25
    1be6:	8f 93       	push	r24
    1be8:	3f 92       	push	r3
    1bea:	2f 92       	push	r2
    1bec:	0e 94 df 06 	call	0xdbe	; 0xdbe <Print::printf(char const*, ...) [clone .constprop.22]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1035
      if (start == 0) {
    1bf0:	86 e0       	ldi	r24, 0x06	; 6
    1bf2:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    1bf6:	2d b7       	in	r18, 0x3d	; 61
    1bf8:	3e b7       	in	r19, 0x3e	; 62
    1bfa:	28 5f       	subi	r18, 0xF8	; 248
    1bfc:	3f 4f       	sbci	r19, 0xFF	; 255
    1bfe:	0f b6       	in	r0, 0x3f	; 63
    1c00:	f8 94       	cli
    1c02:	3e bf       	out	0x3e, r19	; 62
    1c04:	0f be       	out	0x3f, r0	; 63
    1c06:	2d bf       	out	0x3d, r18	; 61
    1c08:	89 2b       	or	r24, r25
    1c0a:	51 f4       	brne	.+20     	; 0x1c20 <menu_motor()+0x2fa>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1036
        AX(11, arm_normal, 150);
    1c0c:	b4 01       	movw	r22, r8
    1c0e:	8b e0       	ldi	r24, 0x0B	; 11
    1c10:	0e 94 c2 0a 	call	0x1584	; 0x1584 <AX(char, int, int) [clone .constprop.24]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1037
        EEPROM_write_int(arm_normal_address, arm_normal);
    1c14:	b4 01       	movw	r22, r8
    1c16:	88 ea       	ldi	r24, 0xA8	; 168
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
    1c1e:	ae ce       	rjmp	.-676    	; 0x197c <menu_motor()+0x56>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1039
      }
      else if (increase == 0) {
    1c20:	8a e0       	ldi	r24, 0x0A	; 10
    1c22:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    1c26:	89 2b       	or	r24, r25
    1c28:	81 f4       	brne	.+32     	; 0x1c4a <menu_motor()+0x324>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1040
        delay(50);
    1c2a:	62 e3       	ldi	r22, 0x32	; 50
    1c2c:	70 e0       	ldi	r23, 0x00	; 0
    1c2e:	80 e0       	ldi	r24, 0x00	; 0
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	0e 94 aa 02 	call	0x554	; 0x554 <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1041
        if (arm_normal < 800)
    1c36:	30 e2       	ldi	r19, 0x20	; 32
    1c38:	83 16       	cp	r8, r19
    1c3a:	33 e0       	ldi	r19, 0x03	; 3
    1c3c:	93 06       	cpc	r9, r19
    1c3e:	0c f0       	brlt	.+2      	; 0x1c42 <menu_motor()+0x31c>
    1c40:	9d ce       	rjmp	.-710    	; 0x197c <menu_motor()+0x56>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1042
          arm_normal += 5;
    1c42:	85 e0       	ldi	r24, 0x05	; 5
    1c44:	88 0e       	add	r8, r24
    1c46:	91 1c       	adc	r9, r1
    1c48:	99 ce       	rjmp	.-718    	; 0x197c <menu_motor()+0x56>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1043
      } else if (decrease == 0) {
    1c4a:	8b e0       	ldi	r24, 0x0B	; 11
    1c4c:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    1c50:	89 2b       	or	r24, r25
    1c52:	09 f0       	breq	.+2      	; 0x1c56 <menu_motor()+0x330>
    1c54:	93 ce       	rjmp	.-730    	; 0x197c <menu_motor()+0x56>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1044
        delay(50);
    1c56:	62 e3       	ldi	r22, 0x32	; 50
    1c58:	70 e0       	ldi	r23, 0x00	; 0
    1c5a:	80 e0       	ldi	r24, 0x00	; 0
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	0e 94 aa 02 	call	0x554	; 0x554 <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1046

        if (arm_normal > 150)
    1c62:	97 e9       	ldi	r25, 0x97	; 151
    1c64:	89 16       	cp	r8, r25
    1c66:	91 04       	cpc	r9, r1
    1c68:	0c f4       	brge	.+2      	; 0x1c6c <menu_motor()+0x346>
    1c6a:	88 ce       	rjmp	.-752    	; 0x197c <menu_motor()+0x56>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1047
          arm_normal -= 5;
    1c6c:	25 e0       	ldi	r18, 0x05	; 5
    1c6e:	82 1a       	sub	r8, r18
    1c70:	91 08       	sbc	r9, r1
    1c72:	84 ce       	rjmp	.-760    	; 0x197c <menu_motor()+0x56>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1050
      } 

    }else if (page == 5)  // AX Arm down ID=11
    1c74:	85 30       	cpi	r24, 0x05	; 5
    1c76:	09 f0       	breq	.+2      	; 0x1c7a <menu_motor()+0x354>
    1c78:	51 c0       	rjmp	.+162    	; 0x1d1c <menu_motor()+0x3f6>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1052
    {
      lcd.setCursor(0, 0);
    1c7a:	60 e0       	ldi	r22, 0x00	; 0
    1c7c:	80 e0       	ldi	r24, 0x00	; 0
    1c7e:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1053
      lcd.printf("arm_down %d %4d", 10, arm_down);
    1c82:	7f 92       	push	r7
    1c84:	6f 92       	push	r6
    1c86:	1f 92       	push	r1
    1c88:	8a e0       	ldi	r24, 0x0A	; 10
    1c8a:	8f 93       	push	r24
    1c8c:	8b e7       	ldi	r24, 0x7B	; 123
    1c8e:	93 e0       	ldi	r25, 0x03	; 3
    1c90:	9f 93       	push	r25
    1c92:	8f 93       	push	r24
    1c94:	3f 92       	push	r3
    1c96:	2f 92       	push	r2
    1c98:	0e 94 df 06 	call	0xdbe	; 0xdbe <Print::printf(char const*, ...) [clone .constprop.22]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1054
      if (start == 0) {
    1c9c:	86 e0       	ldi	r24, 0x06	; 6
    1c9e:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    1ca2:	2d b7       	in	r18, 0x3d	; 61
    1ca4:	3e b7       	in	r19, 0x3e	; 62
    1ca6:	28 5f       	subi	r18, 0xF8	; 248
    1ca8:	3f 4f       	sbci	r19, 0xFF	; 255
    1caa:	0f b6       	in	r0, 0x3f	; 63
    1cac:	f8 94       	cli
    1cae:	3e bf       	out	0x3e, r19	; 62
    1cb0:	0f be       	out	0x3f, r0	; 63
    1cb2:	2d bf       	out	0x3d, r18	; 61
    1cb4:	89 2b       	or	r24, r25
    1cb6:	41 f4       	brne	.+16     	; 0x1cc8 <menu_motor()+0x3a2>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1055
        EEPROM_write_int(arm_down_address, arm_down);
    1cb8:	b3 01       	movw	r22, r6
    1cba:	8a ea       	ldi	r24, 0xAA	; 170
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1056
        AX(11, arm_down, 150);
    1cc2:	b3 01       	movw	r22, r6
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1075
    {
      lcd.setCursor(0, 0);
      lcd.printf("arm_dropping %d %4d", 10, arm_dropping);
      if (start == 0) {
        EEPROM_write_int(arm_dropping_address, arm_dropping);
        AX(11, arm_dropping, 150);
    1cc4:	8b e0       	ldi	r24, 0x0B	; 11
    1cc6:	00 cf       	rjmp	.-512    	; 0x1ac8 <menu_motor()+0x1a2>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1058
      lcd.printf("arm_down %d %4d", 10, arm_down);
      if (start == 0) {
        EEPROM_write_int(arm_down_address, arm_down);
        AX(11, arm_down, 150);
      }
      else if (increase == 0) {
    1cc8:	8a e0       	ldi	r24, 0x0A	; 10
    1cca:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    1cce:	89 2b       	or	r24, r25
    1cd0:	81 f4       	brne	.+32     	; 0x1cf2 <menu_motor()+0x3cc>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1059
        delay(50);
    1cd2:	62 e3       	ldi	r22, 0x32	; 50
    1cd4:	70 e0       	ldi	r23, 0x00	; 0
    1cd6:	80 e0       	ldi	r24, 0x00	; 0
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	0e 94 aa 02 	call	0x554	; 0x554 <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1060
        if (arm_down < 800)
    1cde:	30 e2       	ldi	r19, 0x20	; 32
    1ce0:	63 16       	cp	r6, r19
    1ce2:	33 e0       	ldi	r19, 0x03	; 3
    1ce4:	73 06       	cpc	r7, r19
    1ce6:	0c f0       	brlt	.+2      	; 0x1cea <menu_motor()+0x3c4>
    1ce8:	49 ce       	rjmp	.-878    	; 0x197c <menu_motor()+0x56>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1061
          arm_down += 5;
    1cea:	85 e0       	ldi	r24, 0x05	; 5
    1cec:	68 0e       	add	r6, r24
    1cee:	71 1c       	adc	r7, r1
    1cf0:	45 ce       	rjmp	.-886    	; 0x197c <menu_motor()+0x56>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1062
      } else if (decrease == 0) {
    1cf2:	8b e0       	ldi	r24, 0x0B	; 11
    1cf4:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    1cf8:	89 2b       	or	r24, r25
    1cfa:	09 f0       	breq	.+2      	; 0x1cfe <menu_motor()+0x3d8>
    1cfc:	3f ce       	rjmp	.-898    	; 0x197c <menu_motor()+0x56>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1063
        delay(50);
    1cfe:	62 e3       	ldi	r22, 0x32	; 50
    1d00:	70 e0       	ldi	r23, 0x00	; 0
    1d02:	80 e0       	ldi	r24, 0x00	; 0
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	0e 94 aa 02 	call	0x554	; 0x554 <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1065

        if (arm_down > 150)
    1d0a:	97 e9       	ldi	r25, 0x97	; 151
    1d0c:	69 16       	cp	r6, r25
    1d0e:	71 04       	cpc	r7, r1
    1d10:	0c f4       	brge	.+2      	; 0x1d14 <menu_motor()+0x3ee>
    1d12:	34 ce       	rjmp	.-920    	; 0x197c <menu_motor()+0x56>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1066
          arm_down -= 5;
    1d14:	25 e0       	ldi	r18, 0x05	; 5
    1d16:	62 1a       	sub	r6, r18
    1d18:	71 08       	sbc	r7, r1
    1d1a:	30 ce       	rjmp	.-928    	; 0x197c <menu_motor()+0x56>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1069
      } 

    }else if (page == 6)  // AX Arm dropping ID=11
    1d1c:	86 30       	cpi	r24, 0x06	; 6
    1d1e:	09 f0       	breq	.+2      	; 0x1d22 <menu_motor()+0x3fc>
    1d20:	51 c0       	rjmp	.+162    	; 0x1dc4 <menu_motor()+0x49e>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1071
    {
      lcd.setCursor(0, 0);
    1d22:	60 e0       	ldi	r22, 0x00	; 0
    1d24:	80 e0       	ldi	r24, 0x00	; 0
    1d26:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1072
      lcd.printf("arm_dropping %d %4d", 10, arm_dropping);
    1d2a:	5f 92       	push	r5
    1d2c:	4f 92       	push	r4
    1d2e:	1f 92       	push	r1
    1d30:	8a e0       	ldi	r24, 0x0A	; 10
    1d32:	8f 93       	push	r24
    1d34:	8b e8       	ldi	r24, 0x8B	; 139
    1d36:	93 e0       	ldi	r25, 0x03	; 3
    1d38:	9f 93       	push	r25
    1d3a:	8f 93       	push	r24
    1d3c:	3f 92       	push	r3
    1d3e:	2f 92       	push	r2
    1d40:	0e 94 df 06 	call	0xdbe	; 0xdbe <Print::printf(char const*, ...) [clone .constprop.22]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1073
      if (start == 0) {
    1d44:	86 e0       	ldi	r24, 0x06	; 6
    1d46:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    1d4a:	2d b7       	in	r18, 0x3d	; 61
    1d4c:	3e b7       	in	r19, 0x3e	; 62
    1d4e:	28 5f       	subi	r18, 0xF8	; 248
    1d50:	3f 4f       	sbci	r19, 0xFF	; 255
    1d52:	0f b6       	in	r0, 0x3f	; 63
    1d54:	f8 94       	cli
    1d56:	3e bf       	out	0x3e, r19	; 62
    1d58:	0f be       	out	0x3f, r0	; 63
    1d5a:	2d bf       	out	0x3d, r18	; 61
    1d5c:	89 2b       	or	r24, r25
    1d5e:	39 f4       	brne	.+14     	; 0x1d6e <menu_motor()+0x448>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1074
        EEPROM_write_int(arm_dropping_address, arm_dropping);
    1d60:	b2 01       	movw	r22, r4
    1d62:	8c ea       	ldi	r24, 0xAC	; 172
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1075
        AX(11, arm_dropping, 150);
    1d6a:	b2 01       	movw	r22, r4
    1d6c:	ab cf       	rjmp	.-170    	; 0x1cc4 <menu_motor()+0x39e>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1077
      }
      else if (increase == 0) {
    1d6e:	8a e0       	ldi	r24, 0x0A	; 10
    1d70:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    1d74:	89 2b       	or	r24, r25
    1d76:	81 f4       	brne	.+32     	; 0x1d98 <menu_motor()+0x472>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1078
        delay(50);
    1d78:	62 e3       	ldi	r22, 0x32	; 50
    1d7a:	70 e0       	ldi	r23, 0x00	; 0
    1d7c:	80 e0       	ldi	r24, 0x00	; 0
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	0e 94 aa 02 	call	0x554	; 0x554 <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1079
        if (arm_dropping < 1000)
    1d84:	38 ee       	ldi	r19, 0xE8	; 232
    1d86:	43 16       	cp	r4, r19
    1d88:	33 e0       	ldi	r19, 0x03	; 3
    1d8a:	53 06       	cpc	r5, r19
    1d8c:	0c f0       	brlt	.+2      	; 0x1d90 <menu_motor()+0x46a>
    1d8e:	f6 cd       	rjmp	.-1044   	; 0x197c <menu_motor()+0x56>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1080
          arm_dropping += 5;
    1d90:	85 e0       	ldi	r24, 0x05	; 5
    1d92:	48 0e       	add	r4, r24
    1d94:	51 1c       	adc	r5, r1
    1d96:	f2 cd       	rjmp	.-1052   	; 0x197c <menu_motor()+0x56>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1081
      } else if (decrease == 0) {
    1d98:	8b e0       	ldi	r24, 0x0B	; 11
    1d9a:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    1d9e:	89 2b       	or	r24, r25
    1da0:	09 f0       	breq	.+2      	; 0x1da4 <menu_motor()+0x47e>
    1da2:	ec cd       	rjmp	.-1064   	; 0x197c <menu_motor()+0x56>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1082
        delay(50);
    1da4:	62 e3       	ldi	r22, 0x32	; 50
    1da6:	70 e0       	ldi	r23, 0x00	; 0
    1da8:	80 e0       	ldi	r24, 0x00	; 0
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	0e 94 aa 02 	call	0x554	; 0x554 <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1084

        if (arm_dropping > 300)
    1db0:	9d e2       	ldi	r25, 0x2D	; 45
    1db2:	49 16       	cp	r4, r25
    1db4:	91 e0       	ldi	r25, 0x01	; 1
    1db6:	59 06       	cpc	r5, r25
    1db8:	0c f4       	brge	.+2      	; 0x1dbc <menu_motor()+0x496>
    1dba:	e0 cd       	rjmp	.-1088   	; 0x197c <menu_motor()+0x56>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1085
          arm_dropping -= 5;
    1dbc:	25 e0       	ldi	r18, 0x05	; 5
    1dbe:	42 1a       	sub	r4, r18
    1dc0:	51 08       	sbc	r5, r1
    1dc2:	dc cd       	rjmp	.-1096   	; 0x197c <menu_motor()+0x56>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1088
      } 

    }else if (page == 7)  // XL Gripper close 30 and 31
    1dc4:	87 30       	cpi	r24, 0x07	; 7
    1dc6:	09 f0       	breq	.+2      	; 0x1dca <menu_motor()+0x4a4>
    1dc8:	61 c0       	rjmp	.+194    	; 0x1e8c <menu_motor()+0x566>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1090
    {
      lcd.setCursor(0, 0);
    1dca:	60 e0       	ldi	r22, 0x00	; 0
    1dcc:	80 e0       	ldi	r24, 0x00	; 0
    1dce:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1091
      lcd.printf("gripper_close %d %4d", 10, gripper_close);
    1dd2:	ff 92       	push	r15
    1dd4:	ef 92       	push	r14
    1dd6:	1f 92       	push	r1
    1dd8:	8a e0       	ldi	r24, 0x0A	; 10
    1dda:	8f 93       	push	r24
    1ddc:	8f e9       	ldi	r24, 0x9F	; 159
    1dde:	93 e0       	ldi	r25, 0x03	; 3
    1de0:	9f 93       	push	r25
    1de2:	8f 93       	push	r24
    1de4:	3f 92       	push	r3
    1de6:	2f 92       	push	r2
    1de8:	0e 94 df 06 	call	0xdbe	; 0xdbe <Print::printf(char const*, ...) [clone .constprop.22]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1092
      if (start == 0) {
    1dec:	86 e0       	ldi	r24, 0x06	; 6
    1dee:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    1df2:	2d b7       	in	r18, 0x3d	; 61
    1df4:	3e b7       	in	r19, 0x3e	; 62
    1df6:	28 5f       	subi	r18, 0xF8	; 248
    1df8:	3f 4f       	sbci	r19, 0xFF	; 255
    1dfa:	0f b6       	in	r0, 0x3f	; 63
    1dfc:	f8 94       	cli
    1dfe:	3e bf       	out	0x3e, r19	; 62
    1e00:	0f be       	out	0x3f, r0	; 63
    1e02:	2d bf       	out	0x3d, r18	; 61
    1e04:	89 2b       	or	r24, r25
    1e06:	b9 f4       	brne	.+46     	; 0x1e36 <menu_motor()+0x510>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1093
        EEPROM_write_int(gripper_close_address, gripper_close);
    1e08:	b7 01       	movw	r22, r14
    1e0a:	8e ea       	ldi	r24, 0xAE	; 174
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1094
        XL_Gripper(30, gripper_close, 100);delay(50);
    1e12:	b7 01       	movw	r22, r14
    1e14:	8e e1       	ldi	r24, 0x1E	; 30
    1e16:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <XL_Gripper(char, int, int) [clone .constprop.27]>
    1e1a:	62 e3       	ldi	r22, 0x32	; 50
    1e1c:	70 e0       	ldi	r23, 0x00	; 0
    1e1e:	80 e0       	ldi	r24, 0x00	; 0
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	0e 94 aa 02 	call	0x554	; 0x554 <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1095
        XL_Gripper(31, 1023 - gripper_close+xl_error, 100);
    1e26:	65 e4       	ldi	r22, 0x45	; 69
    1e28:	74 e0       	ldi	r23, 0x04	; 4
    1e2a:	6e 19       	sub	r22, r14
    1e2c:	7f 09       	sbc	r23, r15
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1114
      lcd.setCursor(0, 0);
      lcd.printf("gripper_open %d %4d", 10, gripper_open);
      if (start == 0) {
        EEPROM_write_int(gripper_open_address, gripper_open);
        XL_Gripper(30, gripper_open, 100);delay(50);
        XL_Gripper(31, 1023 - gripper_open+xl_error, 100);
    1e2e:	8f e1       	ldi	r24, 0x1F	; 31
    1e30:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <XL_Gripper(char, int, int) [clone .constprop.27]>
    1e34:	a3 cd       	rjmp	.-1210   	; 0x197c <menu_motor()+0x56>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1097
      if (start == 0) {
        EEPROM_write_int(gripper_close_address, gripper_close);
        XL_Gripper(30, gripper_close, 100);delay(50);
        XL_Gripper(31, 1023 - gripper_close+xl_error, 100);
      }
      else if (increase == 0) {
    1e36:	8a e0       	ldi	r24, 0x0A	; 10
    1e38:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    1e3c:	89 2b       	or	r24, r25
    1e3e:	81 f4       	brne	.+32     	; 0x1e60 <menu_motor()+0x53a>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1098
        delay(50);
    1e40:	62 e3       	ldi	r22, 0x32	; 50
    1e42:	70 e0       	ldi	r23, 0x00	; 0
    1e44:	80 e0       	ldi	r24, 0x00	; 0
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	0e 94 aa 02 	call	0x554	; 0x554 <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1099
        if (gripper_close < 890)
    1e4c:	3a e7       	ldi	r19, 0x7A	; 122
    1e4e:	e3 16       	cp	r14, r19
    1e50:	33 e0       	ldi	r19, 0x03	; 3
    1e52:	f3 06       	cpc	r15, r19
    1e54:	0c f0       	brlt	.+2      	; 0x1e58 <menu_motor()+0x532>
    1e56:	92 cd       	rjmp	.-1244   	; 0x197c <menu_motor()+0x56>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1100
          gripper_close += 5;
    1e58:	85 e0       	ldi	r24, 0x05	; 5
    1e5a:	e8 0e       	add	r14, r24
    1e5c:	f1 1c       	adc	r15, r1
    1e5e:	8e cd       	rjmp	.-1252   	; 0x197c <menu_motor()+0x56>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1101
      } else if (decrease == 0) {
    1e60:	8b e0       	ldi	r24, 0x0B	; 11
    1e62:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    1e66:	89 2b       	or	r24, r25
    1e68:	09 f0       	breq	.+2      	; 0x1e6c <menu_motor()+0x546>
    1e6a:	88 cd       	rjmp	.-1264   	; 0x197c <menu_motor()+0x56>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1102
        delay(50);
    1e6c:	62 e3       	ldi	r22, 0x32	; 50
    1e6e:	70 e0       	ldi	r23, 0x00	; 0
    1e70:	80 e0       	ldi	r24, 0x00	; 0
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	0e 94 aa 02 	call	0x554	; 0x554 <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1104

        if (gripper_close > 570)
    1e78:	9b e3       	ldi	r25, 0x3B	; 59
    1e7a:	e9 16       	cp	r14, r25
    1e7c:	92 e0       	ldi	r25, 0x02	; 2
    1e7e:	f9 06       	cpc	r15, r25
    1e80:	0c f4       	brge	.+2      	; 0x1e84 <menu_motor()+0x55e>
    1e82:	7c cd       	rjmp	.-1288   	; 0x197c <menu_motor()+0x56>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1105
          gripper_close -= 5;
    1e84:	25 e0       	ldi	r18, 0x05	; 5
    1e86:	e2 1a       	sub	r14, r18
    1e88:	f1 08       	sbc	r15, r1
    1e8a:	78 cd       	rjmp	.-1296   	; 0x197c <menu_motor()+0x56>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1107
      } 
    }else if (page == 8)  // XL Gripper open 30 and 31
    1e8c:	88 30       	cpi	r24, 0x08	; 8
    1e8e:	09 f0       	breq	.+2      	; 0x1e92 <menu_motor()+0x56c>
    1e90:	75 cd       	rjmp	.-1302   	; 0x197c <menu_motor()+0x56>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1109
    {
      lcd.setCursor(0, 0);
    1e92:	60 e0       	ldi	r22, 0x00	; 0
    1e94:	80 e0       	ldi	r24, 0x00	; 0
    1e96:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1110
      lcd.printf("gripper_open %d %4d", 10, gripper_open);
    1e9a:	1f 93       	push	r17
    1e9c:	0f 93       	push	r16
    1e9e:	1f 92       	push	r1
    1ea0:	8a e0       	ldi	r24, 0x0A	; 10
    1ea2:	8f 93       	push	r24
    1ea4:	84 eb       	ldi	r24, 0xB4	; 180
    1ea6:	93 e0       	ldi	r25, 0x03	; 3
    1ea8:	9f 93       	push	r25
    1eaa:	8f 93       	push	r24
    1eac:	3f 92       	push	r3
    1eae:	2f 92       	push	r2
    1eb0:	0e 94 df 06 	call	0xdbe	; 0xdbe <Print::printf(char const*, ...) [clone .constprop.22]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1111
      if (start == 0) {
    1eb4:	86 e0       	ldi	r24, 0x06	; 6
    1eb6:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    1eba:	2d b7       	in	r18, 0x3d	; 61
    1ebc:	3e b7       	in	r19, 0x3e	; 62
    1ebe:	28 5f       	subi	r18, 0xF8	; 248
    1ec0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ec2:	0f b6       	in	r0, 0x3f	; 63
    1ec4:	f8 94       	cli
    1ec6:	3e bf       	out	0x3e, r19	; 62
    1ec8:	0f be       	out	0x3f, r0	; 63
    1eca:	2d bf       	out	0x3d, r18	; 61
    1ecc:	89 2b       	or	r24, r25
    1ece:	a1 f4       	brne	.+40     	; 0x1ef8 <menu_motor()+0x5d2>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1112
        EEPROM_write_int(gripper_open_address, gripper_open);
    1ed0:	b8 01       	movw	r22, r16
    1ed2:	80 eb       	ldi	r24, 0xB0	; 176
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1113
        XL_Gripper(30, gripper_open, 100);delay(50);
    1eda:	b8 01       	movw	r22, r16
    1edc:	8e e1       	ldi	r24, 0x1E	; 30
    1ede:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <XL_Gripper(char, int, int) [clone .constprop.27]>
    1ee2:	62 e3       	ldi	r22, 0x32	; 50
    1ee4:	70 e0       	ldi	r23, 0x00	; 0
    1ee6:	80 e0       	ldi	r24, 0x00	; 0
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	0e 94 aa 02 	call	0x554	; 0x554 <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1114
        XL_Gripper(31, 1023 - gripper_open+xl_error, 100);
    1eee:	65 e4       	ldi	r22, 0x45	; 69
    1ef0:	74 e0       	ldi	r23, 0x04	; 4
    1ef2:	60 1b       	sub	r22, r16
    1ef4:	71 0b       	sbc	r23, r17
    1ef6:	9b cf       	rjmp	.-202    	; 0x1e2e <menu_motor()+0x508>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1116
      }
      else if (increase == 0) {
    1ef8:	8a e0       	ldi	r24, 0x0A	; 10
    1efa:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    1efe:	89 2b       	or	r24, r25
    1f00:	71 f4       	brne	.+28     	; 0x1f1e <menu_motor()+0x5f8>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1117
        delay(50);
    1f02:	62 e3       	ldi	r22, 0x32	; 50
    1f04:	70 e0       	ldi	r23, 0x00	; 0
    1f06:	80 e0       	ldi	r24, 0x00	; 0
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	0e 94 aa 02 	call	0x554	; 0x554 <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1118
        if (gripper_open < 890)
    1f0e:	0a 37       	cpi	r16, 0x7A	; 122
    1f10:	33 e0       	ldi	r19, 0x03	; 3
    1f12:	13 07       	cpc	r17, r19
    1f14:	0c f0       	brlt	.+2      	; 0x1f18 <menu_motor()+0x5f2>
    1f16:	32 cd       	rjmp	.-1436   	; 0x197c <menu_motor()+0x56>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1119
          gripper_open += 5;
    1f18:	0b 5f       	subi	r16, 0xFB	; 251
    1f1a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f1c:	2f cd       	rjmp	.-1442   	; 0x197c <menu_motor()+0x56>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1120
      } else if (decrease == 0) {
    1f1e:	8b e0       	ldi	r24, 0x0B	; 11
    1f20:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    1f24:	89 2b       	or	r24, r25
    1f26:	09 f0       	breq	.+2      	; 0x1f2a <menu_motor()+0x604>
    1f28:	29 cd       	rjmp	.-1454   	; 0x197c <menu_motor()+0x56>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1121
        delay(50);
    1f2a:	62 e3       	ldi	r22, 0x32	; 50
    1f2c:	70 e0       	ldi	r23, 0x00	; 0
    1f2e:	80 e0       	ldi	r24, 0x00	; 0
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	0e 94 aa 02 	call	0x554	; 0x554 <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1123

        if (gripper_open > 570)
    1f36:	0b 33       	cpi	r16, 0x3B	; 59
    1f38:	82 e0       	ldi	r24, 0x02	; 2
    1f3a:	18 07       	cpc	r17, r24
    1f3c:	0c f4       	brge	.+2      	; 0x1f40 <menu_motor()+0x61a>
    1f3e:	1e cd       	rjmp	.-1476   	; 0x197c <menu_motor()+0x56>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1124
          gripper_open -= 5;
    1f40:	05 50       	subi	r16, 0x05	; 5
    1f42:	11 09       	sbc	r17, r1
    1f44:	1b cd       	rjmp	.-1482   	; 0x197c <menu_motor()+0x56>

00001f46 <color(char)>:
color():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:283
    delay(1000);
  }
  delay(500);
}

char color(char select) {
    1f46:	af 92       	push	r10
    1f48:	bf 92       	push	r11
    1f4a:	cf 92       	push	r12
    1f4c:	df 92       	push	r13
    1f4e:	ef 92       	push	r14
    1f50:	ff 92       	push	r15
    1f52:	0f 93       	push	r16
    1f54:	1f 93       	push	r17
    1f56:	cf 93       	push	r28
    1f58:	df 93       	push	r29
    1f5a:	d8 2e       	mov	r13, r24
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:285
  unsigned char low_byte, high_byte;
  if (select == 1)  // left
    1f5c:	81 e0       	ldi	r24, 0x01	; 1
    1f5e:	d8 12       	cpse	r13, r24
    1f60:	f5 c0       	rjmp	.+490    	; 0x214c <color(char)+0x206>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:287
  {
    digitalWrite(MUX_C, LOW);
    1f62:	60 e0       	ldi	r22, 0x00	; 0
    1f64:	8a e2       	ldi	r24, 0x2A	; 42
    1f66:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <digitalWrite>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:288
    digitalWrite(MUX_B, LOW);
    1f6a:	60 e0       	ldi	r22, 0x00	; 0
    1f6c:	8b e2       	ldi	r24, 0x2B	; 43
    1f6e:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <digitalWrite>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:289
    digitalWrite(MUX_A, LOW);
    1f72:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:295
    //  Serial.print("left color:  ");
  } else if (select==2) // right
  {
    digitalWrite(MUX_C, LOW);
    digitalWrite(MUX_B, LOW);
    digitalWrite(MUX_A, HIGH);
    1f74:	8c e2       	ldi	r24, 0x2C	; 44
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:301
    //  Serial.print("right color:  ");
  }
  else{
    digitalWrite(MUX_A, HIGH);//front
    digitalWrite(MUX_B, HIGH);
    digitalWrite(MUX_C, LOW);
    1f76:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <digitalWrite>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:303
  }
  delayMicroseconds(10);
    1f7a:	8a e0       	ldi	r24, 0x0A	; 10
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	0e 94 42 02 	call	0x484	; 0x484 <delayMicroseconds>
beginTransmission():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:208
  txBufferLength = 0;
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
    1f82:	89 e3       	ldi	r24, 0x39	; 57
    1f84:	0e 94 44 0a 	call	0x1488	; 0x1488 <TwoWire::beginTransmission(unsigned char) [clone .constprop.11]>
color():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:306

  Wire.beginTransmission(57);  // transmit to device #57 (0x39)
  Wire.write(byte(0x80));
    1f88:	60 e8       	ldi	r22, 0x80	; 128
    1f8a:	88 e6       	ldi	r24, 0x68	; 104
    1f8c:	9a e0       	ldi	r25, 0x0A	; 10
    1f8e:	0e 94 73 04 	call	0x8e6	; 0x8e6 <TwoWire::write(unsigned char)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:307
  Wire.write(byte(3));  // power
    1f92:	63 e0       	ldi	r22, 0x03	; 3
    1f94:	88 e6       	ldi	r24, 0x68	; 104
    1f96:	9a e0       	ldi	r25, 0x0A	; 10
    1f98:	0e 94 73 04 	call	0x8e6	; 0x8e6 <TwoWire::write(unsigned char)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:308
  Wire.endTransmission();
    1f9c:	0e 94 4e 0a 	call	0x149c	; 0x149c <TwoWire::endTransmission() [clone .constprop.7]>
beginTransmission():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:208
    1fa0:	89 e3       	ldi	r24, 0x39	; 57
    1fa2:	0e 94 44 0a 	call	0x1488	; 0x1488 <TwoWire::beginTransmission(unsigned char) [clone .constprop.11]>
color():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:311

  Wire.beginTransmission(57);  // transmit to device #57 (0x39)
  Wire.write(byte(0x8F));
    1fa6:	6f e8       	ldi	r22, 0x8F	; 143
    1fa8:	88 e6       	ldi	r24, 0x68	; 104
    1faa:	9a e0       	ldi	r25, 0x0A	; 10
    1fac:	0e 94 73 04 	call	0x8e6	; 0x8e6 <TwoWire::write(unsigned char)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:312
  Wire.write(byte(1));  // gain
    1fb0:	61 e0       	ldi	r22, 0x01	; 1
    1fb2:	88 e6       	ldi	r24, 0x68	; 104
    1fb4:	9a e0       	ldi	r25, 0x0A	; 10
    1fb6:	0e 94 73 04 	call	0x8e6	; 0x8e6 <TwoWire::write(unsigned char)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:313
  Wire.endTransmission();
    1fba:	0e 94 4e 0a 	call	0x149c	; 0x149c <TwoWire::endTransmission() [clone .constprop.7]>
beginTransmission():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:208
    1fbe:	89 e3       	ldi	r24, 0x39	; 57
    1fc0:	0e 94 44 0a 	call	0x1488	; 0x1488 <TwoWire::beginTransmission(unsigned char) [clone .constprop.11]>
color():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:316

  Wire.beginTransmission(57);  // transmit to device #57 (0x39)
  Wire.write(byte(0x94));      // address of first data
    1fc4:	64 e9       	ldi	r22, 0x94	; 148
    1fc6:	88 e6       	ldi	r24, 0x68	; 104
    1fc8:	9a e0       	ldi	r25, 0x0A	; 10
    1fca:	0e 94 73 04 	call	0x8e6	; 0x8e6 <TwoWire::write(unsigned char)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:317
  Wire.endTransmission();
    1fce:	0e 94 4e 0a 	call	0x149c	; 0x149c <TwoWire::endTransmission() [clone .constprop.7]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:319

  Wire.requestFrom(57, 8);
    1fd2:	68 e0       	ldi	r22, 0x08	; 8
    1fd4:	70 e0       	ldi	r23, 0x00	; 0
    1fd6:	89 e3       	ldi	r24, 0x39	; 57
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	0e 94 07 0b 	call	0x160e	; 0x160e <TwoWire::requestFrom(int, int) [clone .constprop.8]>
available():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:292
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
    1fde:	80 91 dc 08 	lds	r24, 0x08DC	; 0x8008dc <TwoWire::rxBufferLength>
    1fe2:	90 91 dd 08 	lds	r25, 0x08DD	; 0x8008dd <TwoWire::rxBufferIndex>
    1fe6:	89 1b       	sub	r24, r25
    1fe8:	99 0b       	sbc	r25, r25
color():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:320
  if (8 <= Wire.available())  // if 8 bytes were received
    1fea:	08 97       	sbiw	r24, 0x08	; 8
    1fec:	d4 f1       	brlt	.+116    	; 0x2062 <color(char)+0x11c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:322
  {
    low_byte = Wire.read();
    1fee:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <TwoWire::read() [clone .constprop.16]>
    1ff2:	ec 01       	movw	r28, r24
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:323
    high_byte = Wire.read();
    1ff4:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <TwoWire::read() [clone .constprop.16]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:324
    clear = high_byte * 255 + low_byte;
    1ff8:	1f ef       	ldi	r17, 0xFF	; 255
    1ffa:	dd 27       	eor	r29, r29
    1ffc:	81 9f       	mul	r24, r17
    1ffe:	c0 0d       	add	r28, r0
    2000:	d1 1d       	adc	r29, r1
    2002:	11 24       	eor	r1, r1
    2004:	d0 93 6a 08 	sts	0x086A, r29	; 0x80086a <clear+0x1>
    2008:	c0 93 69 08 	sts	0x0869, r28	; 0x800869 <clear>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:326

    low_byte = Wire.read();
    200c:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <TwoWire::read() [clone .constprop.16]>
    2010:	ec 01       	movw	r28, r24
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:327
    high_byte = Wire.read();
    2012:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <TwoWire::read() [clone .constprop.16]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:328
    red = high_byte * 255 + low_byte;
    2016:	dd 27       	eor	r29, r29
    2018:	81 9f       	mul	r24, r17
    201a:	c0 0d       	add	r28, r0
    201c:	d1 1d       	adc	r29, r1
    201e:	11 24       	eor	r1, r1
    2020:	d0 93 70 08 	sts	0x0870, r29	; 0x800870 <red+0x1>
    2024:	c0 93 6f 08 	sts	0x086F, r28	; 0x80086f <red>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:330

    low_byte = Wire.read();
    2028:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <TwoWire::read() [clone .constprop.16]>
    202c:	ec 01       	movw	r28, r24
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:331
    high_byte = Wire.read();
    202e:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <TwoWire::read() [clone .constprop.16]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:332
    green = high_byte * 255 + low_byte;
    2032:	dd 27       	eor	r29, r29
    2034:	81 9f       	mul	r24, r17
    2036:	c0 0d       	add	r28, r0
    2038:	d1 1d       	adc	r29, r1
    203a:	11 24       	eor	r1, r1
    203c:	d0 93 6e 08 	sts	0x086E, r29	; 0x80086e <green+0x1>
    2040:	c0 93 6d 08 	sts	0x086D, r28	; 0x80086d <green>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:334

    low_byte = Wire.read();
    2044:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <TwoWire::read() [clone .constprop.16]>
    2048:	ec 01       	movw	r28, r24
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:335
    high_byte = Wire.read();
    204a:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <TwoWire::read() [clone .constprop.16]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:336
    blue = (high_byte * 255 + low_byte) - 10;
    204e:	dd 27       	eor	r29, r29
    2050:	81 9f       	mul	r24, r17
    2052:	c0 0d       	add	r28, r0
    2054:	d1 1d       	adc	r29, r1
    2056:	11 24       	eor	r1, r1
    2058:	2a 97       	sbiw	r28, 0x0a	; 10
    205a:	d0 93 6c 08 	sts	0x086C, r29	; 0x80086c <blue+0x1>
    205e:	c0 93 6b 08 	sts	0x086B, r28	; 0x80086b <blue>
    2062:	e0 90 6f 08 	lds	r14, 0x086F	; 0x80086f <red>
    2066:	f0 90 70 08 	lds	r15, 0x0870	; 0x800870 <red+0x1>
    206a:	00 91 6d 08 	lds	r16, 0x086D	; 0x80086d <green>
    206e:	10 91 6e 08 	lds	r17, 0x086E	; 0x80086e <green+0x1>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:339
  }

  if (select == 1)  // left
    2072:	81 e0       	ldi	r24, 0x01	; 1
    2074:	d8 12       	cpse	r13, r24
    2076:	b1 c1       	rjmp	.+866    	; 0x23da <color(char)+0x494>
    2078:	c0 90 6b 08 	lds	r12, 0x086B	; 0x80086b <blue>
    207c:	d0 90 6c 08 	lds	r13, 0x086C	; 0x80086c <blue+0x1>
    2080:	8a e9       	ldi	r24, 0x9A	; 154
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    2088:	ec 01       	movw	r28, r24
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:341
  {
    if (red > green && red > blue && red < EEPROM_read_int(red_left_r) + range && red > EEPROM_read_int(red_left_r) - range && green < EEPROM_read_int(red_left_g) + range && green > EEPROM_read_int(red_left_g) - range && blue < EEPROM_read_int(red_left_b) + range && blue > EEPROM_read_int(red_left_b) - range && clear < EEPROM_read_int(red_left_c) + range && clear > EEPROM_read_int(red_left_c) - range)
    208a:	0e 15       	cp	r16, r14
    208c:	1f 05       	cpc	r17, r15
    208e:	0c f0       	brlt	.+2      	; 0x2092 <color(char)+0x14c>
    2090:	75 c0       	rjmp	.+234    	; 0x217c <color(char)+0x236>
    2092:	ce 14       	cp	r12, r14
    2094:	df 04       	cpc	r13, r15
    2096:	0c f0       	brlt	.+2      	; 0x209a <color(char)+0x154>
    2098:	ba c0       	rjmp	.+372    	; 0x220e <color(char)+0x2c8>
    209a:	84 e1       	ldi	r24, 0x14	; 20
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    20a2:	9c 01       	movw	r18, r24
    20a4:	2c 0f       	add	r18, r28
    20a6:	3d 1f       	adc	r19, r29
    20a8:	e2 16       	cp	r14, r18
    20aa:	f3 06       	cpc	r15, r19
    20ac:	0c f0       	brlt	.+2      	; 0x20b0 <color(char)+0x16a>
    20ae:	b3 c0       	rjmp	.+358    	; 0x2216 <color(char)+0x2d0>
    20b0:	8c 1b       	sub	r24, r28
    20b2:	9d 0b       	sbc	r25, r29
    20b4:	8e 15       	cp	r24, r14
    20b6:	9f 05       	cpc	r25, r15
    20b8:	0c f0       	brlt	.+2      	; 0x20bc <color(char)+0x176>
    20ba:	ad c0       	rjmp	.+346    	; 0x2216 <color(char)+0x2d0>
    20bc:	86 e1       	ldi	r24, 0x16	; 22
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    20c4:	9c 01       	movw	r18, r24
    20c6:	2c 0f       	add	r18, r28
    20c8:	3d 1f       	adc	r19, r29
    20ca:	02 17       	cp	r16, r18
    20cc:	13 07       	cpc	r17, r19
    20ce:	0c f0       	brlt	.+2      	; 0x20d2 <color(char)+0x18c>
    20d0:	a2 c0       	rjmp	.+324    	; 0x2216 <color(char)+0x2d0>
    20d2:	8c 1b       	sub	r24, r28
    20d4:	9d 0b       	sbc	r25, r29
    20d6:	80 17       	cp	r24, r16
    20d8:	91 07       	cpc	r25, r17
    20da:	0c f0       	brlt	.+2      	; 0x20de <color(char)+0x198>
    20dc:	9c c0       	rjmp	.+312    	; 0x2216 <color(char)+0x2d0>
    20de:	88 e1       	ldi	r24, 0x18	; 24
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    20e6:	9c 01       	movw	r18, r24
    20e8:	2c 0f       	add	r18, r28
    20ea:	3d 1f       	adc	r19, r29
    20ec:	c2 16       	cp	r12, r18
    20ee:	d3 06       	cpc	r13, r19
    20f0:	0c f0       	brlt	.+2      	; 0x20f4 <color(char)+0x1ae>
    20f2:	91 c0       	rjmp	.+290    	; 0x2216 <color(char)+0x2d0>
    20f4:	8c 1b       	sub	r24, r28
    20f6:	9d 0b       	sbc	r25, r29
    20f8:	8c 15       	cp	r24, r12
    20fa:	9d 05       	cpc	r25, r13
    20fc:	0c f0       	brlt	.+2      	; 0x2100 <color(char)+0x1ba>
    20fe:	8b c0       	rjmp	.+278    	; 0x2216 <color(char)+0x2d0>
    2100:	8a e1       	ldi	r24, 0x1A	; 26
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    2108:	20 91 69 08 	lds	r18, 0x0869	; 0x800869 <clear>
    210c:	30 91 6a 08 	lds	r19, 0x086A	; 0x80086a <clear+0x1>
    2110:	ac 01       	movw	r20, r24
    2112:	4c 0f       	add	r20, r28
    2114:	5d 1f       	adc	r21, r29
    2116:	24 17       	cp	r18, r20
    2118:	35 07       	cpc	r19, r21
    211a:	0c f0       	brlt	.+2      	; 0x211e <color(char)+0x1d8>
    211c:	7c c0       	rjmp	.+248    	; 0x2216 <color(char)+0x2d0>
    211e:	8c 1b       	sub	r24, r28
    2120:	9d 0b       	sbc	r25, r29
    2122:	82 17       	cp	r24, r18
    2124:	93 07       	cpc	r25, r19
    2126:	0c f0       	brlt	.+2      	; 0x212a <color(char)+0x1e4>
    2128:	76 c0       	rjmp	.+236    	; 0x2216 <color(char)+0x2d0>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:389

    return color_out;
  }else if (select == 3)  // front
  {
    if (red > green && red > blue && red < EEPROM_read_int(red_front_r) + range && red > EEPROM_read_int(red_front_r) - range && green < EEPROM_read_int(red_front_g) + range && green > EEPROM_read_int(red_front_g) - range && blue < EEPROM_read_int(red_front_b) + range && blue > EEPROM_read_int(red_front_b) - range && clear < EEPROM_read_int(red_front_c) + range && clear > EEPROM_read_int(red_front_c) - range)
      color_out = RED;
    212a:	10 92 21 08 	sts	0x0821, r1	; 0x800821 <color_out+0x1>
    212e:	10 92 20 08 	sts	0x0820, r1	; 0x800820 <color_out>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:397
      color_out = GREEN;

    else
      color_out = WHITE;

    return color_out;
    2132:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <color_out>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:400
  }
  // delay(5);
}
    2136:	df 91       	pop	r29
    2138:	cf 91       	pop	r28
    213a:	1f 91       	pop	r17
    213c:	0f 91       	pop	r16
    213e:	ff 90       	pop	r15
    2140:	ef 90       	pop	r14
    2142:	df 90       	pop	r13
    2144:	cf 90       	pop	r12
    2146:	bf 90       	pop	r11
    2148:	af 90       	pop	r10
    214a:	08 95       	ret
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:291
  {
    digitalWrite(MUX_C, LOW);
    digitalWrite(MUX_B, LOW);
    digitalWrite(MUX_A, LOW);
    //  Serial.print("left color:  ");
  } else if (select==2) // right
    214c:	82 e0       	ldi	r24, 0x02	; 2
    214e:	d8 12       	cpse	r13, r24
    2150:	0a c0       	rjmp	.+20     	; 0x2166 <color(char)+0x220>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:293
  {
    digitalWrite(MUX_C, LOW);
    2152:	60 e0       	ldi	r22, 0x00	; 0
    2154:	8a e2       	ldi	r24, 0x2A	; 42
    2156:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <digitalWrite>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:294
    digitalWrite(MUX_B, LOW);
    215a:	60 e0       	ldi	r22, 0x00	; 0
    215c:	8b e2       	ldi	r24, 0x2B	; 43
    215e:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <digitalWrite>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:295
    digitalWrite(MUX_A, HIGH);
    2162:	61 e0       	ldi	r22, 0x01	; 1
    2164:	07 cf       	rjmp	.-498    	; 0x1f74 <color(char)+0x2e>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:299
    //  Serial.print("right color:  ");
  }
  else{
    digitalWrite(MUX_A, HIGH);//front
    2166:	61 e0       	ldi	r22, 0x01	; 1
    2168:	8c e2       	ldi	r24, 0x2C	; 44
    216a:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <digitalWrite>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:300
    digitalWrite(MUX_B, HIGH);
    216e:	61 e0       	ldi	r22, 0x01	; 1
    2170:	8b e2       	ldi	r24, 0x2B	; 43
    2172:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <digitalWrite>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:301
    digitalWrite(MUX_C, LOW);
    2176:	60 e0       	ldi	r22, 0x00	; 0
    2178:	8a e2       	ldi	r24, 0x2A	; 42
    217a:	fd ce       	rjmp	.-518    	; 0x1f76 <color(char)+0x30>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:345
  {
    if (red > green && red > blue && red < EEPROM_read_int(red_left_r) + range && red > EEPROM_read_int(red_left_r) - range && green < EEPROM_read_int(red_left_g) + range && green > EEPROM_read_int(red_left_g) - range && blue < EEPROM_read_int(red_left_b) + range && blue > EEPROM_read_int(red_left_b) - range && clear < EEPROM_read_int(red_left_c) + range && clear > EEPROM_read_int(red_left_c) - range)
      color_out = RED;
            
    //else if (green > red && green > blue && red < EEPROM_read_int(green_left_r) + range && red > EEPROM_read_int(green_left_r) - range && green > EEPROM_read_int(green_left_g)-range/2 && green < EEPROM_read_int(green_left_g) + range && blue < EEPROM_read_int(green_left_b) + range && blue > EEPROM_read_int(green_left_b) - range /*&& clear < EEPROM_read_int(green_left_c) + range*/ && clear > EEPROM_read_int(green_left_c) - range/2)
    else if(green > red && green > blue && red < EEPROM_read_int(green_left_r) + range && red > EEPROM_read_int(green_left_r) - range && green < EEPROM_read_int(green_left_g) + range && green > EEPROM_read_int(green_left_g) - range && blue < EEPROM_read_int(green_left_b) + range && blue > EEPROM_read_int(green_left_b) - range && clear < EEPROM_read_int(green_left_c) + range && clear > EEPROM_read_int(green_left_c) - range)
    217c:	e0 16       	cp	r14, r16
    217e:	f1 06       	cpc	r15, r17
    2180:	0c f0       	brlt	.+2      	; 0x2184 <color(char)+0x23e>
    2182:	45 c0       	rjmp	.+138    	; 0x220e <color(char)+0x2c8>
    2184:	c0 16       	cp	r12, r16
    2186:	d1 06       	cpc	r13, r17
    2188:	0c f0       	brlt	.+2      	; 0x218c <color(char)+0x246>
    218a:	41 c0       	rjmp	.+130    	; 0x220e <color(char)+0x2c8>
    218c:	8c e1       	ldi	r24, 0x1C	; 28
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    2194:	9c 01       	movw	r18, r24
    2196:	2c 0f       	add	r18, r28
    2198:	3d 1f       	adc	r19, r29
    219a:	e2 16       	cp	r14, r18
    219c:	f3 06       	cpc	r15, r19
    219e:	bc f5       	brge	.+110    	; 0x220e <color(char)+0x2c8>
    21a0:	8c 1b       	sub	r24, r28
    21a2:	9d 0b       	sbc	r25, r29
    21a4:	8e 15       	cp	r24, r14
    21a6:	9f 05       	cpc	r25, r15
    21a8:	94 f5       	brge	.+100    	; 0x220e <color(char)+0x2c8>
    21aa:	8e e1       	ldi	r24, 0x1E	; 30
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    21b2:	9c 01       	movw	r18, r24
    21b4:	2c 0f       	add	r18, r28
    21b6:	3d 1f       	adc	r19, r29
    21b8:	02 17       	cp	r16, r18
    21ba:	13 07       	cpc	r17, r19
    21bc:	44 f5       	brge	.+80     	; 0x220e <color(char)+0x2c8>
    21be:	8c 1b       	sub	r24, r28
    21c0:	9d 0b       	sbc	r25, r29
    21c2:	80 17       	cp	r24, r16
    21c4:	91 07       	cpc	r25, r17
    21c6:	1c f5       	brge	.+70     	; 0x220e <color(char)+0x2c8>
    21c8:	80 e2       	ldi	r24, 0x20	; 32
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    21d0:	9e 01       	movw	r18, r28
    21d2:	28 0f       	add	r18, r24
    21d4:	39 1f       	adc	r19, r25
    21d6:	c2 16       	cp	r12, r18
    21d8:	d3 06       	cpc	r13, r19
    21da:	cc f4       	brge	.+50     	; 0x220e <color(char)+0x2c8>
    21dc:	8c 1b       	sub	r24, r28
    21de:	9d 0b       	sbc	r25, r29
    21e0:	8c 15       	cp	r24, r12
    21e2:	9d 05       	cpc	r25, r13
    21e4:	a4 f4       	brge	.+40     	; 0x220e <color(char)+0x2c8>
    21e6:	82 e2       	ldi	r24, 0x22	; 34
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    21ee:	20 91 69 08 	lds	r18, 0x0869	; 0x800869 <clear>
    21f2:	30 91 6a 08 	lds	r19, 0x086A	; 0x80086a <clear+0x1>
    21f6:	ae 01       	movw	r20, r28
    21f8:	48 0f       	add	r20, r24
    21fa:	59 1f       	adc	r21, r25
    21fc:	24 17       	cp	r18, r20
    21fe:	35 07       	cpc	r19, r21
    2200:	34 f4       	brge	.+12     	; 0x220e <color(char)+0x2c8>
    2202:	8c 1b       	sub	r24, r28
    2204:	9d 0b       	sbc	r25, r29
    2206:	82 17       	cp	r24, r18
    2208:	93 07       	cpc	r25, r19
    220a:	0c f4       	brge	.+2      	; 0x220e <color(char)+0x2c8>
    220c:	1d c2       	rjmp	.+1082   	; 0x2648 <color(char)+0x702>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:348
      {color_out = GREEN;}//beep(1);}

    else if (blue > red && blue > green && red < EEPROM_read_int(blue_left_r) + range && red > EEPROM_read_int(blue_left_r) - range && green < EEPROM_read_int(blue_left_g) + range && green > EEPROM_read_int(blue_left_g) - range && blue < EEPROM_read_int(blue_left_b) + range && blue > EEPROM_read_int(blue_left_b) - range && clear < EEPROM_read_int(blue_left_c) + range && clear > EEPROM_read_int(blue_left_c) - range)
    220e:	ec 14       	cp	r14, r12
    2210:	fd 04       	cpc	r15, r13
    2212:	0c f4       	brge	.+2      	; 0x2216 <color(char)+0x2d0>
    2214:	4f c0       	rjmp	.+158    	; 0x22b4 <color(char)+0x36e>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:351
      color_out = BLUE;

    else if (red < EEPROM_read_int(yellow_left_r) + range && red > EEPROM_read_int(yellow_left_r) - range && green < EEPROM_read_int(yellow_left_g) + range && green > EEPROM_read_int(yellow_left_g) - range && blue < EEPROM_read_int(yellow_left_b) + range && blue > EEPROM_read_int(yellow_left_b) - range && clear < EEPROM_read_int(yellow_left_c) + range && clear > EEPROM_read_int(yellow_left_c) - range)
    2216:	8c e2       	ldi	r24, 0x2C	; 44
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    221e:	9e 01       	movw	r18, r28
    2220:	28 0f       	add	r18, r24
    2222:	39 1f       	adc	r19, r25
    2224:	e2 16       	cp	r14, r18
    2226:	f3 06       	cpc	r15, r19
    2228:	0c f4       	brge	.+2      	; 0x222c <color(char)+0x2e6>
    222a:	97 c0       	rjmp	.+302    	; 0x235a <color(char)+0x414>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:355
      color_out = YELLOW;

    else if (
      red <= (EEPROM_read_int(silver_left_r) + range) && red >= (EEPROM_read_int(silver_left_r) - range) && green >= (EEPROM_read_int(silver_left_g) - range) && green <= (EEPROM_read_int(silver_left_g) + range) && blue >= (EEPROM_read_int(silver_left_b) - range) && blue <= (EEPROM_read_int(silver_left_b) + range) && clear <= (EEPROM_read_int(silver_left_c) + range) && clear >= (EEPROM_read_int(silver_left_c) - range)) {
    222c:	84 e3       	ldi	r24, 0x34	; 52
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    2234:	9e 01       	movw	r18, r28
    2236:	28 0f       	add	r18, r24
    2238:	39 1f       	adc	r19, r25
    223a:	2e 15       	cp	r18, r14
    223c:	3f 05       	cpc	r19, r15
    223e:	bc f1       	brlt	.+110    	; 0x22ae <color(char)+0x368>
    2240:	8c 1b       	sub	r24, r28
    2242:	9d 0b       	sbc	r25, r29
    2244:	e8 16       	cp	r14, r24
    2246:	f9 06       	cpc	r15, r25
    2248:	94 f1       	brlt	.+100    	; 0x22ae <color(char)+0x368>
    224a:	86 e3       	ldi	r24, 0x36	; 54
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    2252:	9c 01       	movw	r18, r24
    2254:	2c 1b       	sub	r18, r28
    2256:	3d 0b       	sbc	r19, r29
    2258:	02 17       	cp	r16, r18
    225a:	13 07       	cpc	r17, r19
    225c:	44 f1       	brlt	.+80     	; 0x22ae <color(char)+0x368>
    225e:	8c 0f       	add	r24, r28
    2260:	9d 1f       	adc	r25, r29
    2262:	80 17       	cp	r24, r16
    2264:	91 07       	cpc	r25, r17
    2266:	1c f1       	brlt	.+70     	; 0x22ae <color(char)+0x368>
    2268:	88 e3       	ldi	r24, 0x38	; 56
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    2270:	9c 01       	movw	r18, r24
    2272:	2c 1b       	sub	r18, r28
    2274:	3d 0b       	sbc	r19, r29
    2276:	c2 16       	cp	r12, r18
    2278:	d3 06       	cpc	r13, r19
    227a:	cc f0       	brlt	.+50     	; 0x22ae <color(char)+0x368>
    227c:	8c 0f       	add	r24, r28
    227e:	9d 1f       	adc	r25, r29
    2280:	8c 15       	cp	r24, r12
    2282:	9d 05       	cpc	r25, r13
    2284:	a4 f0       	brlt	.+40     	; 0x22ae <color(char)+0x368>
    2286:	8a e3       	ldi	r24, 0x3A	; 58
    2288:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:378

    else if (red < EEPROM_read_int(yellow_right_r) + range && red > EEPROM_read_int(yellow_right_r) - range && green < EEPROM_read_int(yellow_right_g) + range && green > EEPROM_read_int(yellow_right_g) - range && blue < EEPROM_read_int(yellow_right_b) + range && blue > EEPROM_read_int(yellow_right_b) - range && clear < EEPROM_read_int(yellow_right_c) + range && clear > EEPROM_read_int(yellow_right_c) - range)
      color_out = YELLOW;

    else if (
      red <= (EEPROM_read_int(silver_right_r) + range) && red >= (EEPROM_read_int(silver_right_r) - range) && green >= (EEPROM_read_int(silver_right_g) - range) && green <= (EEPROM_read_int(silver_right_g) + range) && blue >= (EEPROM_read_int(silver_right_b) - range) && blue <= (EEPROM_read_int(silver_right_b) + range) && clear <= (EEPROM_read_int(silver_right_c) + range) && clear >= (EEPROM_read_int(silver_right_c) - range)) {
    228a:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    228e:	20 91 69 08 	lds	r18, 0x0869	; 0x800869 <clear>
    2292:	30 91 6a 08 	lds	r19, 0x086A	; 0x80086a <clear+0x1>
    2296:	ae 01       	movw	r20, r28
    2298:	48 0f       	add	r20, r24
    229a:	59 1f       	adc	r21, r25
    229c:	42 17       	cp	r20, r18
    229e:	53 07       	cpc	r21, r19
    22a0:	34 f0       	brlt	.+12     	; 0x22ae <color(char)+0x368>
    22a2:	8c 1b       	sub	r24, r28
    22a4:	9d 0b       	sbc	r25, r29
    22a6:	28 17       	cp	r18, r24
    22a8:	39 07       	cpc	r19, r25
    22aa:	0c f0       	brlt	.+2      	; 0x22ae <color(char)+0x368>
    22ac:	0e c2       	rjmp	.+1052   	; 0x26ca <color(char)+0x784>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:395

    else if (green > red && green > blue && red < EEPROM_read_int(green_front_r) + range && red > EEPROM_read_int(green_front_r) - range && green < EEPROM_read_int(green_front_g) + range && green > EEPROM_read_int(green_front_g) - range && blue < EEPROM_read_int(green_front_b) + range && blue > EEPROM_read_int(green_front_b) - range && clear < EEPROM_read_int(green_front_c) + range && clear > EEPROM_read_int(green_front_c) - range)
      color_out = GREEN;

    else
      color_out = WHITE;
    22ae:	87 e0       	ldi	r24, 0x07	; 7
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	4e c0       	rjmp	.+156    	; 0x2350 <color(char)+0x40a>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:348
            
    //else if (green > red && green > blue && red < EEPROM_read_int(green_left_r) + range && red > EEPROM_read_int(green_left_r) - range && green > EEPROM_read_int(green_left_g)-range/2 && green < EEPROM_read_int(green_left_g) + range && blue < EEPROM_read_int(green_left_b) + range && blue > EEPROM_read_int(green_left_b) - range /*&& clear < EEPROM_read_int(green_left_c) + range*/ && clear > EEPROM_read_int(green_left_c) - range/2)
    else if(green > red && green > blue && red < EEPROM_read_int(green_left_r) + range && red > EEPROM_read_int(green_left_r) - range && green < EEPROM_read_int(green_left_g) + range && green > EEPROM_read_int(green_left_g) - range && blue < EEPROM_read_int(green_left_b) + range && blue > EEPROM_read_int(green_left_b) - range && clear < EEPROM_read_int(green_left_c) + range && clear > EEPROM_read_int(green_left_c) - range)
      {color_out = GREEN;}//beep(1);}

    else if (blue > red && blue > green && red < EEPROM_read_int(blue_left_r) + range && red > EEPROM_read_int(blue_left_r) - range && green < EEPROM_read_int(blue_left_g) + range && green > EEPROM_read_int(blue_left_g) - range && blue < EEPROM_read_int(blue_left_b) + range && blue > EEPROM_read_int(blue_left_b) - range && clear < EEPROM_read_int(blue_left_c) + range && clear > EEPROM_read_int(blue_left_c) - range)
    22b4:	0c 15       	cp	r16, r12
    22b6:	1d 05       	cpc	r17, r13
    22b8:	0c f0       	brlt	.+2      	; 0x22bc <color(char)+0x376>
    22ba:	ad cf       	rjmp	.-166    	; 0x2216 <color(char)+0x2d0>
    22bc:	84 e2       	ldi	r24, 0x24	; 36
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    22c4:	9e 01       	movw	r18, r28
    22c6:	28 0f       	add	r18, r24
    22c8:	39 1f       	adc	r19, r25
    22ca:	e2 16       	cp	r14, r18
    22cc:	f3 06       	cpc	r15, r19
    22ce:	0c f0       	brlt	.+2      	; 0x22d2 <color(char)+0x38c>
    22d0:	a2 cf       	rjmp	.-188    	; 0x2216 <color(char)+0x2d0>
    22d2:	8c 1b       	sub	r24, r28
    22d4:	9d 0b       	sbc	r25, r29
    22d6:	8e 15       	cp	r24, r14
    22d8:	9f 05       	cpc	r25, r15
    22da:	0c f0       	brlt	.+2      	; 0x22de <color(char)+0x398>
    22dc:	9c cf       	rjmp	.-200    	; 0x2216 <color(char)+0x2d0>
    22de:	86 e2       	ldi	r24, 0x26	; 38
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    22e6:	9e 01       	movw	r18, r28
    22e8:	28 0f       	add	r18, r24
    22ea:	39 1f       	adc	r19, r25
    22ec:	02 17       	cp	r16, r18
    22ee:	13 07       	cpc	r17, r19
    22f0:	0c f0       	brlt	.+2      	; 0x22f4 <color(char)+0x3ae>
    22f2:	91 cf       	rjmp	.-222    	; 0x2216 <color(char)+0x2d0>
    22f4:	8c 1b       	sub	r24, r28
    22f6:	9d 0b       	sbc	r25, r29
    22f8:	80 17       	cp	r24, r16
    22fa:	91 07       	cpc	r25, r17
    22fc:	0c f0       	brlt	.+2      	; 0x2300 <color(char)+0x3ba>
    22fe:	8b cf       	rjmp	.-234    	; 0x2216 <color(char)+0x2d0>
    2300:	88 e2       	ldi	r24, 0x28	; 40
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    2308:	9e 01       	movw	r18, r28
    230a:	28 0f       	add	r18, r24
    230c:	39 1f       	adc	r19, r25
    230e:	c2 16       	cp	r12, r18
    2310:	d3 06       	cpc	r13, r19
    2312:	0c f0       	brlt	.+2      	; 0x2316 <color(char)+0x3d0>
    2314:	80 cf       	rjmp	.-256    	; 0x2216 <color(char)+0x2d0>
    2316:	8c 1b       	sub	r24, r28
    2318:	9d 0b       	sbc	r25, r29
    231a:	8c 15       	cp	r24, r12
    231c:	9d 05       	cpc	r25, r13
    231e:	0c f0       	brlt	.+2      	; 0x2322 <color(char)+0x3dc>
    2320:	7a cf       	rjmp	.-268    	; 0x2216 <color(char)+0x2d0>
    2322:	8a e2       	ldi	r24, 0x2A	; 42
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    232a:	20 91 69 08 	lds	r18, 0x0869	; 0x800869 <clear>
    232e:	30 91 6a 08 	lds	r19, 0x086A	; 0x80086a <clear+0x1>
    2332:	ae 01       	movw	r20, r28
    2334:	48 0f       	add	r20, r24
    2336:	59 1f       	adc	r21, r25
    2338:	24 17       	cp	r18, r20
    233a:	35 07       	cpc	r19, r21
    233c:	0c f0       	brlt	.+2      	; 0x2340 <color(char)+0x3fa>
    233e:	6b cf       	rjmp	.-298    	; 0x2216 <color(char)+0x2d0>
    2340:	8c 1b       	sub	r24, r28
    2342:	9d 0b       	sbc	r25, r29
    2344:	82 17       	cp	r24, r18
    2346:	93 07       	cpc	r25, r19
    2348:	0c f0       	brlt	.+2      	; 0x234c <color(char)+0x406>
    234a:	65 cf       	rjmp	.-310    	; 0x2216 <color(char)+0x2d0>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:372
    //else if (green > red && green > blue && red < EEPROM_read_int(green_right_r) + range && red > EEPROM_read_int(green_right_r) - range && green > EEPROM_read_int(green_right_g)-range/2 && green < EEPROM_read_int(green_right_g) + range && blue < EEPROM_read_int(green_right_b) + range && blue > EEPROM_read_int(green_right_b) - range /*&&  clear < EEPROM_read_int(green_right_c) + range */ && clear > EEPROM_read_int(green_right_c) - range/2)
      else if (green > red && green > blue && red < EEPROM_read_int(green_right_r) + range && red > EEPROM_read_int(green_right_r) - range && green < EEPROM_read_int(green_right_g) + range && green > EEPROM_read_int(green_right_g) - range && blue < EEPROM_read_int(green_right_b) + range && blue > EEPROM_read_int(green_right_b) - range && clear < EEPROM_read_int(green_right_c) + range && clear > EEPROM_read_int(green_right_c) - range)
      color_out = GREEN;

    else if (blue > red && blue > green && red < EEPROM_read_int(blue_right_r) + range && red > EEPROM_read_int(blue_right_r) - range && green < EEPROM_read_int(blue_right_g) + range && green > EEPROM_read_int(blue_right_g) - range && blue < EEPROM_read_int(blue_right_b) + range && blue > EEPROM_read_int(blue_right_b) - range && clear < EEPROM_read_int(blue_right_c) + range && clear > EEPROM_read_int(blue_right_c) - range)
      color_out = BLUE;
    234c:	82 e0       	ldi	r24, 0x02	; 2
    234e:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:392
  {
    if (red > green && red > blue && red < EEPROM_read_int(red_front_r) + range && red > EEPROM_read_int(red_front_r) - range && green < EEPROM_read_int(red_front_g) + range && green > EEPROM_read_int(red_front_g) - range && blue < EEPROM_read_int(red_front_b) + range && blue > EEPROM_read_int(red_front_b) - range && clear < EEPROM_read_int(red_front_c) + range && clear > EEPROM_read_int(red_front_c) - range)
      color_out = RED;

    else if (green > red && green > blue && red < EEPROM_read_int(green_front_r) + range && red > EEPROM_read_int(green_front_r) - range && green < EEPROM_read_int(green_front_g) + range && green > EEPROM_read_int(green_front_g) - range && blue < EEPROM_read_int(green_front_b) + range && blue > EEPROM_read_int(green_front_b) - range && clear < EEPROM_read_int(green_front_c) + range && clear > EEPROM_read_int(green_front_c) - range)
      color_out = GREEN;
    2350:	90 93 21 08 	sts	0x0821, r25	; 0x800821 <color_out+0x1>
    2354:	80 93 20 08 	sts	0x0820, r24	; 0x800820 <color_out>
    2358:	ec ce       	rjmp	.-552    	; 0x2132 <color(char)+0x1ec>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:351
      {color_out = GREEN;}//beep(1);}

    else if (blue > red && blue > green && red < EEPROM_read_int(blue_left_r) + range && red > EEPROM_read_int(blue_left_r) - range && green < EEPROM_read_int(blue_left_g) + range && green > EEPROM_read_int(blue_left_g) - range && blue < EEPROM_read_int(blue_left_b) + range && blue > EEPROM_read_int(blue_left_b) - range && clear < EEPROM_read_int(blue_left_c) + range && clear > EEPROM_read_int(blue_left_c) - range)
      color_out = BLUE;

    else if (red < EEPROM_read_int(yellow_left_r) + range && red > EEPROM_read_int(yellow_left_r) - range && green < EEPROM_read_int(yellow_left_g) + range && green > EEPROM_read_int(yellow_left_g) - range && blue < EEPROM_read_int(yellow_left_b) + range && blue > EEPROM_read_int(yellow_left_b) - range && clear < EEPROM_read_int(yellow_left_c) + range && clear > EEPROM_read_int(yellow_left_c) - range)
    235a:	8c 1b       	sub	r24, r28
    235c:	9d 0b       	sbc	r25, r29
    235e:	8e 15       	cp	r24, r14
    2360:	9f 05       	cpc	r25, r15
    2362:	0c f0       	brlt	.+2      	; 0x2366 <color(char)+0x420>
    2364:	63 cf       	rjmp	.-314    	; 0x222c <color(char)+0x2e6>
    2366:	8e e2       	ldi	r24, 0x2E	; 46
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    236e:	9e 01       	movw	r18, r28
    2370:	28 0f       	add	r18, r24
    2372:	39 1f       	adc	r19, r25
    2374:	02 17       	cp	r16, r18
    2376:	13 07       	cpc	r17, r19
    2378:	0c f0       	brlt	.+2      	; 0x237c <color(char)+0x436>
    237a:	58 cf       	rjmp	.-336    	; 0x222c <color(char)+0x2e6>
    237c:	8c 1b       	sub	r24, r28
    237e:	9d 0b       	sbc	r25, r29
    2380:	80 17       	cp	r24, r16
    2382:	91 07       	cpc	r25, r17
    2384:	0c f0       	brlt	.+2      	; 0x2388 <color(char)+0x442>
    2386:	52 cf       	rjmp	.-348    	; 0x222c <color(char)+0x2e6>
    2388:	80 e3       	ldi	r24, 0x30	; 48
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    2390:	9e 01       	movw	r18, r28
    2392:	28 0f       	add	r18, r24
    2394:	39 1f       	adc	r19, r25
    2396:	c2 16       	cp	r12, r18
    2398:	d3 06       	cpc	r13, r19
    239a:	0c f0       	brlt	.+2      	; 0x239e <color(char)+0x458>
    239c:	47 cf       	rjmp	.-370    	; 0x222c <color(char)+0x2e6>
    239e:	8c 1b       	sub	r24, r28
    23a0:	9d 0b       	sbc	r25, r29
    23a2:	8c 15       	cp	r24, r12
    23a4:	9d 05       	cpc	r25, r13
    23a6:	0c f0       	brlt	.+2      	; 0x23aa <color(char)+0x464>
    23a8:	41 cf       	rjmp	.-382    	; 0x222c <color(char)+0x2e6>
    23aa:	82 e3       	ldi	r24, 0x32	; 50
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    23b2:	20 91 69 08 	lds	r18, 0x0869	; 0x800869 <clear>
    23b6:	30 91 6a 08 	lds	r19, 0x086A	; 0x80086a <clear+0x1>
    23ba:	ae 01       	movw	r20, r28
    23bc:	48 0f       	add	r20, r24
    23be:	59 1f       	adc	r21, r25
    23c0:	24 17       	cp	r18, r20
    23c2:	35 07       	cpc	r19, r21
    23c4:	0c f0       	brlt	.+2      	; 0x23c8 <color(char)+0x482>
    23c6:	32 cf       	rjmp	.-412    	; 0x222c <color(char)+0x2e6>
    23c8:	8c 1b       	sub	r24, r28
    23ca:	9d 0b       	sbc	r25, r29
    23cc:	82 17       	cp	r24, r18
    23ce:	93 07       	cpc	r25, r19
    23d0:	0c f0       	brlt	.+2      	; 0x23d4 <color(char)+0x48e>
    23d2:	2c cf       	rjmp	.-424    	; 0x222c <color(char)+0x2e6>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:375

    else if (blue > red && blue > green && red < EEPROM_read_int(blue_right_r) + range && red > EEPROM_read_int(blue_right_r) - range && green < EEPROM_read_int(blue_right_g) + range && green > EEPROM_read_int(blue_right_g) - range && blue < EEPROM_read_int(blue_right_b) + range && blue > EEPROM_read_int(blue_right_b) - range && clear < EEPROM_read_int(blue_right_c) + range && clear > EEPROM_read_int(blue_right_c) - range)
      color_out = BLUE;

    else if (red < EEPROM_read_int(yellow_right_r) + range && red > EEPROM_read_int(yellow_right_r) - range && green < EEPROM_read_int(yellow_right_g) + range && green > EEPROM_read_int(yellow_right_g) - range && blue < EEPROM_read_int(yellow_right_b) + range && blue > EEPROM_read_int(yellow_right_b) - range && clear < EEPROM_read_int(yellow_right_c) + range && clear > EEPROM_read_int(yellow_right_c) - range)
      color_out = YELLOW;
    23d4:	84 e0       	ldi	r24, 0x04	; 4
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	bb cf       	rjmp	.-138    	; 0x2350 <color(char)+0x40a>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:363

    else
      color_out = WHITE;

    return color_out;
  } else if (select == 2)  // right
    23da:	82 e0       	ldi	r24, 0x02	; 2
    23dc:	d8 12       	cpse	r13, r24
    23de:	78 c1       	rjmp	.+752    	; 0x26d0 <color(char)+0x78a>
    23e0:	c0 90 6b 08 	lds	r12, 0x086B	; 0x80086b <blue>
    23e4:	d0 90 6c 08 	lds	r13, 0x086C	; 0x80086c <blue+0x1>
    23e8:	8a e9       	ldi	r24, 0x9A	; 154
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    23f0:	ec 01       	movw	r28, r24
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:365
  {
    if (red > green && red > blue && red < EEPROM_read_int(red_right_r) + range && red > EEPROM_read_int(red_right_r) - range && green < EEPROM_read_int(red_right_g) + range && green > EEPROM_read_int(red_right_g) - range && blue < EEPROM_read_int(red_right_b) + range && blue > EEPROM_read_int(red_right_b) - range && clear < EEPROM_read_int(red_right_c) + range && clear > EEPROM_read_int(red_right_c) - range)
    23f2:	0e 15       	cp	r16, r14
    23f4:	1f 05       	cpc	r17, r15
    23f6:	0c f0       	brlt	.+2      	; 0x23fa <color(char)+0x4b4>
    23f8:	86 c0       	rjmp	.+268    	; 0x2506 <color(char)+0x5c0>
    23fa:	ce 14       	cp	r12, r14
    23fc:	df 04       	cpc	r13, r15
    23fe:	0c f0       	brlt	.+2      	; 0x2402 <color(char)+0x4bc>
    2400:	86 c0       	rjmp	.+268    	; 0x250e <color(char)+0x5c8>
    2402:	8c e3       	ldi	r24, 0x3C	; 60
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    240a:	9e 01       	movw	r18, r28
    240c:	28 0f       	add	r18, r24
    240e:	39 1f       	adc	r19, r25
    2410:	e2 16       	cp	r14, r18
    2412:	f3 06       	cpc	r15, r19
    2414:	bc f5       	brge	.+110    	; 0x2484 <color(char)+0x53e>
    2416:	8c 1b       	sub	r24, r28
    2418:	9d 0b       	sbc	r25, r29
    241a:	8e 15       	cp	r24, r14
    241c:	9f 05       	cpc	r25, r15
    241e:	94 f5       	brge	.+100    	; 0x2484 <color(char)+0x53e>
    2420:	8e e3       	ldi	r24, 0x3E	; 62
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    2428:	9e 01       	movw	r18, r28
    242a:	28 0f       	add	r18, r24
    242c:	39 1f       	adc	r19, r25
    242e:	02 17       	cp	r16, r18
    2430:	13 07       	cpc	r17, r19
    2432:	44 f5       	brge	.+80     	; 0x2484 <color(char)+0x53e>
    2434:	8c 1b       	sub	r24, r28
    2436:	9d 0b       	sbc	r25, r29
    2438:	80 17       	cp	r24, r16
    243a:	91 07       	cpc	r25, r17
    243c:	1c f5       	brge	.+70     	; 0x2484 <color(char)+0x53e>
    243e:	80 e4       	ldi	r24, 0x40	; 64
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    2446:	9e 01       	movw	r18, r28
    2448:	28 0f       	add	r18, r24
    244a:	39 1f       	adc	r19, r25
    244c:	c2 16       	cp	r12, r18
    244e:	d3 06       	cpc	r13, r19
    2450:	cc f4       	brge	.+50     	; 0x2484 <color(char)+0x53e>
    2452:	8c 1b       	sub	r24, r28
    2454:	9d 0b       	sbc	r25, r29
    2456:	8c 15       	cp	r24, r12
    2458:	9d 05       	cpc	r25, r13
    245a:	a4 f4       	brge	.+40     	; 0x2484 <color(char)+0x53e>
    245c:	82 e4       	ldi	r24, 0x42	; 66
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    2464:	20 91 69 08 	lds	r18, 0x0869	; 0x800869 <clear>
    2468:	30 91 6a 08 	lds	r19, 0x086A	; 0x80086a <clear+0x1>
    246c:	ae 01       	movw	r20, r28
    246e:	48 0f       	add	r20, r24
    2470:	59 1f       	adc	r21, r25
    2472:	24 17       	cp	r18, r20
    2474:	35 07       	cpc	r19, r21
    2476:	34 f4       	brge	.+12     	; 0x2484 <color(char)+0x53e>
    2478:	8c 1b       	sub	r24, r28
    247a:	9d 0b       	sbc	r25, r29
    247c:	82 17       	cp	r24, r18
    247e:	93 07       	cpc	r25, r19
    2480:	0c f4       	brge	.+2      	; 0x2484 <color(char)+0x53e>
    2482:	53 ce       	rjmp	.-858    	; 0x212a <color(char)+0x1e4>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:374
      color_out = GREEN;

    else if (blue > red && blue > green && red < EEPROM_read_int(blue_right_r) + range && red > EEPROM_read_int(blue_right_r) - range && green < EEPROM_read_int(blue_right_g) + range && green > EEPROM_read_int(blue_right_g) - range && blue < EEPROM_read_int(blue_right_b) + range && blue > EEPROM_read_int(blue_right_b) - range && clear < EEPROM_read_int(blue_right_c) + range && clear > EEPROM_read_int(blue_right_c) - range)
      color_out = BLUE;

    else if (red < EEPROM_read_int(yellow_right_r) + range && red > EEPROM_read_int(yellow_right_r) - range && green < EEPROM_read_int(yellow_right_g) + range && green > EEPROM_read_int(yellow_right_g) - range && blue < EEPROM_read_int(yellow_right_b) + range && blue > EEPROM_read_int(yellow_right_b) - range && clear < EEPROM_read_int(yellow_right_c) + range && clear > EEPROM_read_int(yellow_right_c) - range)
    2484:	84 e5       	ldi	r24, 0x54	; 84
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    248c:	9e 01       	movw	r18, r28
    248e:	28 0f       	add	r18, r24
    2490:	39 1f       	adc	r19, r25
    2492:	e2 16       	cp	r14, r18
    2494:	f3 06       	cpc	r15, r19
    2496:	0c f4       	brge	.+2      	; 0x249a <color(char)+0x554>
    2498:	da c0       	rjmp	.+436    	; 0x264e <color(char)+0x708>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:378
      color_out = YELLOW;

    else if (
      red <= (EEPROM_read_int(silver_right_r) + range) && red >= (EEPROM_read_int(silver_right_r) - range) && green >= (EEPROM_read_int(silver_right_g) - range) && green <= (EEPROM_read_int(silver_right_g) + range) && blue >= (EEPROM_read_int(silver_right_b) - range) && blue <= (EEPROM_read_int(silver_right_b) + range) && clear <= (EEPROM_read_int(silver_right_c) + range) && clear >= (EEPROM_read_int(silver_right_c) - range)) {
    249a:	8c e5       	ldi	r24, 0x5C	; 92
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    24a2:	9e 01       	movw	r18, r28
    24a4:	28 0f       	add	r18, r24
    24a6:	39 1f       	adc	r19, r25
    24a8:	2e 15       	cp	r18, r14
    24aa:	3f 05       	cpc	r19, r15
    24ac:	0c f4       	brge	.+2      	; 0x24b0 <color(char)+0x56a>
    24ae:	ff ce       	rjmp	.-514    	; 0x22ae <color(char)+0x368>
    24b0:	8c 1b       	sub	r24, r28
    24b2:	9d 0b       	sbc	r25, r29
    24b4:	e8 16       	cp	r14, r24
    24b6:	f9 06       	cpc	r15, r25
    24b8:	0c f4       	brge	.+2      	; 0x24bc <color(char)+0x576>
    24ba:	f9 ce       	rjmp	.-526    	; 0x22ae <color(char)+0x368>
    24bc:	8e e5       	ldi	r24, 0x5E	; 94
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    24c4:	9c 01       	movw	r18, r24
    24c6:	2c 1b       	sub	r18, r28
    24c8:	3d 0b       	sbc	r19, r29
    24ca:	02 17       	cp	r16, r18
    24cc:	13 07       	cpc	r17, r19
    24ce:	0c f4       	brge	.+2      	; 0x24d2 <color(char)+0x58c>
    24d0:	ee ce       	rjmp	.-548    	; 0x22ae <color(char)+0x368>
    24d2:	8c 0f       	add	r24, r28
    24d4:	9d 1f       	adc	r25, r29
    24d6:	80 17       	cp	r24, r16
    24d8:	91 07       	cpc	r25, r17
    24da:	0c f4       	brge	.+2      	; 0x24de <color(char)+0x598>
    24dc:	e8 ce       	rjmp	.-560    	; 0x22ae <color(char)+0x368>
    24de:	80 e6       	ldi	r24, 0x60	; 96
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    24e6:	9c 01       	movw	r18, r24
    24e8:	2c 1b       	sub	r18, r28
    24ea:	3d 0b       	sbc	r19, r29
    24ec:	c2 16       	cp	r12, r18
    24ee:	d3 06       	cpc	r13, r19
    24f0:	0c f4       	brge	.+2      	; 0x24f4 <color(char)+0x5ae>
    24f2:	dd ce       	rjmp	.-582    	; 0x22ae <color(char)+0x368>
    24f4:	8c 0f       	add	r24, r28
    24f6:	9d 1f       	adc	r25, r29
    24f8:	8c 15       	cp	r24, r12
    24fa:	9d 05       	cpc	r25, r13
    24fc:	0c f4       	brge	.+2      	; 0x2500 <color(char)+0x5ba>
    24fe:	d7 ce       	rjmp	.-594    	; 0x22ae <color(char)+0x368>
    2500:	82 e6       	ldi	r24, 0x62	; 98
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	c2 ce       	rjmp	.-636    	; 0x228a <color(char)+0x344>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:368
  } else if (select == 2)  // right
  {
    if (red > green && red > blue && red < EEPROM_read_int(red_right_r) + range && red > EEPROM_read_int(red_right_r) - range && green < EEPROM_read_int(red_right_g) + range && green > EEPROM_read_int(red_right_g) - range && blue < EEPROM_read_int(red_right_b) + range && blue > EEPROM_read_int(red_right_b) - range && clear < EEPROM_read_int(red_right_c) + range && clear > EEPROM_read_int(red_right_c) - range)
      color_out = RED;
    //else if (green > red && green > blue && red < EEPROM_read_int(green_right_r) + range && red > EEPROM_read_int(green_right_r) - range && green > EEPROM_read_int(green_right_g)-range/2 && green < EEPROM_read_int(green_right_g) + range && blue < EEPROM_read_int(green_right_b) + range && blue > EEPROM_read_int(green_right_b) - range /*&&  clear < EEPROM_read_int(green_right_c) + range */ && clear > EEPROM_read_int(green_right_c) - range/2)
      else if (green > red && green > blue && red < EEPROM_read_int(green_right_r) + range && red > EEPROM_read_int(green_right_r) - range && green < EEPROM_read_int(green_right_g) + range && green > EEPROM_read_int(green_right_g) - range && blue < EEPROM_read_int(green_right_b) + range && blue > EEPROM_read_int(green_right_b) - range && clear < EEPROM_read_int(green_right_c) + range && clear > EEPROM_read_int(green_right_c) - range)
    2506:	e0 16       	cp	r14, r16
    2508:	f1 06       	cpc	r15, r17
    250a:	0c f4       	brge	.+2      	; 0x250e <color(char)+0x5c8>
    250c:	51 c0       	rjmp	.+162    	; 0x25b0 <color(char)+0x66a>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:371
      color_out = GREEN;

    else if (blue > red && blue > green && red < EEPROM_read_int(blue_right_r) + range && red > EEPROM_read_int(blue_right_r) - range && green < EEPROM_read_int(blue_right_g) + range && green > EEPROM_read_int(blue_right_g) - range && blue < EEPROM_read_int(blue_right_b) + range && blue > EEPROM_read_int(blue_right_b) - range && clear < EEPROM_read_int(blue_right_c) + range && clear > EEPROM_read_int(blue_right_c) - range)
    250e:	ec 14       	cp	r14, r12
    2510:	fd 04       	cpc	r15, r13
    2512:	0c f0       	brlt	.+2      	; 0x2516 <color(char)+0x5d0>
    2514:	b7 cf       	rjmp	.-146    	; 0x2484 <color(char)+0x53e>
    2516:	0c 15       	cp	r16, r12
    2518:	1d 05       	cpc	r17, r13
    251a:	0c f0       	brlt	.+2      	; 0x251e <color(char)+0x5d8>
    251c:	b3 cf       	rjmp	.-154    	; 0x2484 <color(char)+0x53e>
    251e:	8c e4       	ldi	r24, 0x4C	; 76
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    2526:	9e 01       	movw	r18, r28
    2528:	28 0f       	add	r18, r24
    252a:	39 1f       	adc	r19, r25
    252c:	e2 16       	cp	r14, r18
    252e:	f3 06       	cpc	r15, r19
    2530:	0c f0       	brlt	.+2      	; 0x2534 <color(char)+0x5ee>
    2532:	a8 cf       	rjmp	.-176    	; 0x2484 <color(char)+0x53e>
    2534:	8c 1b       	sub	r24, r28
    2536:	9d 0b       	sbc	r25, r29
    2538:	8e 15       	cp	r24, r14
    253a:	9f 05       	cpc	r25, r15
    253c:	0c f0       	brlt	.+2      	; 0x2540 <color(char)+0x5fa>
    253e:	a2 cf       	rjmp	.-188    	; 0x2484 <color(char)+0x53e>
    2540:	8e e4       	ldi	r24, 0x4E	; 78
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    2548:	9e 01       	movw	r18, r28
    254a:	28 0f       	add	r18, r24
    254c:	39 1f       	adc	r19, r25
    254e:	02 17       	cp	r16, r18
    2550:	13 07       	cpc	r17, r19
    2552:	0c f0       	brlt	.+2      	; 0x2556 <color(char)+0x610>
    2554:	97 cf       	rjmp	.-210    	; 0x2484 <color(char)+0x53e>
    2556:	8c 1b       	sub	r24, r28
    2558:	9d 0b       	sbc	r25, r29
    255a:	80 17       	cp	r24, r16
    255c:	91 07       	cpc	r25, r17
    255e:	0c f0       	brlt	.+2      	; 0x2562 <color(char)+0x61c>
    2560:	91 cf       	rjmp	.-222    	; 0x2484 <color(char)+0x53e>
    2562:	80 e5       	ldi	r24, 0x50	; 80
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    256a:	9e 01       	movw	r18, r28
    256c:	28 0f       	add	r18, r24
    256e:	39 1f       	adc	r19, r25
    2570:	c2 16       	cp	r12, r18
    2572:	d3 06       	cpc	r13, r19
    2574:	0c f0       	brlt	.+2      	; 0x2578 <color(char)+0x632>
    2576:	86 cf       	rjmp	.-244    	; 0x2484 <color(char)+0x53e>
    2578:	8c 1b       	sub	r24, r28
    257a:	9d 0b       	sbc	r25, r29
    257c:	8c 15       	cp	r24, r12
    257e:	9d 05       	cpc	r25, r13
    2580:	0c f0       	brlt	.+2      	; 0x2584 <color(char)+0x63e>
    2582:	80 cf       	rjmp	.-256    	; 0x2484 <color(char)+0x53e>
    2584:	82 e5       	ldi	r24, 0x52	; 82
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    258c:	20 91 69 08 	lds	r18, 0x0869	; 0x800869 <clear>
    2590:	30 91 6a 08 	lds	r19, 0x086A	; 0x80086a <clear+0x1>
    2594:	ae 01       	movw	r20, r28
    2596:	48 0f       	add	r20, r24
    2598:	59 1f       	adc	r21, r25
    259a:	24 17       	cp	r18, r20
    259c:	35 07       	cpc	r19, r21
    259e:	0c f0       	brlt	.+2      	; 0x25a2 <color(char)+0x65c>
    25a0:	71 cf       	rjmp	.-286    	; 0x2484 <color(char)+0x53e>
    25a2:	8c 1b       	sub	r24, r28
    25a4:	9d 0b       	sbc	r25, r29
    25a6:	82 17       	cp	r24, r18
    25a8:	93 07       	cpc	r25, r19
    25aa:	0c f4       	brge	.+2      	; 0x25ae <color(char)+0x668>
    25ac:	cf ce       	rjmp	.-610    	; 0x234c <color(char)+0x406>
    25ae:	6a cf       	rjmp	.-300    	; 0x2484 <color(char)+0x53e>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:368
  } else if (select == 2)  // right
  {
    if (red > green && red > blue && red < EEPROM_read_int(red_right_r) + range && red > EEPROM_read_int(red_right_r) - range && green < EEPROM_read_int(red_right_g) + range && green > EEPROM_read_int(red_right_g) - range && blue < EEPROM_read_int(red_right_b) + range && blue > EEPROM_read_int(red_right_b) - range && clear < EEPROM_read_int(red_right_c) + range && clear > EEPROM_read_int(red_right_c) - range)
      color_out = RED;
    //else if (green > red && green > blue && red < EEPROM_read_int(green_right_r) + range && red > EEPROM_read_int(green_right_r) - range && green > EEPROM_read_int(green_right_g)-range/2 && green < EEPROM_read_int(green_right_g) + range && blue < EEPROM_read_int(green_right_b) + range && blue > EEPROM_read_int(green_right_b) - range /*&&  clear < EEPROM_read_int(green_right_c) + range */ && clear > EEPROM_read_int(green_right_c) - range/2)
      else if (green > red && green > blue && red < EEPROM_read_int(green_right_r) + range && red > EEPROM_read_int(green_right_r) - range && green < EEPROM_read_int(green_right_g) + range && green > EEPROM_read_int(green_right_g) - range && blue < EEPROM_read_int(green_right_b) + range && blue > EEPROM_read_int(green_right_b) - range && clear < EEPROM_read_int(green_right_c) + range && clear > EEPROM_read_int(green_right_c) - range)
    25b0:	c0 16       	cp	r12, r16
    25b2:	d1 06       	cpc	r13, r17
    25b4:	0c f0       	brlt	.+2      	; 0x25b8 <color(char)+0x672>
    25b6:	ab cf       	rjmp	.-170    	; 0x250e <color(char)+0x5c8>
    25b8:	84 e4       	ldi	r24, 0x44	; 68
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    25c0:	9e 01       	movw	r18, r28
    25c2:	28 0f       	add	r18, r24
    25c4:	39 1f       	adc	r19, r25
    25c6:	e2 16       	cp	r14, r18
    25c8:	f3 06       	cpc	r15, r19
    25ca:	0c f0       	brlt	.+2      	; 0x25ce <color(char)+0x688>
    25cc:	a0 cf       	rjmp	.-192    	; 0x250e <color(char)+0x5c8>
    25ce:	8c 1b       	sub	r24, r28
    25d0:	9d 0b       	sbc	r25, r29
    25d2:	8e 15       	cp	r24, r14
    25d4:	9f 05       	cpc	r25, r15
    25d6:	0c f0       	brlt	.+2      	; 0x25da <color(char)+0x694>
    25d8:	9a cf       	rjmp	.-204    	; 0x250e <color(char)+0x5c8>
    25da:	86 e4       	ldi	r24, 0x46	; 70
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    25e2:	9e 01       	movw	r18, r28
    25e4:	28 0f       	add	r18, r24
    25e6:	39 1f       	adc	r19, r25
    25e8:	02 17       	cp	r16, r18
    25ea:	13 07       	cpc	r17, r19
    25ec:	0c f0       	brlt	.+2      	; 0x25f0 <color(char)+0x6aa>
    25ee:	8f cf       	rjmp	.-226    	; 0x250e <color(char)+0x5c8>
    25f0:	8c 1b       	sub	r24, r28
    25f2:	9d 0b       	sbc	r25, r29
    25f4:	80 17       	cp	r24, r16
    25f6:	91 07       	cpc	r25, r17
    25f8:	0c f0       	brlt	.+2      	; 0x25fc <color(char)+0x6b6>
    25fa:	89 cf       	rjmp	.-238    	; 0x250e <color(char)+0x5c8>
    25fc:	88 e4       	ldi	r24, 0x48	; 72
    25fe:	90 e0       	ldi	r25, 0x00	; 0
    2600:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    2604:	9e 01       	movw	r18, r28
    2606:	28 0f       	add	r18, r24
    2608:	39 1f       	adc	r19, r25
    260a:	c2 16       	cp	r12, r18
    260c:	d3 06       	cpc	r13, r19
    260e:	0c f0       	brlt	.+2      	; 0x2612 <color(char)+0x6cc>
    2610:	7e cf       	rjmp	.-260    	; 0x250e <color(char)+0x5c8>
    2612:	8c 1b       	sub	r24, r28
    2614:	9d 0b       	sbc	r25, r29
    2616:	8c 15       	cp	r24, r12
    2618:	9d 05       	cpc	r25, r13
    261a:	0c f0       	brlt	.+2      	; 0x261e <color(char)+0x6d8>
    261c:	78 cf       	rjmp	.-272    	; 0x250e <color(char)+0x5c8>
    261e:	8a e4       	ldi	r24, 0x4A	; 74
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    2626:	20 91 69 08 	lds	r18, 0x0869	; 0x800869 <clear>
    262a:	30 91 6a 08 	lds	r19, 0x086A	; 0x80086a <clear+0x1>
    262e:	ae 01       	movw	r20, r28
    2630:	48 0f       	add	r20, r24
    2632:	59 1f       	adc	r21, r25
    2634:	24 17       	cp	r18, r20
    2636:	35 07       	cpc	r19, r21
    2638:	0c f0       	brlt	.+2      	; 0x263c <color(char)+0x6f6>
    263a:	69 cf       	rjmp	.-302    	; 0x250e <color(char)+0x5c8>
    263c:	8c 1b       	sub	r24, r28
    263e:	9d 0b       	sbc	r25, r29
    2640:	82 17       	cp	r24, r18
    2642:	93 07       	cpc	r25, r19
    2644:	0c f0       	brlt	.+2      	; 0x2648 <color(char)+0x702>
    2646:	63 cf       	rjmp	.-314    	; 0x250e <color(char)+0x5c8>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:392
  {
    if (red > green && red > blue && red < EEPROM_read_int(red_front_r) + range && red > EEPROM_read_int(red_front_r) - range && green < EEPROM_read_int(red_front_g) + range && green > EEPROM_read_int(red_front_g) - range && blue < EEPROM_read_int(red_front_b) + range && blue > EEPROM_read_int(red_front_b) - range && clear < EEPROM_read_int(red_front_c) + range && clear > EEPROM_read_int(red_front_c) - range)
      color_out = RED;

    else if (green > red && green > blue && red < EEPROM_read_int(green_front_r) + range && red > EEPROM_read_int(green_front_r) - range && green < EEPROM_read_int(green_front_g) + range && green > EEPROM_read_int(green_front_g) - range && blue < EEPROM_read_int(green_front_b) + range && blue > EEPROM_read_int(green_front_b) - range && clear < EEPROM_read_int(green_front_c) + range && clear > EEPROM_read_int(green_front_c) - range)
      color_out = GREEN;
    2648:	81 e0       	ldi	r24, 0x01	; 1
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	81 ce       	rjmp	.-766    	; 0x2350 <color(char)+0x40a>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:374
      color_out = GREEN;

    else if (blue > red && blue > green && red < EEPROM_read_int(blue_right_r) + range && red > EEPROM_read_int(blue_right_r) - range && green < EEPROM_read_int(blue_right_g) + range && green > EEPROM_read_int(blue_right_g) - range && blue < EEPROM_read_int(blue_right_b) + range && blue > EEPROM_read_int(blue_right_b) - range && clear < EEPROM_read_int(blue_right_c) + range && clear > EEPROM_read_int(blue_right_c) - range)
      color_out = BLUE;

    else if (red < EEPROM_read_int(yellow_right_r) + range && red > EEPROM_read_int(yellow_right_r) - range && green < EEPROM_read_int(yellow_right_g) + range && green > EEPROM_read_int(yellow_right_g) - range && blue < EEPROM_read_int(yellow_right_b) + range && blue > EEPROM_read_int(yellow_right_b) - range && clear < EEPROM_read_int(yellow_right_c) + range && clear > EEPROM_read_int(yellow_right_c) - range)
    264e:	8c 1b       	sub	r24, r28
    2650:	9d 0b       	sbc	r25, r29
    2652:	8e 15       	cp	r24, r14
    2654:	9f 05       	cpc	r25, r15
    2656:	0c f0       	brlt	.+2      	; 0x265a <color(char)+0x714>
    2658:	20 cf       	rjmp	.-448    	; 0x249a <color(char)+0x554>
    265a:	86 e5       	ldi	r24, 0x56	; 86
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    2662:	9e 01       	movw	r18, r28
    2664:	28 0f       	add	r18, r24
    2666:	39 1f       	adc	r19, r25
    2668:	02 17       	cp	r16, r18
    266a:	13 07       	cpc	r17, r19
    266c:	0c f0       	brlt	.+2      	; 0x2670 <color(char)+0x72a>
    266e:	15 cf       	rjmp	.-470    	; 0x249a <color(char)+0x554>
    2670:	8c 1b       	sub	r24, r28
    2672:	9d 0b       	sbc	r25, r29
    2674:	80 17       	cp	r24, r16
    2676:	91 07       	cpc	r25, r17
    2678:	0c f0       	brlt	.+2      	; 0x267c <color(char)+0x736>
    267a:	0f cf       	rjmp	.-482    	; 0x249a <color(char)+0x554>
    267c:	88 e5       	ldi	r24, 0x58	; 88
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    2684:	9e 01       	movw	r18, r28
    2686:	28 0f       	add	r18, r24
    2688:	39 1f       	adc	r19, r25
    268a:	c2 16       	cp	r12, r18
    268c:	d3 06       	cpc	r13, r19
    268e:	0c f0       	brlt	.+2      	; 0x2692 <color(char)+0x74c>
    2690:	04 cf       	rjmp	.-504    	; 0x249a <color(char)+0x554>
    2692:	8c 1b       	sub	r24, r28
    2694:	9d 0b       	sbc	r25, r29
    2696:	8c 15       	cp	r24, r12
    2698:	9d 05       	cpc	r25, r13
    269a:	0c f0       	brlt	.+2      	; 0x269e <color(char)+0x758>
    269c:	fe ce       	rjmp	.-516    	; 0x249a <color(char)+0x554>
    269e:	8a e5       	ldi	r24, 0x5A	; 90
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    26a6:	20 91 69 08 	lds	r18, 0x0869	; 0x800869 <clear>
    26aa:	30 91 6a 08 	lds	r19, 0x086A	; 0x80086a <clear+0x1>
    26ae:	ae 01       	movw	r20, r28
    26b0:	48 0f       	add	r20, r24
    26b2:	59 1f       	adc	r21, r25
    26b4:	24 17       	cp	r18, r20
    26b6:	35 07       	cpc	r19, r21
    26b8:	0c f0       	brlt	.+2      	; 0x26bc <color(char)+0x776>
    26ba:	ef ce       	rjmp	.-546    	; 0x249a <color(char)+0x554>
    26bc:	8c 1b       	sub	r24, r28
    26be:	9d 0b       	sbc	r25, r29
    26c0:	82 17       	cp	r24, r18
    26c2:	93 07       	cpc	r25, r19
    26c4:	0c f4       	brge	.+2      	; 0x26c8 <color(char)+0x782>
    26c6:	86 ce       	rjmp	.-756    	; 0x23d4 <color(char)+0x48e>
    26c8:	e8 ce       	rjmp	.-560    	; 0x249a <color(char)+0x554>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:379
      color_out = YELLOW;

    else if (
      red <= (EEPROM_read_int(silver_right_r) + range) && red >= (EEPROM_read_int(silver_right_r) - range) && green >= (EEPROM_read_int(silver_right_g) - range) && green <= (EEPROM_read_int(silver_right_g) + range) && blue >= (EEPROM_read_int(silver_right_b) - range) && blue <= (EEPROM_read_int(silver_right_b) + range) && clear <= (EEPROM_read_int(silver_right_c) + range) && clear >= (EEPROM_read_int(silver_right_c) - range)) {
      color_out = SILVER;
    26ca:	85 e0       	ldi	r24, 0x05	; 5
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	40 ce       	rjmp	.-896    	; 0x2350 <color(char)+0x40a>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:388
      color_out = WHITE;

    return color_out;
  }else if (select == 3)  // front
  {
    if (red > green && red > blue && red < EEPROM_read_int(red_front_r) + range && red > EEPROM_read_int(red_front_r) - range && green < EEPROM_read_int(red_front_g) + range && green > EEPROM_read_int(red_front_g) - range && blue < EEPROM_read_int(red_front_b) + range && blue > EEPROM_read_int(red_front_b) - range && clear < EEPROM_read_int(red_front_c) + range && clear > EEPROM_read_int(red_front_c) - range)
    26d0:	0e 15       	cp	r16, r14
    26d2:	1f 05       	cpc	r17, r15
    26d4:	0c f0       	brlt	.+2      	; 0x26d8 <color(char)+0x792>
    26d6:	57 c0       	rjmp	.+174    	; 0x2786 <color(char)+0x840>
    26d8:	c0 90 6b 08 	lds	r12, 0x086B	; 0x80086b <blue>
    26dc:	d0 90 6c 08 	lds	r13, 0x086C	; 0x80086c <blue+0x1>
    26e0:	ce 14       	cp	r12, r14
    26e2:	df 04       	cpc	r13, r15
    26e4:	0c f0       	brlt	.+2      	; 0x26e8 <color(char)+0x7a2>
    26e6:	e3 cd       	rjmp	.-1082   	; 0x22ae <color(char)+0x368>
    26e8:	84 e6       	ldi	r24, 0x64	; 100
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    26f0:	5c 01       	movw	r10, r24
    26f2:	8a e9       	ldi	r24, 0x9A	; 154
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    26fa:	ec 01       	movw	r28, r24
    26fc:	c5 01       	movw	r24, r10
    26fe:	8c 0f       	add	r24, r28
    2700:	9d 1f       	adc	r25, r29
    2702:	e8 16       	cp	r14, r24
    2704:	f9 06       	cpc	r15, r25
    2706:	0c f0       	brlt	.+2      	; 0x270a <color(char)+0x7c4>
    2708:	d2 cd       	rjmp	.-1116   	; 0x22ae <color(char)+0x368>
    270a:	ac 1a       	sub	r10, r28
    270c:	bd 0a       	sbc	r11, r29
    270e:	ae 14       	cp	r10, r14
    2710:	bf 04       	cpc	r11, r15
    2712:	0c f0       	brlt	.+2      	; 0x2716 <color(char)+0x7d0>
    2714:	cc cd       	rjmp	.-1128   	; 0x22ae <color(char)+0x368>
    2716:	86 e6       	ldi	r24, 0x66	; 102
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    271e:	9e 01       	movw	r18, r28
    2720:	28 0f       	add	r18, r24
    2722:	39 1f       	adc	r19, r25
    2724:	02 17       	cp	r16, r18
    2726:	13 07       	cpc	r17, r19
    2728:	0c f0       	brlt	.+2      	; 0x272c <color(char)+0x7e6>
    272a:	c1 cd       	rjmp	.-1150   	; 0x22ae <color(char)+0x368>
    272c:	8c 1b       	sub	r24, r28
    272e:	9d 0b       	sbc	r25, r29
    2730:	80 17       	cp	r24, r16
    2732:	91 07       	cpc	r25, r17
    2734:	0c f0       	brlt	.+2      	; 0x2738 <color(char)+0x7f2>
    2736:	bb cd       	rjmp	.-1162   	; 0x22ae <color(char)+0x368>
    2738:	88 e6       	ldi	r24, 0x68	; 104
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    2740:	9e 01       	movw	r18, r28
    2742:	28 0f       	add	r18, r24
    2744:	39 1f       	adc	r19, r25
    2746:	c2 16       	cp	r12, r18
    2748:	d3 06       	cpc	r13, r19
    274a:	0c f0       	brlt	.+2      	; 0x274e <color(char)+0x808>
    274c:	b0 cd       	rjmp	.-1184   	; 0x22ae <color(char)+0x368>
    274e:	8c 1b       	sub	r24, r28
    2750:	9d 0b       	sbc	r25, r29
    2752:	8c 15       	cp	r24, r12
    2754:	9d 05       	cpc	r25, r13
    2756:	0c f0       	brlt	.+2      	; 0x275a <color(char)+0x814>
    2758:	aa cd       	rjmp	.-1196   	; 0x22ae <color(char)+0x368>
    275a:	8a e6       	ldi	r24, 0x6A	; 106
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    2762:	20 91 69 08 	lds	r18, 0x0869	; 0x800869 <clear>
    2766:	30 91 6a 08 	lds	r19, 0x086A	; 0x80086a <clear+0x1>
    276a:	ae 01       	movw	r20, r28
    276c:	48 0f       	add	r20, r24
    276e:	59 1f       	adc	r21, r25
    2770:	24 17       	cp	r18, r20
    2772:	35 07       	cpc	r19, r21
    2774:	0c f0       	brlt	.+2      	; 0x2778 <color(char)+0x832>
    2776:	9b cd       	rjmp	.-1226   	; 0x22ae <color(char)+0x368>
    2778:	8c 1b       	sub	r24, r28
    277a:	9d 0b       	sbc	r25, r29
    277c:	82 17       	cp	r24, r18
    277e:	93 07       	cpc	r25, r19
    2780:	0c f4       	brge	.+2      	; 0x2784 <color(char)+0x83e>
    2782:	d3 cc       	rjmp	.-1626   	; 0x212a <color(char)+0x1e4>
    2784:	94 cd       	rjmp	.-1240   	; 0x22ae <color(char)+0x368>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:391
      color_out = RED;

    else if (green > red && green > blue && red < EEPROM_read_int(green_front_r) + range && red > EEPROM_read_int(green_front_r) - range && green < EEPROM_read_int(green_front_g) + range && green > EEPROM_read_int(green_front_g) - range && blue < EEPROM_read_int(green_front_b) + range && blue > EEPROM_read_int(green_front_b) - range && clear < EEPROM_read_int(green_front_c) + range && clear > EEPROM_read_int(green_front_c) - range)
    2786:	e0 16       	cp	r14, r16
    2788:	f1 06       	cpc	r15, r17
    278a:	0c f0       	brlt	.+2      	; 0x278e <color(char)+0x848>
    278c:	90 cd       	rjmp	.-1248   	; 0x22ae <color(char)+0x368>
    278e:	c0 90 6b 08 	lds	r12, 0x086B	; 0x80086b <blue>
    2792:	d0 90 6c 08 	lds	r13, 0x086C	; 0x80086c <blue+0x1>
    2796:	c0 16       	cp	r12, r16
    2798:	d1 06       	cpc	r13, r17
    279a:	0c f0       	brlt	.+2      	; 0x279e <color(char)+0x858>
    279c:	88 cd       	rjmp	.-1264   	; 0x22ae <color(char)+0x368>
    279e:	8c e6       	ldi	r24, 0x6C	; 108
    27a0:	90 e0       	ldi	r25, 0x00	; 0
    27a2:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    27a6:	5c 01       	movw	r10, r24
    27a8:	8a e9       	ldi	r24, 0x9A	; 154
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    27b0:	ec 01       	movw	r28, r24
    27b2:	c5 01       	movw	r24, r10
    27b4:	8c 0f       	add	r24, r28
    27b6:	9d 1f       	adc	r25, r29
    27b8:	e8 16       	cp	r14, r24
    27ba:	f9 06       	cpc	r15, r25
    27bc:	0c f0       	brlt	.+2      	; 0x27c0 <color(char)+0x87a>
    27be:	77 cd       	rjmp	.-1298   	; 0x22ae <color(char)+0x368>
    27c0:	ac 1a       	sub	r10, r28
    27c2:	bd 0a       	sbc	r11, r29
    27c4:	ae 14       	cp	r10, r14
    27c6:	bf 04       	cpc	r11, r15
    27c8:	0c f0       	brlt	.+2      	; 0x27cc <color(char)+0x886>
    27ca:	71 cd       	rjmp	.-1310   	; 0x22ae <color(char)+0x368>
    27cc:	8e e6       	ldi	r24, 0x6E	; 110
    27ce:	90 e0       	ldi	r25, 0x00	; 0
    27d0:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    27d4:	9e 01       	movw	r18, r28
    27d6:	28 0f       	add	r18, r24
    27d8:	39 1f       	adc	r19, r25
    27da:	02 17       	cp	r16, r18
    27dc:	13 07       	cpc	r17, r19
    27de:	0c f0       	brlt	.+2      	; 0x27e2 <color(char)+0x89c>
    27e0:	66 cd       	rjmp	.-1332   	; 0x22ae <color(char)+0x368>
    27e2:	8c 1b       	sub	r24, r28
    27e4:	9d 0b       	sbc	r25, r29
    27e6:	80 17       	cp	r24, r16
    27e8:	91 07       	cpc	r25, r17
    27ea:	0c f0       	brlt	.+2      	; 0x27ee <color(char)+0x8a8>
    27ec:	60 cd       	rjmp	.-1344   	; 0x22ae <color(char)+0x368>
    27ee:	80 e7       	ldi	r24, 0x70	; 112
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    27f6:	9e 01       	movw	r18, r28
    27f8:	28 0f       	add	r18, r24
    27fa:	39 1f       	adc	r19, r25
    27fc:	c2 16       	cp	r12, r18
    27fe:	d3 06       	cpc	r13, r19
    2800:	0c f0       	brlt	.+2      	; 0x2804 <color(char)+0x8be>
    2802:	55 cd       	rjmp	.-1366   	; 0x22ae <color(char)+0x368>
    2804:	8c 1b       	sub	r24, r28
    2806:	9d 0b       	sbc	r25, r29
    2808:	8c 15       	cp	r24, r12
    280a:	9d 05       	cpc	r25, r13
    280c:	0c f0       	brlt	.+2      	; 0x2810 <color(char)+0x8ca>
    280e:	4f cd       	rjmp	.-1378   	; 0x22ae <color(char)+0x368>
    2810:	82 e7       	ldi	r24, 0x72	; 114
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    2818:	20 91 69 08 	lds	r18, 0x0869	; 0x800869 <clear>
    281c:	30 91 6a 08 	lds	r19, 0x086A	; 0x80086a <clear+0x1>
    2820:	ae 01       	movw	r20, r28
    2822:	48 0f       	add	r20, r24
    2824:	59 1f       	adc	r21, r25
    2826:	24 17       	cp	r18, r20
    2828:	35 07       	cpc	r19, r21
    282a:	0c f0       	brlt	.+2      	; 0x282e <color(char)+0x8e8>
    282c:	40 cd       	rjmp	.-1408   	; 0x22ae <color(char)+0x368>
    282e:	8c 1b       	sub	r24, r28
    2830:	9d 0b       	sbc	r25, r29
    2832:	82 17       	cp	r24, r18
    2834:	93 07       	cpc	r25, r19
    2836:	0c f4       	brge	.+2      	; 0x283a <color(char)+0x8f4>
    2838:	07 cf       	rjmp	.-498    	; 0x2648 <color(char)+0x702>
    283a:	39 cd       	rjmp	.-1422   	; 0x22ae <color(char)+0x368>

0000283c <menu_color()>:
menu_color():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1132
    }
}

void menu_color(void) {
  static char page = 1, last_page = 8;
  lcd.clear();
    283c:	0e 94 45 05 	call	0xa8a	; 0xa8a <LiquidCrystal::clear() [clone .constprop.34]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1313
      lcd.print("APDS Front: ");
      lcd.setCursor(0, 1);
      lcd.print("  RED  GRN  BLU ");

      lcd.setCursor(0, 2);
      lcd.printf(" %4d %4d %4d %4d", red, green, blue, clear);
    2840:	89 ee       	ldi	r24, 0xE9	; 233
    2842:	88 2e       	mov	r8, r24
    2844:	83 e0       	ldi	r24, 0x03	; 3
    2846:	98 2e       	mov	r9, r24
    2848:	c4 e7       	ldi	r28, 0x74	; 116
    284a:	da e0       	ldi	r29, 0x0A	; 10
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1325
        lcd.printf("M%4d %4d %4d %4d ", EEPROM_read_int(red_front_r), EEPROM_read_int(red_front_g), EEPROM_read_int(red_front_b), EEPROM_read_int(red_front_c));
      } else if (color_F == GREEN) {
        lcd.setCursor(12, 0);
        lcd.print("GRN ");
        lcd.setCursor(0, 3);
        lcd.printf("M%4d %4d %4d %4d ", EEPROM_read_int(green_front_r), EEPROM_read_int(green_front_g), EEPROM_read_int(green_front_b), EEPROM_read_int(green_front_c));
    284c:	9d e6       	ldi	r25, 0x6D	; 109
    284e:	e9 2e       	mov	r14, r25
    2850:	94 e0       	ldi	r25, 0x04	; 4
    2852:	f9 2e       	mov	r15, r25
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1288

      lcd.setCursor(0, 1);
      lcd.print("  RED  GRN  BLU ");

      lcd.setCursor(0, 2);
      lcd.printf("L%4d %4d %4d ", EEPROM_read_int(yellow_left_r), EEPROM_read_int(yellow_left_g), EEPROM_read_int(yellow_left_b));
    2854:	2f ea       	ldi	r18, 0xAF	; 175
    2856:	c2 2e       	mov	r12, r18
    2858:	24 e0       	ldi	r18, 0x04	; 4
    285a:	d2 2e       	mov	r13, r18
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1291

      lcd.setCursor(0, 3);
      lcd.printf("R%4d %4d %4d ", EEPROM_read_int(yellow_right_r), EEPROM_read_int(yellow_right_g), EEPROM_read_int(yellow_right_b));
    285c:	3d eb       	ldi	r19, 0xBD	; 189
    285e:	a3 2e       	mov	r10, r19
    2860:	34 e0       	ldi	r19, 0x04	; 4
    2862:	b3 2e       	mov	r11, r19
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1233
        lcd.printf("M%4d %4d %4d ", EEPROM_read_int(yellow_right_r), EEPROM_read_int(yellow_right_g), EEPROM_read_int(yellow_right_b), EEPROM_read_int(yellow_right_c));
      } else if (color_R == SILVER) {
        lcd.setCursor(12, 0);
        lcd.print("SIL ");
        lcd.setCursor(0, 3);
        lcd.printf("M%4d %4d %4d %4d", EEPROM_read_int(silver_right_r), EEPROM_read_int(silver_right_g), EEPROM_read_int(silver_right_b), EEPROM_read_int(silver_right_c));
    2864:	01 e0       	ldi	r16, 0x01	; 1
    2866:	14 e0       	ldi	r17, 0x04	; 4
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1134

void menu_color(void) {
  static char page = 1, last_page = 8;
  lcd.clear();
  while (1) {
    if (next_page == 0) {
    2868:	88 e0       	ldi	r24, 0x08	; 8
    286a:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    286e:	89 2b       	or	r24, r25
    2870:	79 f4       	brne	.+30     	; 0x2890 <menu_color()+0x54>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1135
      while (next_page == 0)
    2872:	88 e0       	ldi	r24, 0x08	; 8
    2874:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    2878:	89 2b       	or	r24, r25
    287a:	d9 f3       	breq	.-10     	; 0x2872 <menu_color()+0x36>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1137
        ;
      page++;
    287c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <menu_color()::page>
    2880:	8f 5f       	subi	r24, 0xFF	; 255
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1138
      if (page > last_page)
    2882:	89 30       	cpi	r24, 0x09	; 9
    2884:	0c f0       	brlt	.+2      	; 0x2888 <menu_color()+0x4c>
    2886:	a8 c0       	rjmp	.+336    	; 0x29d8 <menu_color()+0x19c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1137
  lcd.clear();
  while (1) {
    if (next_page == 0) {
      while (next_page == 0)
        ;
      page++;
    2888:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <menu_color()::page>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1140
      if (page > last_page)
        page = 1;
      lcd.clear();
    288c:	0e 94 45 05 	call	0xa8a	; 0xa8a <LiquidCrystal::clear() [clone .constprop.34]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1142
    }
    if (previuse_page == 0) {
    2890:	89 e0       	ldi	r24, 0x09	; 9
    2892:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    2896:	89 2b       	or	r24, r25
    2898:	71 f4       	brne	.+28     	; 0x28b6 <menu_color()+0x7a>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1143
      while (previuse_page == 0)
    289a:	89 e0       	ldi	r24, 0x09	; 9
    289c:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    28a0:	89 2b       	or	r24, r25
    28a2:	d9 f3       	breq	.-10     	; 0x289a <menu_color()+0x5e>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1145
        ;
      page--;
    28a4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <menu_color()::page>
    28a8:	81 50       	subi	r24, 0x01	; 1
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1146
      if (page == 0)
    28aa:	09 f4       	brne	.+2      	; 0x28ae <menu_color()+0x72>
    28ac:	99 c0       	rjmp	.+306    	; 0x29e0 <menu_color()+0x1a4>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1147
        page = last_page;
    28ae:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <menu_color()::page>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1148
      lcd.clear();
    28b2:	0e 94 45 05 	call	0xa8a	; 0xa8a <LiquidCrystal::clear() [clone .constprop.34]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1150
    }
    if (increase == 0)
    28b6:	8a e0       	ldi	r24, 0x0A	; 10
    28b8:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    28bc:	89 2b       	or	r24, r25
    28be:	09 f0       	breq	.+2      	; 0x28c2 <menu_color()+0x86>
    28c0:	91 c0       	rjmp	.+290    	; 0x29e4 <menu_color()+0x1a8>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1151
      go(40, 40);
    28c2:	68 e2       	ldi	r22, 0x28	; 40
    28c4:	70 e0       	ldi	r23, 0x00	; 0
    28c6:	88 e2       	ldi	r24, 0x28	; 40
    28c8:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1155
    else if (decrease == 0)
      go(-40, -40);
    else
      go(0, 0);
    28ca:	0e 94 56 06 	call	0xcac	; 0xcac <go(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1157

    if (page == 1) {
    28ce:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <menu_color()::page>
    28d2:	81 30       	cpi	r24, 0x01	; 1
    28d4:	09 f0       	breq	.+2      	; 0x28d8 <menu_color()+0x9c>
    28d6:	a8 c1       	rjmp	.+848    	; 0x2c28 <menu_color()+0x3ec>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1158
      lcd.setCursor(0, 0);
    28d8:	60 e0       	ldi	r22, 0x00	; 0
    28da:	80 e0       	ldi	r24, 0x00	; 0
    28dc:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1159
      lcd.print("APDS left: ");
    28e0:	88 ec       	ldi	r24, 0xC8	; 200
    28e2:	93 e0       	ldi	r25, 0x03	; 3
    28e4:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1161

      lcd.setCursor(0, 1);
    28e8:	61 e0       	ldi	r22, 0x01	; 1
    28ea:	80 e0       	ldi	r24, 0x00	; 0
    28ec:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1162
      lcd.print("  RED  GRN  BLU  CLR");
    28f0:	84 ed       	ldi	r24, 0xD4	; 212
    28f2:	93 e0       	ldi	r25, 0x03	; 3
    28f4:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1164

      lcd.setCursor(0, 2);
    28f8:	62 e0       	ldi	r22, 0x02	; 2
    28fa:	80 e0       	ldi	r24, 0x00	; 0
    28fc:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1165
      lcd.printf(" %4d %4d %4d %4d", red, green, blue, clear);
    2900:	80 91 6a 08 	lds	r24, 0x086A	; 0x80086a <clear+0x1>
    2904:	8f 93       	push	r24
    2906:	80 91 69 08 	lds	r24, 0x0869	; 0x800869 <clear>
    290a:	8f 93       	push	r24
    290c:	80 91 6c 08 	lds	r24, 0x086C	; 0x80086c <blue+0x1>
    2910:	8f 93       	push	r24
    2912:	80 91 6b 08 	lds	r24, 0x086B	; 0x80086b <blue>
    2916:	8f 93       	push	r24
    2918:	80 91 6e 08 	lds	r24, 0x086E	; 0x80086e <green+0x1>
    291c:	8f 93       	push	r24
    291e:	80 91 6d 08 	lds	r24, 0x086D	; 0x80086d <green>
    2922:	8f 93       	push	r24
    2924:	80 91 70 08 	lds	r24, 0x0870	; 0x800870 <red+0x1>
    2928:	8f 93       	push	r24
    292a:	80 91 6f 08 	lds	r24, 0x086F	; 0x80086f <red>
    292e:	8f 93       	push	r24
    2930:	9f 92       	push	r9
    2932:	8f 92       	push	r8
    2934:	df 93       	push	r29
    2936:	cf 93       	push	r28
    2938:	0e 94 df 06 	call	0xdbe	; 0xdbe <Print::printf(char const*, ...) [clone .constprop.22]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1166
      delay(100);
    293c:	64 e6       	ldi	r22, 0x64	; 100
    293e:	70 e0       	ldi	r23, 0x00	; 0
    2940:	80 e0       	ldi	r24, 0x00	; 0
    2942:	90 e0       	ldi	r25, 0x00	; 0
    2944:	0e 94 aa 02 	call	0x554	; 0x554 <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1167
      if (color_L == RED) {
    2948:	81 e0       	ldi	r24, 0x01	; 1
    294a:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <color(char)>
    294e:	2d b7       	in	r18, 0x3d	; 61
    2950:	3e b7       	in	r19, 0x3e	; 62
    2952:	24 5f       	subi	r18, 0xF4	; 244
    2954:	3f 4f       	sbci	r19, 0xFF	; 255
    2956:	0f b6       	in	r0, 0x3f	; 63
    2958:	f8 94       	cli
    295a:	3e bf       	out	0x3e, r19	; 62
    295c:	0f be       	out	0x3f, r0	; 63
    295e:	2d bf       	out	0x3d, r18	; 61
    2960:	81 11       	cpse	r24, r1
    2962:	4f c0       	rjmp	.+158    	; 0x2a02 <menu_color()+0x1c6>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1168
        lcd.setCursor(12, 0);
    2964:	60 e0       	ldi	r22, 0x00	; 0
    2966:	8c e0       	ldi	r24, 0x0C	; 12
    2968:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1169
        lcd.print("RED   ");
    296c:	8a ef       	ldi	r24, 0xFA	; 250
    296e:	93 e0       	ldi	r25, 0x03	; 3
    2970:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1170
        lcd.setCursor(0, 3);
    2974:	63 e0       	ldi	r22, 0x03	; 3
    2976:	80 e0       	ldi	r24, 0x00	; 0
    2978:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1171
        lcd.printf("M%4d %4d %4d %4d", EEPROM_read_int(red_left_r), EEPROM_read_int(red_left_g), EEPROM_read_int(red_left_b), EEPROM_read_int(red_left_c));
    297c:	8a e1       	ldi	r24, 0x1A	; 26
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    2984:	38 2e       	mov	r3, r24
    2986:	29 2e       	mov	r2, r25
    2988:	88 e1       	ldi	r24, 0x18	; 24
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    2990:	58 2e       	mov	r5, r24
    2992:	49 2e       	mov	r4, r25
    2994:	86 e1       	ldi	r24, 0x16	; 22
    2996:	90 e0       	ldi	r25, 0x00	; 0
    2998:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    299c:	78 2e       	mov	r7, r24
    299e:	69 2e       	mov	r6, r25
    29a0:	84 e1       	ldi	r24, 0x14	; 20
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    29a8:	2f 92       	push	r2
    29aa:	3f 92       	push	r3
    29ac:	4f 92       	push	r4
    29ae:	5f 92       	push	r5
    29b0:	6f 92       	push	r6
    29b2:	7f 92       	push	r7
    29b4:	9f 93       	push	r25
    29b6:	8f 93       	push	r24
    29b8:	1f 93       	push	r17
    29ba:	0f 93       	push	r16
    29bc:	df 93       	push	r29
    29be:	cf 93       	push	r28
    29c0:	0e 94 df 06 	call	0xdbe	; 0xdbe <Print::printf(char const*, ...) [clone .constprop.22]>
    29c4:	2d b7       	in	r18, 0x3d	; 61
    29c6:	3e b7       	in	r19, 0x3e	; 62
    29c8:	24 5f       	subi	r18, 0xF4	; 244
    29ca:	3f 4f       	sbci	r19, 0xFF	; 255
    29cc:	0f b6       	in	r0, 0x3f	; 63
    29ce:	f8 94       	cli
    29d0:	3e bf       	out	0x3e, r19	; 62
    29d2:	0f be       	out	0x3f, r0	; 63
    29d4:	2d bf       	out	0x3d, r18	; 61
    29d6:	48 cf       	rjmp	.-368    	; 0x2868 <menu_color()+0x2c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1139
    if (next_page == 0) {
      while (next_page == 0)
        ;
      page++;
      if (page > last_page)
        page = 1;
    29d8:	21 e0       	ldi	r18, 0x01	; 1
    29da:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <menu_color()::page>
    29de:	56 cf       	rjmp	.-340    	; 0x288c <menu_color()+0x50>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1147
    if (previuse_page == 0) {
      while (previuse_page == 0)
        ;
      page--;
      if (page == 0)
        page = last_page;
    29e0:	88 e0       	ldi	r24, 0x08	; 8
    29e2:	65 cf       	rjmp	.-310    	; 0x28ae <menu_color()+0x72>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1152
      lcd.clear();
    }
    if (increase == 0)
      go(40, 40);
    else if (decrease == 0)
    29e4:	8b e0       	ldi	r24, 0x0B	; 11
    29e6:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    29ea:	89 2b       	or	r24, r25
    29ec:	29 f4       	brne	.+10     	; 0x29f8 <menu_color()+0x1bc>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1153
      go(-40, -40);
    29ee:	68 ed       	ldi	r22, 0xD8	; 216
    29f0:	7f ef       	ldi	r23, 0xFF	; 255
    29f2:	88 ed       	ldi	r24, 0xD8	; 216
    29f4:	9f ef       	ldi	r25, 0xFF	; 255
    29f6:	69 cf       	rjmp	.-302    	; 0x28ca <menu_color()+0x8e>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1155
    else
      go(0, 0);
    29f8:	70 e0       	ldi	r23, 0x00	; 0
    29fa:	60 e0       	ldi	r22, 0x00	; 0
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	80 e0       	ldi	r24, 0x00	; 0
    2a00:	64 cf       	rjmp	.-312    	; 0x28ca <menu_color()+0x8e>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1172
      if (color_L == RED) {
        lcd.setCursor(12, 0);
        lcd.print("RED   ");
        lcd.setCursor(0, 3);
        lcd.printf("M%4d %4d %4d %4d", EEPROM_read_int(red_left_r), EEPROM_read_int(red_left_g), EEPROM_read_int(red_left_b), EEPROM_read_int(red_left_c));
      } else if (color_L == GREEN) {
    2a02:	81 e0       	ldi	r24, 0x01	; 1
    2a04:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <color(char)>
    2a08:	81 30       	cpi	r24, 0x01	; 1
    2a0a:	d1 f5       	brne	.+116    	; 0x2a80 <menu_color()+0x244>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1173
        lcd.setCursor(12, 0);
    2a0c:	60 e0       	ldi	r22, 0x00	; 0
    2a0e:	8c e0       	ldi	r24, 0x0C	; 12
    2a10:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1174
        lcd.print("GREEN ");
    2a14:	82 e1       	ldi	r24, 0x12	; 18
    2a16:	94 e0       	ldi	r25, 0x04	; 4
    2a18:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1175
        lcd.setCursor(0, 3);
    2a1c:	63 e0       	ldi	r22, 0x03	; 3
    2a1e:	80 e0       	ldi	r24, 0x00	; 0
    2a20:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1176
        lcd.printf("M%4d %4d %4d %4d", EEPROM_read_int(green_left_r), EEPROM_read_int(green_left_g), EEPROM_read_int(green_left_b), EEPROM_read_int(green_left_c));
    2a24:	82 e2       	ldi	r24, 0x22	; 34
    2a26:	90 e0       	ldi	r25, 0x00	; 0
    2a28:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    2a2c:	38 2e       	mov	r3, r24
    2a2e:	29 2e       	mov	r2, r25
    2a30:	80 e2       	ldi	r24, 0x20	; 32
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    2a38:	58 2e       	mov	r5, r24
    2a3a:	49 2e       	mov	r4, r25
    2a3c:	8e e1       	ldi	r24, 0x1E	; 30
    2a3e:	90 e0       	ldi	r25, 0x00	; 0
    2a40:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    2a44:	78 2e       	mov	r7, r24
    2a46:	69 2e       	mov	r6, r25
    2a48:	8c e1       	ldi	r24, 0x1C	; 28
    2a4a:	90 e0       	ldi	r25, 0x00	; 0
    2a4c:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    2a50:	2f 92       	push	r2
    2a52:	3f 92       	push	r3
    2a54:	4f 92       	push	r4
    2a56:	5f 92       	push	r5
    2a58:	6f 92       	push	r6
    2a5a:	7f 92       	push	r7
    2a5c:	9f 93       	push	r25
    2a5e:	8f 93       	push	r24
    2a60:	1f 93       	push	r17
    2a62:	0f 93       	push	r16
    2a64:	df 93       	push	r29
    2a66:	cf 93       	push	r28
    2a68:	0e 94 df 06 	call	0xdbe	; 0xdbe <Print::printf(char const*, ...) [clone .constprop.22]>
    2a6c:	2d b7       	in	r18, 0x3d	; 61
    2a6e:	3e b7       	in	r19, 0x3e	; 62
    2a70:	24 5f       	subi	r18, 0xF4	; 244
    2a72:	3f 4f       	sbci	r19, 0xFF	; 255
    2a74:	0f b6       	in	r0, 0x3f	; 63
    2a76:	f8 94       	cli
    2a78:	3e bf       	out	0x3e, r19	; 62
    2a7a:	0f be       	out	0x3f, r0	; 63
    2a7c:	2d bf       	out	0x3d, r18	; 61
    2a7e:	f4 ce       	rjmp	.-536    	; 0x2868 <menu_color()+0x2c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1177
      } else if (color_L == BLUE) {
    2a80:	81 e0       	ldi	r24, 0x01	; 1
    2a82:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <color(char)>
    2a86:	82 30       	cpi	r24, 0x02	; 2
    2a88:	d1 f5       	brne	.+116    	; 0x2afe <menu_color()+0x2c2>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1178
        lcd.setCursor(12, 0);
    2a8a:	60 e0       	ldi	r22, 0x00	; 0
    2a8c:	8c e0       	ldi	r24, 0x0C	; 12
    2a8e:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1179
        lcd.print("BLUE  ");
    2a92:	89 e1       	ldi	r24, 0x19	; 25
    2a94:	94 e0       	ldi	r25, 0x04	; 4
    2a96:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1180
        lcd.setCursor(0, 3);
    2a9a:	63 e0       	ldi	r22, 0x03	; 3
    2a9c:	80 e0       	ldi	r24, 0x00	; 0
    2a9e:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1181
        lcd.printf("M%4d %4d %4d %4d", EEPROM_read_int(blue_left_r), EEPROM_read_int(blue_left_g), EEPROM_read_int(blue_left_b), EEPROM_read_int(blue_left_c));
    2aa2:	8a e2       	ldi	r24, 0x2A	; 42
    2aa4:	90 e0       	ldi	r25, 0x00	; 0
    2aa6:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    2aaa:	38 2e       	mov	r3, r24
    2aac:	29 2e       	mov	r2, r25
    2aae:	88 e2       	ldi	r24, 0x28	; 40
    2ab0:	90 e0       	ldi	r25, 0x00	; 0
    2ab2:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    2ab6:	58 2e       	mov	r5, r24
    2ab8:	49 2e       	mov	r4, r25
    2aba:	86 e2       	ldi	r24, 0x26	; 38
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    2ac2:	78 2e       	mov	r7, r24
    2ac4:	69 2e       	mov	r6, r25
    2ac6:	84 e2       	ldi	r24, 0x24	; 36
    2ac8:	90 e0       	ldi	r25, 0x00	; 0
    2aca:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    2ace:	2f 92       	push	r2
    2ad0:	3f 92       	push	r3
    2ad2:	4f 92       	push	r4
    2ad4:	5f 92       	push	r5
    2ad6:	6f 92       	push	r6
    2ad8:	7f 92       	push	r7
    2ada:	9f 93       	push	r25
    2adc:	8f 93       	push	r24
    2ade:	1f 93       	push	r17
    2ae0:	0f 93       	push	r16
    2ae2:	df 93       	push	r29
    2ae4:	cf 93       	push	r28
    2ae6:	0e 94 df 06 	call	0xdbe	; 0xdbe <Print::printf(char const*, ...) [clone .constprop.22]>
    2aea:	2d b7       	in	r18, 0x3d	; 61
    2aec:	3e b7       	in	r19, 0x3e	; 62
    2aee:	24 5f       	subi	r18, 0xF4	; 244
    2af0:	3f 4f       	sbci	r19, 0xFF	; 255
    2af2:	0f b6       	in	r0, 0x3f	; 63
    2af4:	f8 94       	cli
    2af6:	3e bf       	out	0x3e, r19	; 62
    2af8:	0f be       	out	0x3f, r0	; 63
    2afa:	2d bf       	out	0x3d, r18	; 61
    2afc:	b5 ce       	rjmp	.-662    	; 0x2868 <menu_color()+0x2c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1182
      } else if (color_L == YELLOW) {
    2afe:	81 e0       	ldi	r24, 0x01	; 1
    2b00:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <color(char)>
    2b04:	84 30       	cpi	r24, 0x04	; 4
    2b06:	d1 f5       	brne	.+116    	; 0x2b7c <menu_color()+0x340>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1183
        lcd.setCursor(12, 0);
    2b08:	60 e0       	ldi	r22, 0x00	; 0
    2b0a:	8c e0       	ldi	r24, 0x0C	; 12
    2b0c:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1184
        lcd.print("YELLOW");
    2b10:	80 e2       	ldi	r24, 0x20	; 32
    2b12:	94 e0       	ldi	r25, 0x04	; 4
    2b14:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1185
        lcd.setCursor(0, 3);
    2b18:	63 e0       	ldi	r22, 0x03	; 3
    2b1a:	80 e0       	ldi	r24, 0x00	; 0
    2b1c:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1186
        lcd.printf("M%4d %4d %4d %4d", EEPROM_read_int(yellow_left_r), EEPROM_read_int(yellow_left_g), EEPROM_read_int(yellow_left_b), EEPROM_read_int(yellow_left_c));
    2b20:	82 e3       	ldi	r24, 0x32	; 50
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    2b28:	38 2e       	mov	r3, r24
    2b2a:	29 2e       	mov	r2, r25
    2b2c:	80 e3       	ldi	r24, 0x30	; 48
    2b2e:	90 e0       	ldi	r25, 0x00	; 0
    2b30:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    2b34:	58 2e       	mov	r5, r24
    2b36:	49 2e       	mov	r4, r25
    2b38:	8e e2       	ldi	r24, 0x2E	; 46
    2b3a:	90 e0       	ldi	r25, 0x00	; 0
    2b3c:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    2b40:	78 2e       	mov	r7, r24
    2b42:	69 2e       	mov	r6, r25
    2b44:	8c e2       	ldi	r24, 0x2C	; 44
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    2b4c:	2f 92       	push	r2
    2b4e:	3f 92       	push	r3
    2b50:	4f 92       	push	r4
    2b52:	5f 92       	push	r5
    2b54:	6f 92       	push	r6
    2b56:	7f 92       	push	r7
    2b58:	9f 93       	push	r25
    2b5a:	8f 93       	push	r24
    2b5c:	1f 93       	push	r17
    2b5e:	0f 93       	push	r16
    2b60:	df 93       	push	r29
    2b62:	cf 93       	push	r28
    2b64:	0e 94 df 06 	call	0xdbe	; 0xdbe <Print::printf(char const*, ...) [clone .constprop.22]>
    2b68:	2d b7       	in	r18, 0x3d	; 61
    2b6a:	3e b7       	in	r19, 0x3e	; 62
    2b6c:	24 5f       	subi	r18, 0xF4	; 244
    2b6e:	3f 4f       	sbci	r19, 0xFF	; 255
    2b70:	0f b6       	in	r0, 0x3f	; 63
    2b72:	f8 94       	cli
    2b74:	3e bf       	out	0x3e, r19	; 62
    2b76:	0f be       	out	0x3f, r0	; 63
    2b78:	2d bf       	out	0x3d, r18	; 61
    2b7a:	76 ce       	rjmp	.-788    	; 0x2868 <menu_color()+0x2c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1187
      } else if (color_L == SILVER) {
    2b7c:	81 e0       	ldi	r24, 0x01	; 1
    2b7e:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <color(char)>
    2b82:	85 30       	cpi	r24, 0x05	; 5
    2b84:	d1 f5       	brne	.+116    	; 0x2bfa <menu_color()+0x3be>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1188
        lcd.setCursor(12, 0);
    2b86:	60 e0       	ldi	r22, 0x00	; 0
    2b88:	8c e0       	ldi	r24, 0x0C	; 12
    2b8a:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1189
        lcd.print("SILVER");
    2b8e:	87 e2       	ldi	r24, 0x27	; 39
    2b90:	94 e0       	ldi	r25, 0x04	; 4
    2b92:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1190
        lcd.setCursor(0, 3);
    2b96:	63 e0       	ldi	r22, 0x03	; 3
    2b98:	80 e0       	ldi	r24, 0x00	; 0
    2b9a:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1191
        lcd.printf("M%4d %4d %4d %4d", EEPROM_read_int(silver_left_r), EEPROM_read_int(silver_left_g), EEPROM_read_int(silver_left_b), EEPROM_read_int(silver_left_c));
    2b9e:	8a e3       	ldi	r24, 0x3A	; 58
    2ba0:	90 e0       	ldi	r25, 0x00	; 0
    2ba2:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    2ba6:	38 2e       	mov	r3, r24
    2ba8:	29 2e       	mov	r2, r25
    2baa:	88 e3       	ldi	r24, 0x38	; 56
    2bac:	90 e0       	ldi	r25, 0x00	; 0
    2bae:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    2bb2:	58 2e       	mov	r5, r24
    2bb4:	49 2e       	mov	r4, r25
    2bb6:	86 e3       	ldi	r24, 0x36	; 54
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    2bbe:	78 2e       	mov	r7, r24
    2bc0:	69 2e       	mov	r6, r25
    2bc2:	84 e3       	ldi	r24, 0x34	; 52
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    2bca:	2f 92       	push	r2
    2bcc:	3f 92       	push	r3
    2bce:	4f 92       	push	r4
    2bd0:	5f 92       	push	r5
    2bd2:	6f 92       	push	r6
    2bd4:	7f 92       	push	r7
    2bd6:	9f 93       	push	r25
    2bd8:	8f 93       	push	r24
    2bda:	1f 93       	push	r17
    2bdc:	0f 93       	push	r16
    2bde:	df 93       	push	r29
    2be0:	cf 93       	push	r28
    2be2:	0e 94 df 06 	call	0xdbe	; 0xdbe <Print::printf(char const*, ...) [clone .constprop.22]>
    2be6:	2d b7       	in	r18, 0x3d	; 61
    2be8:	3e b7       	in	r19, 0x3e	; 62
    2bea:	24 5f       	subi	r18, 0xF4	; 244
    2bec:	3f 4f       	sbci	r19, 0xFF	; 255
    2bee:	0f b6       	in	r0, 0x3f	; 63
    2bf0:	f8 94       	cli
    2bf2:	3e bf       	out	0x3e, r19	; 62
    2bf4:	0f be       	out	0x3f, r0	; 63
    2bf6:	2d bf       	out	0x3d, r18	; 61
    2bf8:	37 ce       	rjmp	.-914    	; 0x2868 <menu_color()+0x2c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1192
      } else if (color_L == WHITE) {
    2bfa:	81 e0       	ldi	r24, 0x01	; 1
    2bfc:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <color(char)>
    2c00:	87 30       	cpi	r24, 0x07	; 7
    2c02:	09 f0       	breq	.+2      	; 0x2c06 <menu_color()+0x3ca>
    2c04:	31 ce       	rjmp	.-926    	; 0x2868 <menu_color()+0x2c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1193
        lcd.setCursor(12, 0);
    2c06:	60 e0       	ldi	r22, 0x00	; 0
    2c08:	8c e0       	ldi	r24, 0x0C	; 12
    2c0a:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1194
        lcd.print("WHITE ");
    2c0e:	8e e2       	ldi	r24, 0x2E	; 46
    2c10:	94 e0       	ldi	r25, 0x04	; 4
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1236
        lcd.print("SIL ");
        lcd.setCursor(0, 3);
        lcd.printf("M%4d %4d %4d %4d", EEPROM_read_int(silver_right_r), EEPROM_read_int(silver_right_g), EEPROM_read_int(silver_right_b), EEPROM_read_int(silver_right_c));
      } else if (color_R == WHITE) {
        lcd.setCursor(12, 0);
        lcd.print("WHT ");
    2c12:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1237
        lcd.setCursor(0, 3);
    2c16:	63 e0       	ldi	r22, 0x03	; 3
    2c18:	80 e0       	ldi	r24, 0x00	; 0
    2c1a:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1238
        lcd.print("                    ");
    2c1e:	85 e3       	ldi	r24, 0x35	; 53
    2c20:	94 e0       	ldi	r25, 0x04	; 4
    2c22:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
    2c26:	20 ce       	rjmp	.-960    	; 0x2868 <menu_color()+0x2c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1198
        lcd.setCursor(12, 0);
        lcd.print("WHITE ");
        lcd.setCursor(0, 3);
        lcd.print("                    ");
      }
    } else if (page == 2)  // APDS Right
    2c28:	82 30       	cpi	r24, 0x02	; 2
    2c2a:	09 f0       	breq	.+2      	; 0x2c2e <menu_color()+0x3f2>
    2c2c:	89 c1       	rjmp	.+786    	; 0x2f40 <menu_color()+0x704>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1200
    {
      lcd.setCursor(0, 0);
    2c2e:	60 e0       	ldi	r22, 0x00	; 0
    2c30:	80 e0       	ldi	r24, 0x00	; 0
    2c32:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1201
      lcd.print("APDS Right: ");
    2c36:	8a e4       	ldi	r24, 0x4A	; 74
    2c38:	94 e0       	ldi	r25, 0x04	; 4
    2c3a:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1202
      lcd.setCursor(0, 1);
    2c3e:	61 e0       	ldi	r22, 0x01	; 1
    2c40:	80 e0       	ldi	r24, 0x00	; 0
    2c42:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1203
      lcd.print("  RED  GRN  BLU ");
    2c46:	87 e5       	ldi	r24, 0x57	; 87
    2c48:	94 e0       	ldi	r25, 0x04	; 4
    2c4a:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1205

      lcd.setCursor(0, 2);
    2c4e:	62 e0       	ldi	r22, 0x02	; 2
    2c50:	80 e0       	ldi	r24, 0x00	; 0
    2c52:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1206
      lcd.printf(" %4d %4d %4d %4d", red, green, blue, clear);
    2c56:	80 91 6a 08 	lds	r24, 0x086A	; 0x80086a <clear+0x1>
    2c5a:	8f 93       	push	r24
    2c5c:	80 91 69 08 	lds	r24, 0x0869	; 0x800869 <clear>
    2c60:	8f 93       	push	r24
    2c62:	80 91 6c 08 	lds	r24, 0x086C	; 0x80086c <blue+0x1>
    2c66:	8f 93       	push	r24
    2c68:	80 91 6b 08 	lds	r24, 0x086B	; 0x80086b <blue>
    2c6c:	8f 93       	push	r24
    2c6e:	80 91 6e 08 	lds	r24, 0x086E	; 0x80086e <green+0x1>
    2c72:	8f 93       	push	r24
    2c74:	80 91 6d 08 	lds	r24, 0x086D	; 0x80086d <green>
    2c78:	8f 93       	push	r24
    2c7a:	80 91 70 08 	lds	r24, 0x0870	; 0x800870 <red+0x1>
    2c7e:	8f 93       	push	r24
    2c80:	80 91 6f 08 	lds	r24, 0x086F	; 0x80086f <red>
    2c84:	8f 93       	push	r24
    2c86:	9f 92       	push	r9
    2c88:	8f 92       	push	r8
    2c8a:	df 93       	push	r29
    2c8c:	cf 93       	push	r28
    2c8e:	0e 94 df 06 	call	0xdbe	; 0xdbe <Print::printf(char const*, ...) [clone .constprop.22]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1208

      lcd.setCursor(12, 0);
    2c92:	60 e0       	ldi	r22, 0x00	; 0
    2c94:	8c e0       	ldi	r24, 0x0C	; 12
    2c96:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1209
      if (color_R == RED) {
    2c9a:	82 e0       	ldi	r24, 0x02	; 2
    2c9c:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <color(char)>
    2ca0:	2d b7       	in	r18, 0x3d	; 61
    2ca2:	3e b7       	in	r19, 0x3e	; 62
    2ca4:	24 5f       	subi	r18, 0xF4	; 244
    2ca6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ca8:	0f b6       	in	r0, 0x3f	; 63
    2caa:	f8 94       	cli
    2cac:	3e bf       	out	0x3e, r19	; 62
    2cae:	0f be       	out	0x3f, r0	; 63
    2cb0:	2d bf       	out	0x3d, r18	; 61
    2cb2:	81 11       	cpse	r24, r1
    2cb4:	3a c0       	rjmp	.+116    	; 0x2d2a <menu_color()+0x4ee>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1210
        lcd.setCursor(12, 0);
    2cb6:	60 e0       	ldi	r22, 0x00	; 0
    2cb8:	8c e0       	ldi	r24, 0x0C	; 12
    2cba:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1211
        lcd.print("RED ");
    2cbe:	88 e6       	ldi	r24, 0x68	; 104
    2cc0:	94 e0       	ldi	r25, 0x04	; 4
    2cc2:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1212
        lcd.setCursor(0, 3);
    2cc6:	63 e0       	ldi	r22, 0x03	; 3
    2cc8:	80 e0       	ldi	r24, 0x00	; 0
    2cca:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1213
        lcd.printf("M%4d %4d %4d %4d ", EEPROM_read_int(red_right_r), EEPROM_read_int(red_right_g), EEPROM_read_int(red_right_b), EEPROM_read_int(red_right_c));
    2cce:	82 e4       	ldi	r24, 0x42	; 66
    2cd0:	90 e0       	ldi	r25, 0x00	; 0
    2cd2:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    2cd6:	38 2e       	mov	r3, r24
    2cd8:	29 2e       	mov	r2, r25
    2cda:	80 e4       	ldi	r24, 0x40	; 64
    2cdc:	90 e0       	ldi	r25, 0x00	; 0
    2cde:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    2ce2:	58 2e       	mov	r5, r24
    2ce4:	49 2e       	mov	r4, r25
    2ce6:	8e e3       	ldi	r24, 0x3E	; 62
    2ce8:	90 e0       	ldi	r25, 0x00	; 0
    2cea:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    2cee:	78 2e       	mov	r7, r24
    2cf0:	69 2e       	mov	r6, r25
    2cf2:	8c e3       	ldi	r24, 0x3C	; 60
    2cf4:	90 e0       	ldi	r25, 0x00	; 0
    2cf6:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    2cfa:	2f 92       	push	r2
    2cfc:	3f 92       	push	r3
    2cfe:	4f 92       	push	r4
    2d00:	5f 92       	push	r5
    2d02:	6f 92       	push	r6
    2d04:	7f 92       	push	r7
    2d06:	9f 93       	push	r25
    2d08:	8f 93       	push	r24
    2d0a:	ff 92       	push	r15
    2d0c:	ef 92       	push	r14
    2d0e:	df 93       	push	r29
    2d10:	cf 93       	push	r28
    2d12:	0e 94 df 06 	call	0xdbe	; 0xdbe <Print::printf(char const*, ...) [clone .constprop.22]>
    2d16:	2d b7       	in	r18, 0x3d	; 61
    2d18:	3e b7       	in	r19, 0x3e	; 62
    2d1a:	24 5f       	subi	r18, 0xF4	; 244
    2d1c:	3f 4f       	sbci	r19, 0xFF	; 255
    2d1e:	0f b6       	in	r0, 0x3f	; 63
    2d20:	f8 94       	cli
    2d22:	3e bf       	out	0x3e, r19	; 62
    2d24:	0f be       	out	0x3f, r0	; 63
    2d26:	2d bf       	out	0x3d, r18	; 61
    2d28:	9f cd       	rjmp	.-1218   	; 0x2868 <menu_color()+0x2c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1214
      } else if (color_R == GREEN) {
    2d2a:	82 e0       	ldi	r24, 0x02	; 2
    2d2c:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <color(char)>
    2d30:	81 30       	cpi	r24, 0x01	; 1
    2d32:	d1 f5       	brne	.+116    	; 0x2da8 <menu_color()+0x56c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1215
        lcd.setCursor(12, 0);
    2d34:	60 e0       	ldi	r22, 0x00	; 0
    2d36:	8c e0       	ldi	r24, 0x0C	; 12
    2d38:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1216
        lcd.print("GRN ");
    2d3c:	8f e7       	ldi	r24, 0x7F	; 127
    2d3e:	94 e0       	ldi	r25, 0x04	; 4
    2d40:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1217
        lcd.setCursor(0, 3);
    2d44:	63 e0       	ldi	r22, 0x03	; 3
    2d46:	80 e0       	ldi	r24, 0x00	; 0
    2d48:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1218
        lcd.printf("M%4d %4d %4d %4d ", EEPROM_read_int(green_right_r), EEPROM_read_int(green_right_g), EEPROM_read_int(green_right_b), EEPROM_read_int(green_right_c));
    2d4c:	8a e4       	ldi	r24, 0x4A	; 74
    2d4e:	90 e0       	ldi	r25, 0x00	; 0
    2d50:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    2d54:	38 2e       	mov	r3, r24
    2d56:	29 2e       	mov	r2, r25
    2d58:	88 e4       	ldi	r24, 0x48	; 72
    2d5a:	90 e0       	ldi	r25, 0x00	; 0
    2d5c:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    2d60:	58 2e       	mov	r5, r24
    2d62:	49 2e       	mov	r4, r25
    2d64:	86 e4       	ldi	r24, 0x46	; 70
    2d66:	90 e0       	ldi	r25, 0x00	; 0
    2d68:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    2d6c:	78 2e       	mov	r7, r24
    2d6e:	69 2e       	mov	r6, r25
    2d70:	84 e4       	ldi	r24, 0x44	; 68
    2d72:	90 e0       	ldi	r25, 0x00	; 0
    2d74:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    2d78:	2f 92       	push	r2
    2d7a:	3f 92       	push	r3
    2d7c:	4f 92       	push	r4
    2d7e:	5f 92       	push	r5
    2d80:	6f 92       	push	r6
    2d82:	7f 92       	push	r7
    2d84:	9f 93       	push	r25
    2d86:	8f 93       	push	r24
    2d88:	ff 92       	push	r15
    2d8a:	ef 92       	push	r14
    2d8c:	df 93       	push	r29
    2d8e:	cf 93       	push	r28
    2d90:	0e 94 df 06 	call	0xdbe	; 0xdbe <Print::printf(char const*, ...) [clone .constprop.22]>
    2d94:	2d b7       	in	r18, 0x3d	; 61
    2d96:	3e b7       	in	r19, 0x3e	; 62
    2d98:	24 5f       	subi	r18, 0xF4	; 244
    2d9a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d9c:	0f b6       	in	r0, 0x3f	; 63
    2d9e:	f8 94       	cli
    2da0:	3e bf       	out	0x3e, r19	; 62
    2da2:	0f be       	out	0x3f, r0	; 63
    2da4:	2d bf       	out	0x3d, r18	; 61
    2da6:	60 cd       	rjmp	.-1344   	; 0x2868 <menu_color()+0x2c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1219
      } else if (color_R == BLUE) {
    2da8:	82 e0       	ldi	r24, 0x02	; 2
    2daa:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <color(char)>
    2dae:	82 30       	cpi	r24, 0x02	; 2
    2db0:	d1 f5       	brne	.+116    	; 0x2e26 <menu_color()+0x5ea>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1220
        lcd.setCursor(12, 0);
    2db2:	60 e0       	ldi	r22, 0x00	; 0
    2db4:	8c e0       	ldi	r24, 0x0C	; 12
    2db6:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1221
        lcd.print("BLUE");
    2dba:	84 e8       	ldi	r24, 0x84	; 132
    2dbc:	94 e0       	ldi	r25, 0x04	; 4
    2dbe:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1222
        lcd.setCursor(0, 3);
    2dc2:	63 e0       	ldi	r22, 0x03	; 3
    2dc4:	80 e0       	ldi	r24, 0x00	; 0
    2dc6:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1223
        lcd.printf("M%4d %4d %4d %4d", EEPROM_read_int(blue_right_r), EEPROM_read_int(blue_right_g), EEPROM_read_int(blue_right_b), EEPROM_read_int(blue_right_c));
    2dca:	82 e5       	ldi	r24, 0x52	; 82
    2dcc:	90 e0       	ldi	r25, 0x00	; 0
    2dce:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    2dd2:	38 2e       	mov	r3, r24
    2dd4:	29 2e       	mov	r2, r25
    2dd6:	80 e5       	ldi	r24, 0x50	; 80
    2dd8:	90 e0       	ldi	r25, 0x00	; 0
    2dda:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    2dde:	58 2e       	mov	r5, r24
    2de0:	49 2e       	mov	r4, r25
    2de2:	8e e4       	ldi	r24, 0x4E	; 78
    2de4:	90 e0       	ldi	r25, 0x00	; 0
    2de6:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    2dea:	78 2e       	mov	r7, r24
    2dec:	69 2e       	mov	r6, r25
    2dee:	8c e4       	ldi	r24, 0x4C	; 76
    2df0:	90 e0       	ldi	r25, 0x00	; 0
    2df2:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    2df6:	2f 92       	push	r2
    2df8:	3f 92       	push	r3
    2dfa:	4f 92       	push	r4
    2dfc:	5f 92       	push	r5
    2dfe:	6f 92       	push	r6
    2e00:	7f 92       	push	r7
    2e02:	9f 93       	push	r25
    2e04:	8f 93       	push	r24
    2e06:	1f 93       	push	r17
    2e08:	0f 93       	push	r16
    2e0a:	df 93       	push	r29
    2e0c:	cf 93       	push	r28
    2e0e:	0e 94 df 06 	call	0xdbe	; 0xdbe <Print::printf(char const*, ...) [clone .constprop.22]>
    2e12:	2d b7       	in	r18, 0x3d	; 61
    2e14:	3e b7       	in	r19, 0x3e	; 62
    2e16:	24 5f       	subi	r18, 0xF4	; 244
    2e18:	3f 4f       	sbci	r19, 0xFF	; 255
    2e1a:	0f b6       	in	r0, 0x3f	; 63
    2e1c:	f8 94       	cli
    2e1e:	3e bf       	out	0x3e, r19	; 62
    2e20:	0f be       	out	0x3f, r0	; 63
    2e22:	2d bf       	out	0x3d, r18	; 61
    2e24:	21 cd       	rjmp	.-1470   	; 0x2868 <menu_color()+0x2c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1224
      } else if (color_R == YELLOW) {
    2e26:	82 e0       	ldi	r24, 0x02	; 2
    2e28:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <color(char)>
    2e2c:	84 30       	cpi	r24, 0x04	; 4
    2e2e:	e1 f5       	brne	.+120    	; 0x2ea8 <menu_color()+0x66c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1225
        lcd.setCursor(12, 0);
    2e30:	60 e0       	ldi	r22, 0x00	; 0
    2e32:	8c e0       	ldi	r24, 0x0C	; 12
    2e34:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1226
        lcd.print("YELLOW");
    2e38:	80 e2       	ldi	r24, 0x20	; 32
    2e3a:	94 e0       	ldi	r25, 0x04	; 4
    2e3c:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1227
        lcd.setCursor(0, 3);
    2e40:	63 e0       	ldi	r22, 0x03	; 3
    2e42:	80 e0       	ldi	r24, 0x00	; 0
    2e44:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1228
        lcd.printf("M%4d %4d %4d ", EEPROM_read_int(yellow_right_r), EEPROM_read_int(yellow_right_g), EEPROM_read_int(yellow_right_b), EEPROM_read_int(yellow_right_c));
    2e48:	8a e5       	ldi	r24, 0x5A	; 90
    2e4a:	90 e0       	ldi	r25, 0x00	; 0
    2e4c:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    2e50:	38 2e       	mov	r3, r24
    2e52:	29 2e       	mov	r2, r25
    2e54:	88 e5       	ldi	r24, 0x58	; 88
    2e56:	90 e0       	ldi	r25, 0x00	; 0
    2e58:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    2e5c:	58 2e       	mov	r5, r24
    2e5e:	49 2e       	mov	r4, r25
    2e60:	86 e5       	ldi	r24, 0x56	; 86
    2e62:	90 e0       	ldi	r25, 0x00	; 0
    2e64:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    2e68:	78 2e       	mov	r7, r24
    2e6a:	69 2e       	mov	r6, r25
    2e6c:	84 e5       	ldi	r24, 0x54	; 84
    2e6e:	90 e0       	ldi	r25, 0x00	; 0
    2e70:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    2e74:	2f 92       	push	r2
    2e76:	3f 92       	push	r3
    2e78:	4f 92       	push	r4
    2e7a:	5f 92       	push	r5
    2e7c:	6f 92       	push	r6
    2e7e:	7f 92       	push	r7
    2e80:	9f 93       	push	r25
    2e82:	8f 93       	push	r24
    2e84:	89 e8       	ldi	r24, 0x89	; 137
    2e86:	94 e0       	ldi	r25, 0x04	; 4
    2e88:	9f 93       	push	r25
    2e8a:	8f 93       	push	r24
    2e8c:	df 93       	push	r29
    2e8e:	cf 93       	push	r28
    2e90:	0e 94 df 06 	call	0xdbe	; 0xdbe <Print::printf(char const*, ...) [clone .constprop.22]>
    2e94:	2d b7       	in	r18, 0x3d	; 61
    2e96:	3e b7       	in	r19, 0x3e	; 62
    2e98:	24 5f       	subi	r18, 0xF4	; 244
    2e9a:	3f 4f       	sbci	r19, 0xFF	; 255
    2e9c:	0f b6       	in	r0, 0x3f	; 63
    2e9e:	f8 94       	cli
    2ea0:	3e bf       	out	0x3e, r19	; 62
    2ea2:	0f be       	out	0x3f, r0	; 63
    2ea4:	2d bf       	out	0x3d, r18	; 61
    2ea6:	e0 cc       	rjmp	.-1600   	; 0x2868 <menu_color()+0x2c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1229
      } else if (color_R == SILVER) {
    2ea8:	82 e0       	ldi	r24, 0x02	; 2
    2eaa:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <color(char)>
    2eae:	85 30       	cpi	r24, 0x05	; 5
    2eb0:	d1 f5       	brne	.+116    	; 0x2f26 <menu_color()+0x6ea>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1230
        lcd.setCursor(12, 0);
    2eb2:	60 e0       	ldi	r22, 0x00	; 0
    2eb4:	8c e0       	ldi	r24, 0x0C	; 12
    2eb6:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1231
        lcd.print("SIL ");
    2eba:	87 e9       	ldi	r24, 0x97	; 151
    2ebc:	94 e0       	ldi	r25, 0x04	; 4
    2ebe:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1232
        lcd.setCursor(0, 3);
    2ec2:	63 e0       	ldi	r22, 0x03	; 3
    2ec4:	80 e0       	ldi	r24, 0x00	; 0
    2ec6:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1233
        lcd.printf("M%4d %4d %4d %4d", EEPROM_read_int(silver_right_r), EEPROM_read_int(silver_right_g), EEPROM_read_int(silver_right_b), EEPROM_read_int(silver_right_c));
    2eca:	82 e6       	ldi	r24, 0x62	; 98
    2ecc:	90 e0       	ldi	r25, 0x00	; 0
    2ece:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    2ed2:	38 2e       	mov	r3, r24
    2ed4:	29 2e       	mov	r2, r25
    2ed6:	80 e6       	ldi	r24, 0x60	; 96
    2ed8:	90 e0       	ldi	r25, 0x00	; 0
    2eda:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    2ede:	58 2e       	mov	r5, r24
    2ee0:	49 2e       	mov	r4, r25
    2ee2:	8e e5       	ldi	r24, 0x5E	; 94
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    2eea:	78 2e       	mov	r7, r24
    2eec:	69 2e       	mov	r6, r25
    2eee:	8c e5       	ldi	r24, 0x5C	; 92
    2ef0:	90 e0       	ldi	r25, 0x00	; 0
    2ef2:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    2ef6:	2f 92       	push	r2
    2ef8:	3f 92       	push	r3
    2efa:	4f 92       	push	r4
    2efc:	5f 92       	push	r5
    2efe:	6f 92       	push	r6
    2f00:	7f 92       	push	r7
    2f02:	9f 93       	push	r25
    2f04:	8f 93       	push	r24
    2f06:	1f 93       	push	r17
    2f08:	0f 93       	push	r16
    2f0a:	df 93       	push	r29
    2f0c:	cf 93       	push	r28
    2f0e:	0e 94 df 06 	call	0xdbe	; 0xdbe <Print::printf(char const*, ...) [clone .constprop.22]>
    2f12:	2d b7       	in	r18, 0x3d	; 61
    2f14:	3e b7       	in	r19, 0x3e	; 62
    2f16:	24 5f       	subi	r18, 0xF4	; 244
    2f18:	3f 4f       	sbci	r19, 0xFF	; 255
    2f1a:	0f b6       	in	r0, 0x3f	; 63
    2f1c:	f8 94       	cli
    2f1e:	3e bf       	out	0x3e, r19	; 62
    2f20:	0f be       	out	0x3f, r0	; 63
    2f22:	2d bf       	out	0x3d, r18	; 61
    2f24:	a1 cc       	rjmp	.-1726   	; 0x2868 <menu_color()+0x2c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1234
      } else if (color_R == WHITE) {
    2f26:	82 e0       	ldi	r24, 0x02	; 2
    2f28:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <color(char)>
    2f2c:	87 30       	cpi	r24, 0x07	; 7
    2f2e:	09 f0       	breq	.+2      	; 0x2f32 <menu_color()+0x6f6>
    2f30:	9b cc       	rjmp	.-1738   	; 0x2868 <menu_color()+0x2c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1235
        lcd.setCursor(12, 0);
    2f32:	60 e0       	ldi	r22, 0x00	; 0
    2f34:	8c e0       	ldi	r24, 0x0C	; 12
    2f36:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1236
        lcd.print("WHT ");
    2f3a:	8c e9       	ldi	r24, 0x9C	; 156
    2f3c:	94 e0       	ldi	r25, 0x04	; 4
    2f3e:	69 ce       	rjmp	.-814    	; 0x2c12 <menu_color()+0x3d6>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1240
        lcd.setCursor(0, 3);
        lcd.print("                    ");
      }
    } else if (page == 3)  // memory RED
    2f40:	83 30       	cpi	r24, 0x03	; 3
    2f42:	09 f0       	breq	.+2      	; 0x2f46 <menu_color()+0x70a>
    2f44:	59 c0       	rjmp	.+178    	; 0x2ff8 <menu_color()+0x7bc>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1242
    {
      lcd.setCursor(0, 0);
    2f46:	60 e0       	ldi	r22, 0x00	; 0
    2f48:	80 e0       	ldi	r24, 0x00	; 0
    2f4a:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1243
      lcd.print("memory RED:  ");
    2f4e:	81 ea       	ldi	r24, 0xA1	; 161
    2f50:	94 e0       	ldi	r25, 0x04	; 4
    2f52:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1245

      lcd.setCursor(0, 1);
    2f56:	61 e0       	ldi	r22, 0x01	; 1
    2f58:	80 e0       	ldi	r24, 0x00	; 0
    2f5a:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1246
      lcd.print("  RED  GRN  BLU ");
    2f5e:	87 e5       	ldi	r24, 0x57	; 87
    2f60:	94 e0       	ldi	r25, 0x04	; 4
    2f62:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1248

      lcd.setCursor(0, 2);
    2f66:	62 e0       	ldi	r22, 0x02	; 2
    2f68:	80 e0       	ldi	r24, 0x00	; 0
    2f6a:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1249
      lcd.printf("L%4d %4d %4d ", EEPROM_read_int(red_left_r), EEPROM_read_int(red_left_g), EEPROM_read_int(red_left_b));
    2f6e:	88 e1       	ldi	r24, 0x18	; 24
    2f70:	90 e0       	ldi	r25, 0x00	; 0
    2f72:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    2f76:	58 2e       	mov	r5, r24
    2f78:	49 2e       	mov	r4, r25
    2f7a:	86 e1       	ldi	r24, 0x16	; 22
    2f7c:	90 e0       	ldi	r25, 0x00	; 0
    2f7e:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    2f82:	78 2e       	mov	r7, r24
    2f84:	69 2e       	mov	r6, r25
    2f86:	84 e1       	ldi	r24, 0x14	; 20
    2f88:	90 e0       	ldi	r25, 0x00	; 0
    2f8a:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    2f8e:	4f 92       	push	r4
    2f90:	5f 92       	push	r5
    2f92:	6f 92       	push	r6
    2f94:	7f 92       	push	r7
    2f96:	9f 93       	push	r25
    2f98:	8f 93       	push	r24
    2f9a:	df 92       	push	r13
    2f9c:	cf 92       	push	r12
    2f9e:	df 93       	push	r29
    2fa0:	cf 93       	push	r28
    2fa2:	0e 94 df 06 	call	0xdbe	; 0xdbe <Print::printf(char const*, ...) [clone .constprop.22]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1251

      lcd.setCursor(0, 3);
    2fa6:	63 e0       	ldi	r22, 0x03	; 3
    2fa8:	80 e0       	ldi	r24, 0x00	; 0
    2faa:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1252
      lcd.printf("R%4d %4d %4d ", EEPROM_read_int(red_right_r), EEPROM_read_int(red_right_g), EEPROM_read_int(red_right_b));
    2fae:	80 e4       	ldi	r24, 0x40	; 64
    2fb0:	90 e0       	ldi	r25, 0x00	; 0
    2fb2:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    2fb6:	58 2e       	mov	r5, r24
    2fb8:	49 2e       	mov	r4, r25
    2fba:	8e e3       	ldi	r24, 0x3E	; 62
    2fbc:	90 e0       	ldi	r25, 0x00	; 0
    2fbe:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    2fc2:	78 2e       	mov	r7, r24
    2fc4:	69 2e       	mov	r6, r25
    2fc6:	8c e3       	ldi	r24, 0x3C	; 60
    2fc8:	90 e0       	ldi	r25, 0x00	; 0
    2fca:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    2fce:	4f 92       	push	r4
    2fd0:	5f 92       	push	r5
    2fd2:	6f 92       	push	r6
    2fd4:	7f 92       	push	r7
    2fd6:	9f 93       	push	r25
    2fd8:	8f 93       	push	r24
    2fda:	bf 92       	push	r11
    2fdc:	af 92       	push	r10
    2fde:	df 93       	push	r29
    2fe0:	cf 93       	push	r28
    2fe2:	0e 94 df 06 	call	0xdbe	; 0xdbe <Print::printf(char const*, ...) [clone .constprop.22]>
    2fe6:	8d b7       	in	r24, 0x3d	; 61
    2fe8:	9e b7       	in	r25, 0x3e	; 62
    2fea:	44 96       	adiw	r24, 0x14	; 20
    2fec:	0f b6       	in	r0, 0x3f	; 63
    2fee:	f8 94       	cli
    2ff0:	9e bf       	out	0x3e, r25	; 62
    2ff2:	0f be       	out	0x3f, r0	; 63
    2ff4:	8d bf       	out	0x3d, r24	; 61
    2ff6:	38 cc       	rjmp	.-1936   	; 0x2868 <menu_color()+0x2c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1253
    } else if (page == 4)  // memory GREEN
    2ff8:	84 30       	cpi	r24, 0x04	; 4
    2ffa:	09 f0       	breq	.+2      	; 0x2ffe <menu_color()+0x7c2>
    2ffc:	5a c0       	rjmp	.+180    	; 0x30b2 <menu_color()+0x876>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1255
    {
      lcd.setCursor(0, 0);
    2ffe:	60 e0       	ldi	r22, 0x00	; 0
    3000:	80 e0       	ldi	r24, 0x00	; 0
    3002:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1256
      lcd.print("memory GRN:  ");
    3006:	8b ec       	ldi	r24, 0xCB	; 203
    3008:	94 e0       	ldi	r25, 0x04	; 4
    300a:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1258

      lcd.setCursor(0, 1);
    300e:	61 e0       	ldi	r22, 0x01	; 1
    3010:	80 e0       	ldi	r24, 0x00	; 0
    3012:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1259
      lcd.print("  RED  GRN  BLU ");
    3016:	87 e5       	ldi	r24, 0x57	; 87
    3018:	94 e0       	ldi	r25, 0x04	; 4
    301a:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1261

      lcd.setCursor(0, 2);
    301e:	62 e0       	ldi	r22, 0x02	; 2
    3020:	80 e0       	ldi	r24, 0x00	; 0
    3022:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1262
      lcd.printf("L%4d %4d %4d ", EEPROM_read_int(green_left_r), EEPROM_read_int(green_left_g), EEPROM_read_int(green_left_b));
    3026:	80 e2       	ldi	r24, 0x20	; 32
    3028:	90 e0       	ldi	r25, 0x00	; 0
    302a:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    302e:	58 2e       	mov	r5, r24
    3030:	49 2e       	mov	r4, r25
    3032:	8e e1       	ldi	r24, 0x1E	; 30
    3034:	90 e0       	ldi	r25, 0x00	; 0
    3036:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    303a:	78 2e       	mov	r7, r24
    303c:	69 2e       	mov	r6, r25
    303e:	8c e1       	ldi	r24, 0x1C	; 28
    3040:	90 e0       	ldi	r25, 0x00	; 0
    3042:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    3046:	4f 92       	push	r4
    3048:	5f 92       	push	r5
    304a:	6f 92       	push	r6
    304c:	7f 92       	push	r7
    304e:	9f 93       	push	r25
    3050:	8f 93       	push	r24
    3052:	df 92       	push	r13
    3054:	cf 92       	push	r12
    3056:	df 93       	push	r29
    3058:	cf 93       	push	r28
    305a:	0e 94 df 06 	call	0xdbe	; 0xdbe <Print::printf(char const*, ...) [clone .constprop.22]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1264

      lcd.setCursor(0, 3);
    305e:	63 e0       	ldi	r22, 0x03	; 3
    3060:	80 e0       	ldi	r24, 0x00	; 0
    3062:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1265
      lcd.printf("R%4d %4d %4d ", EEPROM_read_int(green_right_r), EEPROM_read_int(green_right_g), EEPROM_read_int(green_right_b));
    3066:	88 e4       	ldi	r24, 0x48	; 72
    3068:	90 e0       	ldi	r25, 0x00	; 0
    306a:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    306e:	58 2e       	mov	r5, r24
    3070:	49 2e       	mov	r4, r25
    3072:	86 e4       	ldi	r24, 0x46	; 70
    3074:	90 e0       	ldi	r25, 0x00	; 0
    3076:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    307a:	78 2e       	mov	r7, r24
    307c:	69 2e       	mov	r6, r25
    307e:	84 e4       	ldi	r24, 0x44	; 68
    3080:	90 e0       	ldi	r25, 0x00	; 0
    3082:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    3086:	4f 92       	push	r4
    3088:	5f 92       	push	r5
    308a:	6f 92       	push	r6
    308c:	7f 92       	push	r7
    308e:	9f 93       	push	r25
    3090:	8f 93       	push	r24
    3092:	bf 92       	push	r11
    3094:	af 92       	push	r10
    3096:	df 93       	push	r29
    3098:	cf 93       	push	r28
    309a:	0e 94 df 06 	call	0xdbe	; 0xdbe <Print::printf(char const*, ...) [clone .constprop.22]>
    309e:	2d b7       	in	r18, 0x3d	; 61
    30a0:	3e b7       	in	r19, 0x3e	; 62
    30a2:	2c 5e       	subi	r18, 0xEC	; 236
    30a4:	3f 4f       	sbci	r19, 0xFF	; 255
    30a6:	0f b6       	in	r0, 0x3f	; 63
    30a8:	f8 94       	cli
    30aa:	3e bf       	out	0x3e, r19	; 62
    30ac:	0f be       	out	0x3f, r0	; 63
    30ae:	2d bf       	out	0x3d, r18	; 61
    30b0:	db cb       	rjmp	.-2122   	; 0x2868 <menu_color()+0x2c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1266
    } else if (page == 5)  // memory BLUE
    30b2:	85 30       	cpi	r24, 0x05	; 5
    30b4:	09 f0       	breq	.+2      	; 0x30b8 <menu_color()+0x87c>
    30b6:	59 c0       	rjmp	.+178    	; 0x316a <menu_color()+0x92e>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1268
    {
      lcd.setCursor(0, 0);
    30b8:	60 e0       	ldi	r22, 0x00	; 0
    30ba:	80 e0       	ldi	r24, 0x00	; 0
    30bc:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1269
      lcd.print("memory BLU:  ");
    30c0:	89 ed       	ldi	r24, 0xD9	; 217
    30c2:	94 e0       	ldi	r25, 0x04	; 4
    30c4:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1271

      lcd.setCursor(0, 1);
    30c8:	61 e0       	ldi	r22, 0x01	; 1
    30ca:	80 e0       	ldi	r24, 0x00	; 0
    30cc:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1272
      lcd.print("  RED  GRN  BLU ");
    30d0:	87 e5       	ldi	r24, 0x57	; 87
    30d2:	94 e0       	ldi	r25, 0x04	; 4
    30d4:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1274

      lcd.setCursor(0, 2);
    30d8:	62 e0       	ldi	r22, 0x02	; 2
    30da:	80 e0       	ldi	r24, 0x00	; 0
    30dc:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1275
      lcd.printf("L%4d %4d %4d ", EEPROM_read_int(blue_left_r), EEPROM_read_int(blue_left_g), EEPROM_read_int(blue_left_b));
    30e0:	88 e2       	ldi	r24, 0x28	; 40
    30e2:	90 e0       	ldi	r25, 0x00	; 0
    30e4:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    30e8:	58 2e       	mov	r5, r24
    30ea:	49 2e       	mov	r4, r25
    30ec:	86 e2       	ldi	r24, 0x26	; 38
    30ee:	90 e0       	ldi	r25, 0x00	; 0
    30f0:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    30f4:	78 2e       	mov	r7, r24
    30f6:	69 2e       	mov	r6, r25
    30f8:	84 e2       	ldi	r24, 0x24	; 36
    30fa:	90 e0       	ldi	r25, 0x00	; 0
    30fc:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    3100:	4f 92       	push	r4
    3102:	5f 92       	push	r5
    3104:	6f 92       	push	r6
    3106:	7f 92       	push	r7
    3108:	9f 93       	push	r25
    310a:	8f 93       	push	r24
    310c:	df 92       	push	r13
    310e:	cf 92       	push	r12
    3110:	df 93       	push	r29
    3112:	cf 93       	push	r28
    3114:	0e 94 df 06 	call	0xdbe	; 0xdbe <Print::printf(char const*, ...) [clone .constprop.22]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1277

      lcd.setCursor(0, 3);
    3118:	63 e0       	ldi	r22, 0x03	; 3
    311a:	80 e0       	ldi	r24, 0x00	; 0
    311c:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1278
      lcd.printf("R%4d %4d %4d ", EEPROM_read_int(blue_right_r), EEPROM_read_int(blue_right_g), EEPROM_read_int(blue_right_b));
    3120:	80 e5       	ldi	r24, 0x50	; 80
    3122:	90 e0       	ldi	r25, 0x00	; 0
    3124:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    3128:	58 2e       	mov	r5, r24
    312a:	49 2e       	mov	r4, r25
    312c:	8e e4       	ldi	r24, 0x4E	; 78
    312e:	90 e0       	ldi	r25, 0x00	; 0
    3130:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    3134:	78 2e       	mov	r7, r24
    3136:	69 2e       	mov	r6, r25
    3138:	8c e4       	ldi	r24, 0x4C	; 76
    313a:	90 e0       	ldi	r25, 0x00	; 0
    313c:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    3140:	4f 92       	push	r4
    3142:	5f 92       	push	r5
    3144:	6f 92       	push	r6
    3146:	7f 92       	push	r7
    3148:	9f 93       	push	r25
    314a:	8f 93       	push	r24
    314c:	bf 92       	push	r11
    314e:	af 92       	push	r10
    3150:	df 93       	push	r29
    3152:	cf 93       	push	r28
    3154:	0e 94 df 06 	call	0xdbe	; 0xdbe <Print::printf(char const*, ...) [clone .constprop.22]>
    3158:	8d b7       	in	r24, 0x3d	; 61
    315a:	9e b7       	in	r25, 0x3e	; 62
    315c:	44 96       	adiw	r24, 0x14	; 20
    315e:	0f b6       	in	r0, 0x3f	; 63
    3160:	f8 94       	cli
    3162:	9e bf       	out	0x3e, r25	; 62
    3164:	0f be       	out	0x3f, r0	; 63
    3166:	8d bf       	out	0x3d, r24	; 61
    3168:	7f cb       	rjmp	.-2306   	; 0x2868 <menu_color()+0x2c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1279
    } else if (page == 6)  // memory Yellow
    316a:	86 30       	cpi	r24, 0x06	; 6
    316c:	09 f0       	breq	.+2      	; 0x3170 <menu_color()+0x934>
    316e:	5a c0       	rjmp	.+180    	; 0x3224 <menu_color()+0x9e8>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1281
    {
      lcd.setCursor(0, 0);
    3170:	60 e0       	ldi	r22, 0x00	; 0
    3172:	80 e0       	ldi	r24, 0x00	; 0
    3174:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1282
      lcd.print("memory Yel:  ");
    3178:	87 ee       	ldi	r24, 0xE7	; 231
    317a:	94 e0       	ldi	r25, 0x04	; 4
    317c:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1284

      lcd.setCursor(0, 1);
    3180:	61 e0       	ldi	r22, 0x01	; 1
    3182:	80 e0       	ldi	r24, 0x00	; 0
    3184:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1285
      lcd.print("  RED  GRN  BLU ");
    3188:	87 e5       	ldi	r24, 0x57	; 87
    318a:	94 e0       	ldi	r25, 0x04	; 4
    318c:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1287

      lcd.setCursor(0, 2);
    3190:	62 e0       	ldi	r22, 0x02	; 2
    3192:	80 e0       	ldi	r24, 0x00	; 0
    3194:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1288
      lcd.printf("L%4d %4d %4d ", EEPROM_read_int(yellow_left_r), EEPROM_read_int(yellow_left_g), EEPROM_read_int(yellow_left_b));
    3198:	80 e3       	ldi	r24, 0x30	; 48
    319a:	90 e0       	ldi	r25, 0x00	; 0
    319c:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    31a0:	58 2e       	mov	r5, r24
    31a2:	49 2e       	mov	r4, r25
    31a4:	8e e2       	ldi	r24, 0x2E	; 46
    31a6:	90 e0       	ldi	r25, 0x00	; 0
    31a8:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    31ac:	78 2e       	mov	r7, r24
    31ae:	69 2e       	mov	r6, r25
    31b0:	8c e2       	ldi	r24, 0x2C	; 44
    31b2:	90 e0       	ldi	r25, 0x00	; 0
    31b4:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    31b8:	4f 92       	push	r4
    31ba:	5f 92       	push	r5
    31bc:	6f 92       	push	r6
    31be:	7f 92       	push	r7
    31c0:	9f 93       	push	r25
    31c2:	8f 93       	push	r24
    31c4:	df 92       	push	r13
    31c6:	cf 92       	push	r12
    31c8:	df 93       	push	r29
    31ca:	cf 93       	push	r28
    31cc:	0e 94 df 06 	call	0xdbe	; 0xdbe <Print::printf(char const*, ...) [clone .constprop.22]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1290

      lcd.setCursor(0, 3);
    31d0:	63 e0       	ldi	r22, 0x03	; 3
    31d2:	80 e0       	ldi	r24, 0x00	; 0
    31d4:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1291
      lcd.printf("R%4d %4d %4d ", EEPROM_read_int(yellow_right_r), EEPROM_read_int(yellow_right_g), EEPROM_read_int(yellow_right_b));
    31d8:	88 e5       	ldi	r24, 0x58	; 88
    31da:	90 e0       	ldi	r25, 0x00	; 0
    31dc:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    31e0:	58 2e       	mov	r5, r24
    31e2:	49 2e       	mov	r4, r25
    31e4:	86 e5       	ldi	r24, 0x56	; 86
    31e6:	90 e0       	ldi	r25, 0x00	; 0
    31e8:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    31ec:	78 2e       	mov	r7, r24
    31ee:	69 2e       	mov	r6, r25
    31f0:	84 e5       	ldi	r24, 0x54	; 84
    31f2:	90 e0       	ldi	r25, 0x00	; 0
    31f4:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    31f8:	4f 92       	push	r4
    31fa:	5f 92       	push	r5
    31fc:	6f 92       	push	r6
    31fe:	7f 92       	push	r7
    3200:	9f 93       	push	r25
    3202:	8f 93       	push	r24
    3204:	bf 92       	push	r11
    3206:	af 92       	push	r10
    3208:	df 93       	push	r29
    320a:	cf 93       	push	r28
    320c:	0e 94 df 06 	call	0xdbe	; 0xdbe <Print::printf(char const*, ...) [clone .constprop.22]>
    3210:	2d b7       	in	r18, 0x3d	; 61
    3212:	3e b7       	in	r19, 0x3e	; 62
    3214:	2c 5e       	subi	r18, 0xEC	; 236
    3216:	3f 4f       	sbci	r19, 0xFF	; 255
    3218:	0f b6       	in	r0, 0x3f	; 63
    321a:	f8 94       	cli
    321c:	3e bf       	out	0x3e, r19	; 62
    321e:	0f be       	out	0x3f, r0	; 63
    3220:	2d bf       	out	0x3d, r18	; 61
    3222:	22 cb       	rjmp	.-2492   	; 0x2868 <menu_color()+0x2c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1292
    } else if (page == 7)  // memory Silver
    3224:	87 30       	cpi	r24, 0x07	; 7
    3226:	09 f0       	breq	.+2      	; 0x322a <menu_color()+0x9ee>
    3228:	6d c0       	rjmp	.+218    	; 0x3304 <menu_color()+0xac8>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1294
    {
      lcd.setCursor(0, 0);
    322a:	60 e0       	ldi	r22, 0x00	; 0
    322c:	80 e0       	ldi	r24, 0x00	; 0
    322e:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1295
      lcd.print("memory Silver:  ");
    3232:	85 ef       	ldi	r24, 0xF5	; 245
    3234:	94 e0       	ldi	r25, 0x04	; 4
    3236:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1297

      lcd.setCursor(0, 1);
    323a:	61 e0       	ldi	r22, 0x01	; 1
    323c:	80 e0       	ldi	r24, 0x00	; 0
    323e:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1298
      lcd.print("  RED  GRN  BLU ");
    3242:	87 e5       	ldi	r24, 0x57	; 87
    3244:	94 e0       	ldi	r25, 0x04	; 4
    3246:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1300

      lcd.setCursor(0, 2);
    324a:	62 e0       	ldi	r22, 0x02	; 2
    324c:	80 e0       	ldi	r24, 0x00	; 0
    324e:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1301
      lcd.printf("L%4d %4d %4d %4d", EEPROM_read_int(silver_left_r), EEPROM_read_int(silver_left_g), EEPROM_read_int(silver_left_b), EEPROM_read_int(silver_left_c));
    3252:	8a e3       	ldi	r24, 0x3A	; 58
    3254:	90 e0       	ldi	r25, 0x00	; 0
    3256:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    325a:	38 2e       	mov	r3, r24
    325c:	29 2e       	mov	r2, r25
    325e:	88 e3       	ldi	r24, 0x38	; 56
    3260:	90 e0       	ldi	r25, 0x00	; 0
    3262:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    3266:	58 2e       	mov	r5, r24
    3268:	49 2e       	mov	r4, r25
    326a:	86 e3       	ldi	r24, 0x36	; 54
    326c:	90 e0       	ldi	r25, 0x00	; 0
    326e:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    3272:	78 2e       	mov	r7, r24
    3274:	69 2e       	mov	r6, r25
    3276:	84 e3       	ldi	r24, 0x34	; 52
    3278:	90 e0       	ldi	r25, 0x00	; 0
    327a:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    327e:	2f 92       	push	r2
    3280:	3f 92       	push	r3
    3282:	4f 92       	push	r4
    3284:	5f 92       	push	r5
    3286:	6f 92       	push	r6
    3288:	7f 92       	push	r7
    328a:	9f 93       	push	r25
    328c:	8f 93       	push	r24
    328e:	86 e0       	ldi	r24, 0x06	; 6
    3290:	95 e0       	ldi	r25, 0x05	; 5
    3292:	9f 93       	push	r25
    3294:	8f 93       	push	r24
    3296:	df 93       	push	r29
    3298:	cf 93       	push	r28
    329a:	0e 94 df 06 	call	0xdbe	; 0xdbe <Print::printf(char const*, ...) [clone .constprop.22]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1303

      lcd.setCursor(0, 3);
    329e:	63 e0       	ldi	r22, 0x03	; 3
    32a0:	80 e0       	ldi	r24, 0x00	; 0
    32a2:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1304
      lcd.printf("R%4d %4d %4d %4d", EEPROM_read_int(silver_right_r), EEPROM_read_int(silver_right_g), EEPROM_read_int(silver_right_b), EEPROM_read_int(silver_right_c));
    32a6:	82 e6       	ldi	r24, 0x62	; 98
    32a8:	90 e0       	ldi	r25, 0x00	; 0
    32aa:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    32ae:	38 2e       	mov	r3, r24
    32b0:	29 2e       	mov	r2, r25
    32b2:	80 e6       	ldi	r24, 0x60	; 96
    32b4:	90 e0       	ldi	r25, 0x00	; 0
    32b6:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    32ba:	58 2e       	mov	r5, r24
    32bc:	49 2e       	mov	r4, r25
    32be:	8e e5       	ldi	r24, 0x5E	; 94
    32c0:	90 e0       	ldi	r25, 0x00	; 0
    32c2:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    32c6:	78 2e       	mov	r7, r24
    32c8:	69 2e       	mov	r6, r25
    32ca:	8c e5       	ldi	r24, 0x5C	; 92
    32cc:	90 e0       	ldi	r25, 0x00	; 0
    32ce:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    32d2:	2f 92       	push	r2
    32d4:	3f 92       	push	r3
    32d6:	4f 92       	push	r4
    32d8:	5f 92       	push	r5
    32da:	6f 92       	push	r6
    32dc:	7f 92       	push	r7
    32de:	9f 93       	push	r25
    32e0:	8f 93       	push	r24
    32e2:	27 e1       	ldi	r18, 0x17	; 23
    32e4:	35 e0       	ldi	r19, 0x05	; 5
    32e6:	3f 93       	push	r19
    32e8:	2f 93       	push	r18
    32ea:	df 93       	push	r29
    32ec:	cf 93       	push	r28
    32ee:	0e 94 df 06 	call	0xdbe	; 0xdbe <Print::printf(char const*, ...) [clone .constprop.22]>
    32f2:	8d b7       	in	r24, 0x3d	; 61
    32f4:	9e b7       	in	r25, 0x3e	; 62
    32f6:	48 96       	adiw	r24, 0x18	; 24
    32f8:	0f b6       	in	r0, 0x3f	; 63
    32fa:	f8 94       	cli
    32fc:	9e bf       	out	0x3e, r25	; 62
    32fe:	0f be       	out	0x3f, r0	; 63
    3300:	8d bf       	out	0x3d, r24	; 61
    3302:	b2 ca       	rjmp	.-2716   	; 0x2868 <menu_color()+0x2c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1305
    }else if (page == 8)  // APDS Front
    3304:	88 30       	cpi	r24, 0x08	; 8
    3306:	09 f0       	breq	.+2      	; 0x330a <menu_color()+0xace>
    3308:	af ca       	rjmp	.-2722   	; 0x2868 <menu_color()+0x2c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1307
    {
      lcd.setCursor(0, 0);
    330a:	60 e0       	ldi	r22, 0x00	; 0
    330c:	80 e0       	ldi	r24, 0x00	; 0
    330e:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1308
      lcd.print("APDS Front: ");
    3312:	88 e2       	ldi	r24, 0x28	; 40
    3314:	95 e0       	ldi	r25, 0x05	; 5
    3316:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1309
      lcd.setCursor(0, 1);
    331a:	61 e0       	ldi	r22, 0x01	; 1
    331c:	80 e0       	ldi	r24, 0x00	; 0
    331e:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1310
      lcd.print("  RED  GRN  BLU ");
    3322:	87 e5       	ldi	r24, 0x57	; 87
    3324:	94 e0       	ldi	r25, 0x04	; 4
    3326:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1312

      lcd.setCursor(0, 2);
    332a:	62 e0       	ldi	r22, 0x02	; 2
    332c:	80 e0       	ldi	r24, 0x00	; 0
    332e:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1313
      lcd.printf(" %4d %4d %4d %4d", red, green, blue, clear);
    3332:	80 91 6a 08 	lds	r24, 0x086A	; 0x80086a <clear+0x1>
    3336:	8f 93       	push	r24
    3338:	80 91 69 08 	lds	r24, 0x0869	; 0x800869 <clear>
    333c:	8f 93       	push	r24
    333e:	80 91 6c 08 	lds	r24, 0x086C	; 0x80086c <blue+0x1>
    3342:	8f 93       	push	r24
    3344:	80 91 6b 08 	lds	r24, 0x086B	; 0x80086b <blue>
    3348:	8f 93       	push	r24
    334a:	80 91 6e 08 	lds	r24, 0x086E	; 0x80086e <green+0x1>
    334e:	8f 93       	push	r24
    3350:	80 91 6d 08 	lds	r24, 0x086D	; 0x80086d <green>
    3354:	8f 93       	push	r24
    3356:	80 91 70 08 	lds	r24, 0x0870	; 0x800870 <red+0x1>
    335a:	8f 93       	push	r24
    335c:	80 91 6f 08 	lds	r24, 0x086F	; 0x80086f <red>
    3360:	8f 93       	push	r24
    3362:	9f 92       	push	r9
    3364:	8f 92       	push	r8
    3366:	df 93       	push	r29
    3368:	cf 93       	push	r28
    336a:	0e 94 df 06 	call	0xdbe	; 0xdbe <Print::printf(char const*, ...) [clone .constprop.22]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1315

      lcd.setCursor(12, 0);
    336e:	60 e0       	ldi	r22, 0x00	; 0
    3370:	8c e0       	ldi	r24, 0x0C	; 12
    3372:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1316
      if (color_F == RED) {
    3376:	83 e0       	ldi	r24, 0x03	; 3
    3378:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <color(char)>
    337c:	2d b7       	in	r18, 0x3d	; 61
    337e:	3e b7       	in	r19, 0x3e	; 62
    3380:	24 5f       	subi	r18, 0xF4	; 244
    3382:	3f 4f       	sbci	r19, 0xFF	; 255
    3384:	0f b6       	in	r0, 0x3f	; 63
    3386:	f8 94       	cli
    3388:	3e bf       	out	0x3e, r19	; 62
    338a:	0f be       	out	0x3f, r0	; 63
    338c:	2d bf       	out	0x3d, r18	; 61
    338e:	81 11       	cpse	r24, r1
    3390:	3a c0       	rjmp	.+116    	; 0x3406 <menu_color()+0xbca>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1317
        lcd.setCursor(12, 0);
    3392:	60 e0       	ldi	r22, 0x00	; 0
    3394:	8c e0       	ldi	r24, 0x0C	; 12
    3396:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1318
        lcd.print("RED ");
    339a:	88 e6       	ldi	r24, 0x68	; 104
    339c:	94 e0       	ldi	r25, 0x04	; 4
    339e:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1319
        lcd.setCursor(0, 3);
    33a2:	63 e0       	ldi	r22, 0x03	; 3
    33a4:	80 e0       	ldi	r24, 0x00	; 0
    33a6:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1320
        lcd.printf("M%4d %4d %4d %4d ", EEPROM_read_int(red_front_r), EEPROM_read_int(red_front_g), EEPROM_read_int(red_front_b), EEPROM_read_int(red_front_c));
    33aa:	8a e6       	ldi	r24, 0x6A	; 106
    33ac:	90 e0       	ldi	r25, 0x00	; 0
    33ae:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    33b2:	38 2e       	mov	r3, r24
    33b4:	29 2e       	mov	r2, r25
    33b6:	88 e6       	ldi	r24, 0x68	; 104
    33b8:	90 e0       	ldi	r25, 0x00	; 0
    33ba:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    33be:	58 2e       	mov	r5, r24
    33c0:	49 2e       	mov	r4, r25
    33c2:	86 e6       	ldi	r24, 0x66	; 102
    33c4:	90 e0       	ldi	r25, 0x00	; 0
    33c6:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    33ca:	78 2e       	mov	r7, r24
    33cc:	69 2e       	mov	r6, r25
    33ce:	84 e6       	ldi	r24, 0x64	; 100
    33d0:	90 e0       	ldi	r25, 0x00	; 0
    33d2:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    33d6:	2f 92       	push	r2
    33d8:	3f 92       	push	r3
    33da:	4f 92       	push	r4
    33dc:	5f 92       	push	r5
    33de:	6f 92       	push	r6
    33e0:	7f 92       	push	r7
    33e2:	9f 93       	push	r25
    33e4:	8f 93       	push	r24
    33e6:	ff 92       	push	r15
    33e8:	ef 92       	push	r14
    33ea:	df 93       	push	r29
    33ec:	cf 93       	push	r28
    33ee:	0e 94 df 06 	call	0xdbe	; 0xdbe <Print::printf(char const*, ...) [clone .constprop.22]>
    33f2:	2d b7       	in	r18, 0x3d	; 61
    33f4:	3e b7       	in	r19, 0x3e	; 62
    33f6:	24 5f       	subi	r18, 0xF4	; 244
    33f8:	3f 4f       	sbci	r19, 0xFF	; 255
    33fa:	0f b6       	in	r0, 0x3f	; 63
    33fc:	f8 94       	cli
    33fe:	3e bf       	out	0x3e, r19	; 62
    3400:	0f be       	out	0x3f, r0	; 63
    3402:	2d bf       	out	0x3d, r18	; 61
    3404:	31 ca       	rjmp	.-2974   	; 0x2868 <menu_color()+0x2c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1321
      } else if (color_F == GREEN) {
    3406:	83 e0       	ldi	r24, 0x03	; 3
    3408:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <color(char)>
    340c:	81 30       	cpi	r24, 0x01	; 1
    340e:	d1 f5       	brne	.+116    	; 0x3484 <menu_color()+0xc48>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1322
        lcd.setCursor(12, 0);
    3410:	60 e0       	ldi	r22, 0x00	; 0
    3412:	8c e0       	ldi	r24, 0x0C	; 12
    3414:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1323
        lcd.print("GRN ");
    3418:	8f e7       	ldi	r24, 0x7F	; 127
    341a:	94 e0       	ldi	r25, 0x04	; 4
    341c:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1324
        lcd.setCursor(0, 3);
    3420:	63 e0       	ldi	r22, 0x03	; 3
    3422:	80 e0       	ldi	r24, 0x00	; 0
    3424:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1325
        lcd.printf("M%4d %4d %4d %4d ", EEPROM_read_int(green_front_r), EEPROM_read_int(green_front_g), EEPROM_read_int(green_front_b), EEPROM_read_int(green_front_c));
    3428:	82 e7       	ldi	r24, 0x72	; 114
    342a:	90 e0       	ldi	r25, 0x00	; 0
    342c:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    3430:	38 2e       	mov	r3, r24
    3432:	29 2e       	mov	r2, r25
    3434:	80 e7       	ldi	r24, 0x70	; 112
    3436:	90 e0       	ldi	r25, 0x00	; 0
    3438:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    343c:	58 2e       	mov	r5, r24
    343e:	49 2e       	mov	r4, r25
    3440:	8e e6       	ldi	r24, 0x6E	; 110
    3442:	90 e0       	ldi	r25, 0x00	; 0
    3444:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    3448:	78 2e       	mov	r7, r24
    344a:	69 2e       	mov	r6, r25
    344c:	8c e6       	ldi	r24, 0x6C	; 108
    344e:	90 e0       	ldi	r25, 0x00	; 0
    3450:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    3454:	2f 92       	push	r2
    3456:	3f 92       	push	r3
    3458:	4f 92       	push	r4
    345a:	5f 92       	push	r5
    345c:	6f 92       	push	r6
    345e:	7f 92       	push	r7
    3460:	9f 93       	push	r25
    3462:	8f 93       	push	r24
    3464:	ff 92       	push	r15
    3466:	ef 92       	push	r14
    3468:	df 93       	push	r29
    346a:	cf 93       	push	r28
    346c:	0e 94 df 06 	call	0xdbe	; 0xdbe <Print::printf(char const*, ...) [clone .constprop.22]>
    3470:	2d b7       	in	r18, 0x3d	; 61
    3472:	3e b7       	in	r19, 0x3e	; 62
    3474:	24 5f       	subi	r18, 0xF4	; 244
    3476:	3f 4f       	sbci	r19, 0xFF	; 255
    3478:	0f b6       	in	r0, 0x3f	; 63
    347a:	f8 94       	cli
    347c:	3e bf       	out	0x3e, r19	; 62
    347e:	0f be       	out	0x3f, r0	; 63
    3480:	2d bf       	out	0x3d, r18	; 61
    3482:	f2 c9       	rjmp	.-3100   	; 0x2868 <menu_color()+0x2c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1326
      } else if (color_F == WHITE) {
    3484:	83 e0       	ldi	r24, 0x03	; 3
    3486:	50 cd       	rjmp	.-1376   	; 0x2f28 <menu_color()+0x6ec>

00003488 <global constructors keyed to 65535_0_sport_main_code_2023.ino.cpp.o.2357>:
_GLOBAL__I_65535_0_sport_main_code_2023.ino.cpp.o.2357():
    3488:	ee e2       	ldi	r30, 0x2E	; 46
    348a:	f9 e0       	ldi	r31, 0x09	; 9
    348c:	13 82       	std	Z+3, r1	; 0x03
    348e:	12 82       	std	Z+2, r1	; 0x02
    3490:	88 ee       	ldi	r24, 0xE8	; 232
    3492:	93 e0       	ldi	r25, 0x03	; 3
    3494:	a0 e0       	ldi	r26, 0x00	; 0
    3496:	b0 e0       	ldi	r27, 0x00	; 0
    3498:	84 83       	std	Z+4, r24	; 0x04
    349a:	95 83       	std	Z+5, r25	; 0x05
    349c:	a6 83       	std	Z+6, r26	; 0x06
    349e:	b7 83       	std	Z+7, r27	; 0x07
    34a0:	2a e0       	ldi	r18, 0x0A	; 10
    34a2:	33 e0       	ldi	r19, 0x03	; 3
    34a4:	31 83       	std	Z+1, r19	; 0x01
    34a6:	20 83       	st	Z, r18
    34a8:	48 e9       	ldi	r20, 0x98	; 152
    34aa:	50 e0       	ldi	r21, 0x00	; 0
    34ac:	55 87       	std	Z+13, r21	; 0x0d
    34ae:	44 87       	std	Z+12, r20	; 0x0c
    34b0:	49 e9       	ldi	r20, 0x99	; 153
    34b2:	50 e0       	ldi	r21, 0x00	; 0
    34b4:	57 87       	std	Z+15, r21	; 0x0f
    34b6:	46 87       	std	Z+14, r20	; 0x0e
    34b8:	4b e9       	ldi	r20, 0x9B	; 155
    34ba:	50 e0       	ldi	r21, 0x00	; 0
    34bc:	51 8b       	std	Z+17, r21	; 0x11
    34be:	40 8b       	std	Z+16, r20	; 0x10
    34c0:	4a e9       	ldi	r20, 0x9A	; 154
    34c2:	50 e0       	ldi	r21, 0x00	; 0
    34c4:	53 8b       	std	Z+19, r21	; 0x13
    34c6:	42 8b       	std	Z+18, r20	; 0x12
    34c8:	4d e9       	ldi	r20, 0x9D	; 157
    34ca:	50 e0       	ldi	r21, 0x00	; 0
    34cc:	55 8b       	std	Z+21, r21	; 0x15
    34ce:	44 8b       	std	Z+20, r20	; 0x14
    34d0:	4c e9       	ldi	r20, 0x9C	; 156
    34d2:	50 e0       	ldi	r21, 0x00	; 0
    34d4:	57 8b       	std	Z+23, r21	; 0x17
    34d6:	46 8b       	std	Z+22, r20	; 0x16
    34d8:	11 8e       	std	Z+25, r1	; 0x19
    34da:	12 8e       	std	Z+26, r1	; 0x1a
    34dc:	13 8e       	std	Z+27, r1	; 0x1b
    34de:	14 8e       	std	Z+28, r1	; 0x1c
    34e0:	eb ec       	ldi	r30, 0xCB	; 203
    34e2:	f9 e0       	ldi	r31, 0x09	; 9
    34e4:	13 82       	std	Z+3, r1	; 0x03
    34e6:	12 82       	std	Z+2, r1	; 0x02
    34e8:	84 83       	std	Z+4, r24	; 0x04
    34ea:	95 83       	std	Z+5, r25	; 0x05
    34ec:	a6 83       	std	Z+6, r26	; 0x06
    34ee:	b7 83       	std	Z+7, r27	; 0x07
    34f0:	31 83       	std	Z+1, r19	; 0x01
    34f2:	20 83       	st	Z, r18
    34f4:	20 e9       	ldi	r18, 0x90	; 144
    34f6:	30 e0       	ldi	r19, 0x00	; 0
    34f8:	35 87       	std	Z+13, r19	; 0x0d
    34fa:	24 87       	std	Z+12, r18	; 0x0c
    34fc:	29 e2       	ldi	r18, 0x29	; 41
    34fe:	30 e0       	ldi	r19, 0x00	; 0
    3500:	37 87       	std	Z+15, r19	; 0x0f
    3502:	26 87       	std	Z+14, r18	; 0x0e
    3504:	2b e2       	ldi	r18, 0x2B	; 43
    3506:	30 e0       	ldi	r19, 0x00	; 0
    3508:	31 8b       	std	Z+17, r19	; 0x11
    350a:	20 8b       	std	Z+16, r18	; 0x10
    350c:	2a e2       	ldi	r18, 0x2A	; 42
    350e:	30 e0       	ldi	r19, 0x00	; 0
    3510:	33 8b       	std	Z+19, r19	; 0x13
    3512:	22 8b       	std	Z+18, r18	; 0x12
    3514:	25 e9       	ldi	r18, 0x95	; 149
    3516:	30 e0       	ldi	r19, 0x00	; 0
    3518:	35 8b       	std	Z+21, r19	; 0x15
    351a:	24 8b       	std	Z+20, r18	; 0x14
    351c:	2c e2       	ldi	r18, 0x2C	; 44
    351e:	30 e0       	ldi	r19, 0x00	; 0
    3520:	37 8b       	std	Z+23, r19	; 0x17
    3522:	26 8b       	std	Z+22, r18	; 0x16
    3524:	11 8e       	std	Z+25, r1	; 0x19
    3526:	12 8e       	std	Z+26, r1	; 0x1a
    3528:	13 8e       	std	Z+27, r1	; 0x1b
    352a:	14 8e       	std	Z+28, r1	; 0x1c
    352c:	e8 e6       	ldi	r30, 0x68	; 104
    352e:	fa e0       	ldi	r31, 0x0A	; 10
    3530:	13 82       	std	Z+3, r1	; 0x03
    3532:	12 82       	std	Z+2, r1	; 0x02
    3534:	84 83       	std	Z+4, r24	; 0x04
    3536:	95 83       	std	Z+5, r25	; 0x05
    3538:	a6 83       	std	Z+6, r26	; 0x06
    353a:	b7 83       	std	Z+7, r27	; 0x07
    353c:	8c e1       	ldi	r24, 0x1C	; 28
    353e:	93 e0       	ldi	r25, 0x03	; 3
    3540:	91 83       	std	Z+1, r25	; 0x01
    3542:	80 83       	st	Z, r24
    3544:	e4 e7       	ldi	r30, 0x74	; 116
    3546:	fa e0       	ldi	r31, 0x0A	; 10
    3548:	13 82       	std	Z+3, r1	; 0x03
    354a:	12 82       	std	Z+2, r1	; 0x02
    354c:	8e e2       	ldi	r24, 0x2E	; 46
    354e:	93 e0       	ldi	r25, 0x03	; 3
    3550:	91 83       	std	Z+1, r25	; 0x01
    3552:	80 83       	st	Z, r24
    3554:	8c e1       	ldi	r24, 0x1C	; 28
    3556:	84 83       	std	Z+4, r24	; 0x04
    3558:	8f ef       	ldi	r24, 0xFF	; 255
    355a:	85 83       	std	Z+5, r24	; 0x05
    355c:	8e e1       	ldi	r24, 0x1E	; 30
    355e:	86 83       	std	Z+6, r24	; 0x06
    3560:	8f e1       	ldi	r24, 0x1F	; 31
    3562:	87 83       	std	Z+7, r24	; 0x07
    3564:	80 e2       	ldi	r24, 0x20	; 32
    3566:	80 87       	std	Z+8, r24	; 0x08
    3568:	81 e2       	ldi	r24, 0x21	; 33
    356a:	81 87       	std	Z+9, r24	; 0x09
    356c:	82 e2       	ldi	r24, 0x22	; 34
    356e:	82 87       	std	Z+10, r24	; 0x0a
    3570:	13 86       	std	Z+11, r1	; 0x0b
    3572:	14 86       	std	Z+12, r1	; 0x0c
    3574:	15 86       	std	Z+13, r1	; 0x0d
    3576:	16 86       	std	Z+14, r1	; 0x0e
    3578:	17 86       	std	Z+15, r1	; 0x0f
    357a:	61 e0       	ldi	r22, 0x01	; 1
    357c:	80 e1       	ldi	r24, 0x10	; 16
    357e:	0c 94 4c 05 	jmp	0xa98	; 0xa98 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.32]>

00003582 <main>:
init():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    3582:	78 94       	sei
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:963
#endif

  // Set timer 0 prescale factor to 64
#if defined(__AVR_ATmega64__) || defined(__AVR_ATmega128__)
  // CPU specific: different values for the ATmega64/128
  TCCR0 |= _BV(WGM01) | _BV(WGM00) | _BV(CS02);
    3584:	83 b7       	in	r24, 0x33	; 51
    3586:	8c 64       	ori	r24, 0x4C	; 76
    3588:	83 bf       	out	0x33, r24	; 51
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:982
  #error Timer 0 prescale factor 64 not set correctly
#endif

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
    358a:	87 b7       	in	r24, 0x37	; 55
    358c:	81 60       	ori	r24, 0x01	; 1
    358e:	87 bf       	out	0x37, r24	; 55
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    3590:	c2 e0       	ldi	r28, 0x02	; 2
    3592:	ce bd       	out	0x2e, r28	; 46
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    3594:	8e b5       	in	r24, 0x2e	; 46
    3596:	81 60       	ori	r24, 0x01	; 1
    3598:	8e bd       	out	0x2e, r24	; 46
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    359a:	8f b5       	in	r24, 0x2f	; 47
    359c:	81 60       	ori	r24, 0x01	; 1
    359e:	8f bd       	out	0x2f, r24	; 47
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:1011
#endif

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
    35a0:	85 b5       	in	r24, 0x25	; 37
    35a2:	84 60       	ori	r24, 0x04	; 4
    35a4:	85 bd       	out	0x25, r24	; 37
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:1020
  TCCR2A |= _BV(CS22);
#endif

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
    35a6:	85 b5       	in	r24, 0x25	; 37
    35a8:	80 64       	ori	r24, 0x40	; 64
    35aa:	85 bd       	out	0x25, r24	; 37
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:1028
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
    35ac:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    35b0:	83 60       	ori	r24, 0x03	; 3
    35b2:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:1029
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
    35b6:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    35ba:	81 60       	ori	r24, 0x01	; 1
    35bc:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:1052
#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
  #elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADEN);
    35c0:	86 e8       	ldi	r24, 0x86	; 134
    35c2:	86 b9       	out	0x06, r24	; 6
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    35c4:	1a b8       	out	0x0a, r1	; 10
robot_setup():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1455
    }
  }
}

void robot_setup() {
  TCCR1A = 0;  // Clear the register
    35c6:	1f bc       	out	0x2f, r1	; 47
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1457
  // Set the Timer/Counter 1 Mode to "Normal" mode
  TCCR1A |= (0 << WGM10) | (0 << WGM11);
    35c8:	8f b5       	in	r24, 0x2f	; 47
    35ca:	8f bd       	out	0x2f, r24	; 47
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1458
  TCCR1B |= (0 << WGM12) | (0 << WGM13);
    35cc:	8e b5       	in	r24, 0x2e	; 46
    35ce:	8e bd       	out	0x2e, r24	; 46
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1460
  // Set the Timer/Counter 1 clock source to "External Crystal Oscillator"
  TCCR1B |= (1 << CS12) | (0 << CS11) | (0 << CS10);
    35d0:	8e b5       	in	r24, 0x2e	; 46
    35d2:	84 60       	ori	r24, 0x04	; 4
    35d4:	8e bd       	out	0x2e, r24	; 46
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1461
  pinMode(13, OUTPUT);
    35d6:	61 e0       	ldi	r22, 0x01	; 1
    35d8:	8d e0       	ldi	r24, 0x0D	; 13
    35da:	0e 94 89 01 	call	0x312	; 0x312 <pinMode>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1462
  pinMode(12, OUTPUT);
    35de:	61 e0       	ldi	r22, 0x01	; 1
    35e0:	8c e0       	ldi	r24, 0x0C	; 12
    35e2:	0e 94 89 01 	call	0x312	; 0x312 <pinMode>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1463
  pinMode(6, INPUT_PULLUP);
    35e6:	62 e0       	ldi	r22, 0x02	; 2
    35e8:	86 e0       	ldi	r24, 0x06	; 6
    35ea:	0e 94 89 01 	call	0x312	; 0x312 <pinMode>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1464
  pinMode(35, OUTPUT);
    35ee:	61 e0       	ldi	r22, 0x01	; 1
    35f0:	83 e2       	ldi	r24, 0x23	; 35
    35f2:	0e 94 89 01 	call	0x312	; 0x312 <pinMode>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1465
  pinMode(37, INPUT_PULLUP);  // sbl
    35f6:	62 e0       	ldi	r22, 0x02	; 2
    35f8:	85 e2       	ldi	r24, 0x25	; 37
    35fa:	0e 94 89 01 	call	0x312	; 0x312 <pinMode>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1466
  pinMode(38, INPUT_PULLUP);  // sbr
    35fe:	62 e0       	ldi	r22, 0x02	; 2
    3600:	86 e2       	ldi	r24, 0x26	; 38
    3602:	0e 94 89 01 	call	0x312	; 0x312 <pinMode>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1467
  pinMode(start_pin, INPUT_PULLUP);
    3606:	62 e0       	ldi	r22, 0x02	; 2
    3608:	86 e0       	ldi	r24, 0x06	; 6
    360a:	0e 94 89 01 	call	0x312	; 0x312 <pinMode>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1468
  pinMode(next_page_pin, INPUT_PULLUP);
    360e:	62 e0       	ldi	r22, 0x02	; 2
    3610:	88 e0       	ldi	r24, 0x08	; 8
    3612:	0e 94 89 01 	call	0x312	; 0x312 <pinMode>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1469
  pinMode(previuse_page_pin, INPUT_PULLUP);
    3616:	62 e0       	ldi	r22, 0x02	; 2
    3618:	89 e0       	ldi	r24, 0x09	; 9
    361a:	0e 94 89 01 	call	0x312	; 0x312 <pinMode>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1470
  pinMode(increase_pin, INPUT_PULLUP);
    361e:	62 e0       	ldi	r22, 0x02	; 2
    3620:	8a e0       	ldi	r24, 0x0A	; 10
    3622:	0e 94 89 01 	call	0x312	; 0x312 <pinMode>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1471
  pinMode(decrease_pin, INPUT_PULLUP);
    3626:	62 e0       	ldi	r22, 0x02	; 2
    3628:	8b e0       	ldi	r24, 0x0B	; 11
    362a:	0e 94 89 01 	call	0x312	; 0x312 <pinMode>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1472
  pinMode(MUX_A, OUTPUT);
    362e:	61 e0       	ldi	r22, 0x01	; 1
    3630:	8c e2       	ldi	r24, 0x2C	; 44
    3632:	0e 94 89 01 	call	0x312	; 0x312 <pinMode>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1473
  pinMode(MUX_B, OUTPUT);
    3636:	61 e0       	ldi	r22, 0x01	; 1
    3638:	8b e2       	ldi	r24, 0x2B	; 43
    363a:	0e 94 89 01 	call	0x312	; 0x312 <pinMode>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1474
  pinMode(MUX_C, OUTPUT);
    363e:	61 e0       	ldi	r22, 0x01	; 1
    3640:	8a e2       	ldi	r24, 0x2A	; 42
    3642:	0e 94 89 01 	call	0x312	; 0x312 <pinMode>
begin():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:63

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
    3646:	10 92 dd 08 	sts	0x08DD, r1	; 0x8008dd <TwoWire::rxBufferIndex>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:64
  rxBufferLength = 0;
    364a:	10 92 dc 08 	sts	0x08DC, r1	; 0x8008dc <TwoWire::rxBufferLength>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:66

  txBufferIndex = 0;
    364e:	10 92 99 08 	sts	0x0899, r1	; 0x800899 <TwoWire::txBufferIndex>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire/TwoWire.cpp:67
  txBufferLength = 0;
    3652:	10 92 bb 08 	sts	0x08BB, r1	; 0x8008bb <TwoWire::txBufferLength>
twi_init():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:79
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
    3656:	10 92 97 08 	sts	0x0897, r1	; 0x800897 <twi_state>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:80
  twi_sendStop = true; // default value
    365a:	81 e0       	ldi	r24, 0x01	; 1
    365c:	80 93 96 08 	sts	0x0896, r24	; 0x800896 <twi_sendStop>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:81
  twi_inRepStart = false;
    3660:	10 92 8f 08 	sts	0x088F, r1	; 0x80088f <twi_inRepStart>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:84

  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
    3664:	61 e0       	ldi	r22, 0x01	; 1
    3666:	83 e1       	ldi	r24, 0x13	; 19
    3668:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <digitalWrite>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:85
  digitalWrite(SCL, 1);
    366c:	61 e0       	ldi	r22, 0x01	; 1
    366e:	82 e1       	ldi	r24, 0x12	; 18
    3670:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <digitalWrite>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:88

  // initialize twi prescaler and bit rate
  TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    3674:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    3678:	8c 7f       	andi	r24, 0xFC	; 252
    367a:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:89
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
    367e:	8f e2       	ldi	r24, 0x2F	; 47
    3680:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:97
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    3684:	85 e4       	ldi	r24, 0x45	; 69
    3686:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
twi_attachSlaveTxEvent():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:402
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
  twi_onSlaveTransmit = function;
    368a:	8c ed       	ldi	r24, 0xDC	; 220
    368c:	92 e0       	ldi	r25, 0x02	; 2
    368e:	90 93 68 08 	sts	0x0868, r25	; 0x800868 <twi_onSlaveTransmit+0x1>
    3692:	80 93 67 08 	sts	0x0867, r24	; 0x800867 <twi_onSlaveTransmit>
twi_attachSlaveRxEvent():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\Wire\src\TwoWire\utility/twi.c:391
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
  twi_onSlaveReceive = function;
    3696:	8d ed       	ldi	r24, 0xDD	; 221
    3698:	92 e0       	ldi	r25, 0x02	; 2
    369a:	90 93 66 08 	sts	0x0866, r25	; 0x800866 <twi_onSlaveReceive+0x1>
    369e:	80 93 65 08 	sts	0x0865, r24	; 0x800865 <twi_onSlaveReceive>
begin():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:121

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    36a2:	e0 91 db 09 	lds	r30, 0x09DB	; 0x8009db <Serial+0x10>
    36a6:	f0 91 dc 09 	lds	r31, 0x09DC	; 0x8009dc <Serial+0x11>
    36aa:	c0 83       	st	Z, r28
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:135
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    36ac:	e0 91 d7 09 	lds	r30, 0x09D7	; 0x8009d7 <Serial+0xc>
    36b0:	f0 91 d8 09 	lds	r31, 0x09D8	; 0x8009d8 <Serial+0xd>
    36b4:	10 82       	st	Z, r1
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:136
  *_ubrrl = baud_setting;
    36b6:	e0 91 d9 09 	lds	r30, 0x09D9	; 0x8009d9 <Serial+0xe>
    36ba:	f0 91 da 09 	lds	r31, 0x09DA	; 0x8009da <Serial+0xf>
    36be:	1b e0       	ldi	r17, 0x0B	; 11
    36c0:	10 83       	st	Z, r17
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:138

  _written = false;
    36c2:	10 92 e3 09 	sts	0x09E3, r1	; 0x8009e3 <Serial+0x18>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:146
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    36c6:	e0 91 df 09 	lds	r30, 0x09DF	; 0x8009df <Serial+0x14>
    36ca:	f0 91 e0 09 	lds	r31, 0x09E0	; 0x8009e0 <Serial+0x15>
    36ce:	d6 e0       	ldi	r29, 0x06	; 6
    36d0:	d0 83       	st	Z, r29
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:148
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    36d2:	e0 91 dd 09 	lds	r30, 0x09DD	; 0x8009dd <Serial+0x12>
    36d6:	f0 91 de 09 	lds	r31, 0x09DE	; 0x8009de <Serial+0x13>
    36da:	80 81       	ld	r24, Z
    36dc:	88 69       	ori	r24, 0x98	; 152
    36de:	80 83       	st	Z, r24
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:149
  *_ucsrb &= ~_BV(UDRIE0);
    36e0:	e0 91 dd 09 	lds	r30, 0x09DD	; 0x8009dd <Serial+0x12>
    36e4:	f0 91 de 09 	lds	r31, 0x09DE	; 0x8009de <Serial+0x13>
    36e8:	80 81       	ld	r24, Z
    36ea:	8f 7d       	andi	r24, 0xDF	; 223
    36ec:	80 83       	st	Z, r24
dxl_init():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:253
    delay(10);
}

void dxl_init(long int baudRate)
{
    pinMode(M_TX_PIN, OUTPUT);
    36ee:	61 e0       	ldi	r22, 0x01	; 1
    36f0:	85 e1       	ldi	r24, 0x15	; 21
    36f2:	0e 94 89 01 	call	0x312	; 0x312 <pinMode>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_DXL2023.h:254
    pinMode(M_DIR_PIN, OUTPUT);
    36f6:	61 e0       	ldi	r22, 0x01	; 1
    36f8:	86 e1       	ldi	r24, 0x16	; 22
    36fa:	0e 94 89 01 	call	0x312	; 0x312 <pinMode>
begin():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:121

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    36fe:	e0 91 3e 09 	lds	r30, 0x093E	; 0x80093e <Serial1+0x10>
    3702:	f0 91 3f 09 	lds	r31, 0x093F	; 0x80093f <Serial1+0x11>
    3706:	c0 83       	st	Z, r28
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:135
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    3708:	e0 91 3a 09 	lds	r30, 0x093A	; 0x80093a <Serial1+0xc>
    370c:	f0 91 3b 09 	lds	r31, 0x093B	; 0x80093b <Serial1+0xd>
    3710:	10 82       	st	Z, r1
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:136
  *_ubrrl = baud_setting;
    3712:	e0 91 3c 09 	lds	r30, 0x093C	; 0x80093c <Serial1+0xe>
    3716:	f0 91 3d 09 	lds	r31, 0x093D	; 0x80093d <Serial1+0xf>
    371a:	10 83       	st	Z, r17
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:138

  _written = false;
    371c:	10 92 46 09 	sts	0x0946, r1	; 0x800946 <Serial1+0x18>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:146
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    3720:	e0 91 42 09 	lds	r30, 0x0942	; 0x800942 <Serial1+0x14>
    3724:	f0 91 43 09 	lds	r31, 0x0943	; 0x800943 <Serial1+0x15>
    3728:	d0 83       	st	Z, r29
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:148
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    372a:	e0 91 40 09 	lds	r30, 0x0940	; 0x800940 <Serial1+0x12>
    372e:	f0 91 41 09 	lds	r31, 0x0941	; 0x800941 <Serial1+0x13>
    3732:	80 81       	ld	r24, Z
    3734:	88 69       	ori	r24, 0x98	; 152
    3736:	80 83       	st	Z, r24
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:149
  *_ucsrb &= ~_BV(UDRIE0);
    3738:	e0 91 40 09 	lds	r30, 0x0940	; 0x800940 <Serial1+0x12>
    373c:	f0 91 41 09 	lds	r31, 0x0941	; 0x800941 <Serial1+0x13>
    3740:	80 81       	ld	r24, Z
    3742:	8f 7d       	andi	r24, 0xDF	; 223
    3744:	80 83       	st	Z, r24
robot_setup():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1479

  Wire.begin();
  Serial.begin(115200);
  dxl_init(115200);
  lcd.begin(20, 4);
    3746:	64 e0       	ldi	r22, 0x04	; 4
    3748:	84 e1       	ldi	r24, 0x14	; 20
    374a:	0e 94 4c 05 	call	0xa98	; 0xa98 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.32]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1480
  delay(800);
    374e:	60 e2       	ldi	r22, 0x20	; 32
    3750:	73 e0       	ldi	r23, 0x03	; 3
    3752:	80 e0       	ldi	r24, 0x00	; 0
    3754:	90 e0       	ldi	r25, 0x00	; 0
    3756:	0e 94 aa 02 	call	0x554	; 0x554 <delay>
setup():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_main_code_2023.ino:13
{

  robot_setup();

  //eeprom set in code
  T90=136;spd=255;range_value=20;
    375a:	88 e8       	ldi	r24, 0x88	; 136
    375c:	90 e0       	ldi	r25, 0x00	; 0
    375e:	90 93 88 08 	sts	0x0888, r25	; 0x800888 <T90+0x1>
    3762:	80 93 87 08 	sts	0x0887, r24	; 0x800887 <T90>
    3766:	8f ef       	ldi	r24, 0xFF	; 255
    3768:	90 e0       	ldi	r25, 0x00	; 0
    376a:	90 93 86 08 	sts	0x0886, r25	; 0x800886 <spd+0x1>
    376e:	80 93 85 08 	sts	0x0885, r24	; 0x800885 <spd>
    3772:	84 e1       	ldi	r24, 0x14	; 20
    3774:	90 e0       	ldi	r25, 0x00	; 0
    3776:	90 93 84 08 	sts	0x0884, r25	; 0x800884 <range_value+0x1>
    377a:	80 93 83 08 	sts	0x0883, r24	; 0x800883 <range_value>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_main_code_2023.ino:14
  EEPROM_write_int(T90_address, T90);
    377e:	68 e8       	ldi	r22, 0x88	; 136
    3780:	70 e0       	ldi	r23, 0x00	; 0
    3782:	88 e9       	ldi	r24, 0x98	; 152
    3784:	90 e0       	ldi	r25, 0x00	; 0
    3786:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_main_code_2023.ino:15
  EEPROM_write_int(spd_address, spd);
    378a:	60 91 85 08 	lds	r22, 0x0885	; 0x800885 <spd>
    378e:	70 91 86 08 	lds	r23, 0x0886	; 0x800886 <spd+0x1>
    3792:	86 e9       	ldi	r24, 0x96	; 150
    3794:	90 e0       	ldi	r25, 0x00	; 0
    3796:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_main_code_2023.ino:16
  EEPROM_write_int(range_address, range_value);
    379a:	60 91 83 08 	lds	r22, 0x0883	; 0x800883 <range_value>
    379e:	70 91 84 08 	lds	r23, 0x0884	; 0x800884 <range_value+0x1>
    37a2:	8a e9       	ldi	r24, 0x9A	; 154
    37a4:	90 e0       	ldi	r25, 0x00	; 0
    37a6:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_main_code_2023.ino:19
  
  //compass eeprom
  DN=96,DE=188,DS=277;
    37aa:	80 e6       	ldi	r24, 0x60	; 96
    37ac:	90 e0       	ldi	r25, 0x00	; 0
    37ae:	90 93 82 08 	sts	0x0882, r25	; 0x800882 <DN+0x1>
    37b2:	80 93 81 08 	sts	0x0881, r24	; 0x800881 <DN>
    37b6:	8c eb       	ldi	r24, 0xBC	; 188
    37b8:	90 e0       	ldi	r25, 0x00	; 0
    37ba:	90 93 80 08 	sts	0x0880, r25	; 0x800880 <DE+0x1>
    37be:	80 93 7f 08 	sts	0x087F, r24	; 0x80087f <DE>
    37c2:	85 e1       	ldi	r24, 0x15	; 21
    37c4:	91 e0       	ldi	r25, 0x01	; 1
    37c6:	90 93 7e 08 	sts	0x087E, r25	; 0x80087e <DS+0x1>
    37ca:	80 93 7d 08 	sts	0x087D, r24	; 0x80087d <DS>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_main_code_2023.ino:20
  EEPROM_write_int(DN_address, DN);
    37ce:	60 e6       	ldi	r22, 0x60	; 96
    37d0:	70 e0       	ldi	r23, 0x00	; 0
    37d2:	8c e9       	ldi	r24, 0x9C	; 156
    37d4:	90 e0       	ldi	r25, 0x00	; 0
    37d6:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_main_code_2023.ino:21
  EEPROM_write_int(DE_address, DE);
    37da:	60 91 7f 08 	lds	r22, 0x087F	; 0x80087f <DE>
    37de:	70 91 80 08 	lds	r23, 0x0880	; 0x800880 <DE+0x1>
    37e2:	8e e9       	ldi	r24, 0x9E	; 158
    37e4:	90 e0       	ldi	r25, 0x00	; 0
    37e6:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_main_code_2023.ino:22
  EEPROM_write_int(DS_address, DS);
    37ea:	60 91 7d 08 	lds	r22, 0x087D	; 0x80087d <DS>
    37ee:	70 91 7e 08 	lds	r23, 0x087E	; 0x80087e <DS+0x1>
    37f2:	80 ea       	ldi	r24, 0xA0	; 160
    37f4:	90 e0       	ldi	r25, 0x00	; 0
    37f6:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_main_code_2023.ino:25

  // servo positions
  basket_up=275,basket_normal=500,arm_normal=660,arm_down=190,arm_dropping=800,gripper_close=900,gripper_open=590;
    37fa:	84 ef       	ldi	r24, 0xF4	; 244
    37fc:	91 e0       	ldi	r25, 0x01	; 1
    37fe:	90 93 7c 08 	sts	0x087C, r25	; 0x80087c <basket_normal+0x1>
    3802:	80 93 7b 08 	sts	0x087B, r24	; 0x80087b <basket_normal>
    3806:	84 e9       	ldi	r24, 0x94	; 148
    3808:	92 e0       	ldi	r25, 0x02	; 2
    380a:	90 93 7a 08 	sts	0x087A, r25	; 0x80087a <arm_normal+0x1>
    380e:	80 93 79 08 	sts	0x0879, r24	; 0x800879 <arm_normal>
    3812:	8e eb       	ldi	r24, 0xBE	; 190
    3814:	90 e0       	ldi	r25, 0x00	; 0
    3816:	90 93 78 08 	sts	0x0878, r25	; 0x800878 <arm_down+0x1>
    381a:	80 93 77 08 	sts	0x0877, r24	; 0x800877 <arm_down>
    381e:	80 e2       	ldi	r24, 0x20	; 32
    3820:	93 e0       	ldi	r25, 0x03	; 3
    3822:	90 93 76 08 	sts	0x0876, r25	; 0x800876 <arm_dropping+0x1>
    3826:	80 93 75 08 	sts	0x0875, r24	; 0x800875 <arm_dropping>
    382a:	84 e8       	ldi	r24, 0x84	; 132
    382c:	93 e0       	ldi	r25, 0x03	; 3
    382e:	90 93 74 08 	sts	0x0874, r25	; 0x800874 <gripper_close+0x1>
    3832:	80 93 73 08 	sts	0x0873, r24	; 0x800873 <gripper_close>
    3836:	8e e4       	ldi	r24, 0x4E	; 78
    3838:	92 e0       	ldi	r25, 0x02	; 2
    383a:	90 93 72 08 	sts	0x0872, r25	; 0x800872 <gripper_open+0x1>
    383e:	80 93 71 08 	sts	0x0871, r24	; 0x800871 <gripper_open>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_main_code_2023.ino:26
  EEPROM_write_int(basket_up_address, basket_up);
    3842:	63 e1       	ldi	r22, 0x13	; 19
    3844:	71 e0       	ldi	r23, 0x01	; 1
    3846:	84 ea       	ldi	r24, 0xA4	; 164
    3848:	90 e0       	ldi	r25, 0x00	; 0
    384a:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_main_code_2023.ino:27
  EEPROM_write_int(basket_normal_address, basket_normal);
    384e:	60 91 7b 08 	lds	r22, 0x087B	; 0x80087b <basket_normal>
    3852:	70 91 7c 08 	lds	r23, 0x087C	; 0x80087c <basket_normal+0x1>
    3856:	86 ea       	ldi	r24, 0xA6	; 166
    3858:	90 e0       	ldi	r25, 0x00	; 0
    385a:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_main_code_2023.ino:28
  EEPROM_write_int(arm_normal_address, arm_normal);
    385e:	60 91 79 08 	lds	r22, 0x0879	; 0x800879 <arm_normal>
    3862:	70 91 7a 08 	lds	r23, 0x087A	; 0x80087a <arm_normal+0x1>
    3866:	88 ea       	ldi	r24, 0xA8	; 168
    3868:	90 e0       	ldi	r25, 0x00	; 0
    386a:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_main_code_2023.ino:29
  EEPROM_write_int(arm_down_address, arm_down);
    386e:	60 91 77 08 	lds	r22, 0x0877	; 0x800877 <arm_down>
    3872:	70 91 78 08 	lds	r23, 0x0878	; 0x800878 <arm_down+0x1>
    3876:	8a ea       	ldi	r24, 0xAA	; 170
    3878:	90 e0       	ldi	r25, 0x00	; 0
    387a:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_main_code_2023.ino:30
  EEPROM_write_int(arm_dropping_address, arm_dropping);
    387e:	60 91 75 08 	lds	r22, 0x0875	; 0x800875 <arm_dropping>
    3882:	70 91 76 08 	lds	r23, 0x0876	; 0x800876 <arm_dropping+0x1>
    3886:	8c ea       	ldi	r24, 0xAC	; 172
    3888:	90 e0       	ldi	r25, 0x00	; 0
    388a:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_main_code_2023.ino:31
  EEPROM_write_int(gripper_close_address, gripper_close);
    388e:	60 91 73 08 	lds	r22, 0x0873	; 0x800873 <gripper_close>
    3892:	70 91 74 08 	lds	r23, 0x0874	; 0x800874 <gripper_close+0x1>
    3896:	8e ea       	ldi	r24, 0xAE	; 174
    3898:	90 e0       	ldi	r25, 0x00	; 0
    389a:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_main_code_2023.ino:32
  EEPROM_write_int(gripper_open_address, gripper_open);
    389e:	60 91 71 08 	lds	r22, 0x0871	; 0x800871 <gripper_open>
    38a2:	70 91 72 08 	lds	r23, 0x0872	; 0x800872 <gripper_open+0x1>
    38a6:	80 eb       	ldi	r24, 0xB0	; 176
    38a8:	90 e0       	ldi	r25, 0x00	; 0
    38aa:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
menu():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1339
}

void menu(void) {
  static unsigned char page = 1, last_page = 6;
  int battery;
  lcd.clear();
    38ae:	0e 94 45 05 	call	0xa8a	; 0xa8a <LiquidCrystal::clear() [clone .constprop.34]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1340
  lcd.print("Error: check switch");
    38b2:	85 e3       	ldi	r24, 0x35	; 53
    38b4:	95 e0       	ldi	r25, 0x05	; 5
    38b6:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1342

  lcd.setCursor(0, 1);
    38ba:	61 e0       	ldi	r22, 0x01	; 1
    38bc:	80 e0       	ldi	r24, 0x00	; 0
    38be:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1343
  lcd.printf("SBL=%d   SBR=%d", SBL, SBR);
    38c2:	86 e2       	ldi	r24, 0x26	; 38
    38c4:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    38c8:	ec 01       	movw	r28, r24
    38ca:	85 e2       	ldi	r24, 0x25	; 37
    38cc:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    38d0:	df 93       	push	r29
    38d2:	cf 93       	push	r28
    38d4:	9f 93       	push	r25
    38d6:	8f 93       	push	r24
    38d8:	89 e4       	ldi	r24, 0x49	; 73
    38da:	95 e0       	ldi	r25, 0x05	; 5
    38dc:	9f 93       	push	r25
    38de:	8f 93       	push	r24
    38e0:	c4 e7       	ldi	r28, 0x74	; 116
    38e2:	da e0       	ldi	r29, 0x0A	; 10
    38e4:	df 93       	push	r29
    38e6:	cf 93       	push	r28
    38e8:	0e 94 df 06 	call	0xdbe	; 0xdbe <Print::printf(char const*, ...) [clone .constprop.22]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1345

  lcd.setCursor(0, 3);
    38ec:	63 e0       	ldi	r22, 0x03	; 3
    38ee:	80 e0       	ldi	r24, 0x00	; 0
    38f0:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1346
  lcd.printf("p_p=%d next_p=%d Ent=%d", previuse_page, next_page, start);
    38f4:	86 e0       	ldi	r24, 0x06	; 6
    38f6:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    38fa:	f8 2e       	mov	r15, r24
    38fc:	e9 2e       	mov	r14, r25
    38fe:	88 e0       	ldi	r24, 0x08	; 8
    3900:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    3904:	18 2f       	mov	r17, r24
    3906:	09 2f       	mov	r16, r25
    3908:	89 e0       	ldi	r24, 0x09	; 9
    390a:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    390e:	ef 92       	push	r14
    3910:	ff 92       	push	r15
    3912:	0f 93       	push	r16
    3914:	1f 93       	push	r17
    3916:	9f 93       	push	r25
    3918:	8f 93       	push	r24
    391a:	89 e5       	ldi	r24, 0x59	; 89
    391c:	95 e0       	ldi	r25, 0x05	; 5
    391e:	9f 93       	push	r25
    3920:	8f 93       	push	r24
    3922:	df 93       	push	r29
    3924:	cf 93       	push	r28
    3926:	0e 94 df 06 	call	0xdbe	; 0xdbe <Print::printf(char const*, ...) [clone .constprop.22]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1348

  if (start == 0 || next_page == 0 || previuse_page == 0 || SBL == 0 || SBR == 0)
    392a:	86 e0       	ldi	r24, 0x06	; 6
    392c:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    3930:	ed b7       	in	r30, 0x3d	; 61
    3932:	fe b7       	in	r31, 0x3e	; 62
    3934:	72 96       	adiw	r30, 0x12	; 18
    3936:	0f b6       	in	r0, 0x3f	; 63
    3938:	f8 94       	cli
    393a:	fe bf       	out	0x3e, r31	; 62
    393c:	0f be       	out	0x3f, r0	; 63
    393e:	ed bf       	out	0x3d, r30	; 61
    3940:	89 2b       	or	r24, r25
    3942:	09 f0       	breq	.+2      	; 0x3946 <main+0x3c4>
    3944:	0c c1       	rjmp	.+536    	; 0x3b5e <main+0x5dc>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1349
    beep(10);
    3946:	8a e0       	ldi	r24, 0x0A	; 10
    3948:	90 e0       	ldi	r25, 0x00	; 0
    394a:	0e 94 bb 06 	call	0xd76	; 0xd76 <beep(int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1350
  lcd.clear();
    394e:	0e 94 45 05 	call	0xa8a	; 0xa8a <LiquidCrystal::clear() [clone .constprop.34]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1358
      while (next_page == 0)
        ;
      delay(50);
      page++;
      if (page > last_page)
        page = 1;
    3952:	dd 24       	eor	r13, r13
    3954:	d3 94       	inc	r13
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1367
      while (previuse_page == 0)
        ;
      delay(50);
      page--;
      if (page < 1)
        page = last_page;
    3956:	76 e0       	ldi	r23, 0x06	; 6
    3958:	c7 2e       	mov	r12, r23
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1402
        lcd.print("Rescue Team");
        beep(1);
        break;
      }
      battery = analogRead(A7);
      battery = (battery * 5 / 102.3) * 3.1;
    395a:	e5 e0       	ldi	r30, 0x05	; 5
    395c:	be 2e       	mov	r11, r30
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1404
      lcd.setCursor(8, 0);
      lcd.printf("bat=%3d ", battery);
    395e:	cc ec       	ldi	r28, 0xCC	; 204
    3960:	d5 e0       	ldi	r29, 0x05	; 5
    3962:	04 e7       	ldi	r16, 0x74	; 116
    3964:	1a e0       	ldi	r17, 0x0A	; 10
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1352

  if (start == 0 || next_page == 0 || previuse_page == 0 || SBL == 0 || SBR == 0)
    beep(10);
  lcd.clear();
  while (1) {
    if (next_page == 0) {
    3966:	88 e0       	ldi	r24, 0x08	; 8
    3968:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    396c:	89 2b       	or	r24, r25
    396e:	a9 f4       	brne	.+42     	; 0x399a <main+0x418>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1353
      while (next_page == 0)
    3970:	88 e0       	ldi	r24, 0x08	; 8
    3972:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    3976:	89 2b       	or	r24, r25
    3978:	d9 f3       	breq	.-10     	; 0x3970 <main+0x3ee>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1355
        ;
      delay(50);
    397a:	62 e3       	ldi	r22, 0x32	; 50
    397c:	70 e0       	ldi	r23, 0x00	; 0
    397e:	80 e0       	ldi	r24, 0x00	; 0
    3980:	90 e0       	ldi	r25, 0x00	; 0
    3982:	0e 94 aa 02 	call	0x554	; 0x554 <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1356
      page++;
    3986:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <menu()::page>
    398a:	8f 5f       	subi	r24, 0xFF	; 255
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1357
      if (page > last_page)
    398c:	87 30       	cpi	r24, 0x07	; 7
    398e:	08 f0       	brcs	.+2      	; 0x3992 <main+0x410>
    3990:	ff c0       	rjmp	.+510    	; 0x3b90 <main+0x60e>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1356
  while (1) {
    if (next_page == 0) {
      while (next_page == 0)
        ;
      delay(50);
      page++;
    3992:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <menu()::page>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1359
      if (page > last_page)
        page = 1;
      lcd.clear();
    3996:	0e 94 45 05 	call	0xa8a	; 0xa8a <LiquidCrystal::clear() [clone .constprop.34]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1361
    }
    if (previuse_page == 0) {
    399a:	89 e0       	ldi	r24, 0x09	; 9
    399c:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    39a0:	89 2b       	or	r24, r25
    39a2:	a1 f4       	brne	.+40     	; 0x39cc <main+0x44a>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1362
      while (previuse_page == 0)
    39a4:	89 e0       	ldi	r24, 0x09	; 9
    39a6:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    39aa:	89 2b       	or	r24, r25
    39ac:	d9 f3       	breq	.-10     	; 0x39a4 <main+0x422>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1364
        ;
      delay(50);
    39ae:	62 e3       	ldi	r22, 0x32	; 50
    39b0:	70 e0       	ldi	r23, 0x00	; 0
    39b2:	80 e0       	ldi	r24, 0x00	; 0
    39b4:	90 e0       	ldi	r25, 0x00	; 0
    39b6:	0e 94 aa 02 	call	0x554	; 0x554 <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1365
      page--;
    39ba:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <menu()::page>
    39be:	81 50       	subi	r24, 0x01	; 1
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1366
      if (page < 1)
    39c0:	09 f4       	brne	.+2      	; 0x39c4 <main+0x442>
    39c2:	e9 c0       	rjmp	.+466    	; 0x3b96 <main+0x614>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1365
    }
    if (previuse_page == 0) {
      while (previuse_page == 0)
        ;
      delay(50);
      page--;
    39c4:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <menu()::page>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1368
      if (page < 1)
        page = last_page;
      lcd.clear();
    39c8:	0e 94 45 05 	call	0xa8a	; 0xa8a <LiquidCrystal::clear() [clone .constprop.34]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1370
    }
    if (page <= 4) {
    39cc:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <menu()::page>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1371
      lcd.setCursor(2, 0);
    39d0:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1370
      page--;
      if (page < 1)
        page = last_page;
      lcd.clear();
    }
    if (page <= 4) {
    39d2:	85 30       	cpi	r24, 0x05	; 5
    39d4:	08 f0       	brcs	.+2      	; 0x39d8 <main+0x456>
    39d6:	e2 c0       	rjmp	.+452    	; 0x3b9c <main+0x61a>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1371
      lcd.setCursor(2, 0);
    39d8:	82 e0       	ldi	r24, 0x02	; 2
    39da:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1372
      lcd.print("Start ");
    39de:	81 e7       	ldi	r24, 0x71	; 113
    39e0:	95 e0       	ldi	r25, 0x05	; 5
    39e2:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1373
      lcd.setCursor(2, 1);
    39e6:	61 e0       	ldi	r22, 0x01	; 1
    39e8:	82 e0       	ldi	r24, 0x02	; 2
    39ea:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1374
      lcd.print("Test Sensor   ");
    39ee:	88 e7       	ldi	r24, 0x78	; 120
    39f0:	95 e0       	ldi	r25, 0x05	; 5
    39f2:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1375
      lcd.setCursor(2, 2);
    39f6:	62 e0       	ldi	r22, 0x02	; 2
    39f8:	82 e0       	ldi	r24, 0x02	; 2
    39fa:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1376
      lcd.print("Setup         ");
    39fe:	87 e8       	ldi	r24, 0x87	; 135
    3a00:	95 e0       	ldi	r25, 0x05	; 5
    3a02:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1377
      lcd.setCursor(2, 3);
    3a06:	63 e0       	ldi	r22, 0x03	; 3
    3a08:	82 e0       	ldi	r24, 0x02	; 2
    3a0a:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1378
      lcd.print("Test Color    ");
    3a0e:	86 e9       	ldi	r24, 0x96	; 150
    3a10:	95 e0       	ldi	r25, 0x05	; 5
    3a12:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1379
      lcd.setCursor(0, page - 1);
    3a16:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <menu()::page>
    3a1a:	61 50       	subi	r22, 0x01	; 1
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1386
    } else if (page > 4) {
      lcd.setCursor(2, 0);
      lcd.print("Test Motor   ");
      lcd.setCursor(2, 1);
      lcd.print("color calib ");
      lcd.setCursor(0, page - 5);
    3a1c:	80 e0       	ldi	r24, 0x00	; 0
    3a1e:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1387
      lcd.print("> ");
    3a22:	8f ea       	ldi	r24, 0xAF	; 175
    3a24:	97 e0       	ldi	r25, 0x07	; 7
    3a26:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1390
    }

    if (page == 1)  // start
    3a2a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <menu()::page>
    3a2e:	81 30       	cpi	r24, 0x01	; 1
    3a30:	09 f0       	breq	.+2      	; 0x3a34 <main+0x4b2>
    3a32:	13 c1       	rjmp	.+550    	; 0x3c5a <main+0x6d8>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1392
    {
      if (start == 0) {
    3a34:	86 e0       	ldi	r24, 0x06	; 6
    3a36:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    3a3a:	89 2b       	or	r24, r25
    3a3c:	09 f0       	breq	.+2      	; 0x3a40 <main+0x4be>
    3a3e:	c1 c0       	rjmp	.+386    	; 0x3bc2 <main+0x640>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1393
        while (start == 0)
    3a40:	86 e0       	ldi	r24, 0x06	; 6
    3a42:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    3a46:	89 2b       	or	r24, r25
    3a48:	d9 f3       	breq	.-10     	; 0x3a40 <main+0x4be>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1395
          ;
        lcd.clear();
    3a4a:	0e 94 45 05 	call	0xa8a	; 0xa8a <LiquidCrystal::clear() [clone .constprop.34]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1397

        lcd.print("Rescue Team");
    3a4e:	80 ec       	ldi	r24, 0xC0	; 192
    3a50:	95 e0       	ldi	r25, 0x05	; 5
    3a52:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1398
        beep(1);
    3a56:	81 e0       	ldi	r24, 0x01	; 1
    3a58:	90 e0       	ldi	r25, 0x00	; 0
    3a5a:	0e 94 bb 06 	call	0xd76	; 0xd76 <beep(int)>
setup():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_main_code_2023.ino:39
  //ev zone setup
  barband[0]=0;barband[1]=0;barband[2]=0;barband[3]=0;
  
  menu();
  //move_arm(arm_normal,500);move_gripper(gripper_open,500);delay(1500);
  go(60,60);
    3a5e:	6c e3       	ldi	r22, 0x3C	; 60
    3a60:	70 e0       	ldi	r23, 0x00	; 0
    3a62:	8c e3       	ldi	r24, 0x3C	; 60
    3a64:	90 e0       	ldi	r25, 0x00	; 0
    3a66:	0e 94 56 06 	call	0xcac	; 0xcac <go(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_main_code_2023.ino:40
  while ((SM + SL1 + SL2 + SL3 + SL4 + SL5 + SL6 + SR1 + SR2 + SR3 + SR4 + SR5 + SR6) > 5);
    3a6a:	40 e0       	ldi	r20, 0x00	; 0
    3a6c:	60 e0       	ldi	r22, 0x00	; 0
    3a6e:	80 e0       	ldi	r24, 0x00	; 0
    3a70:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    3a74:	ec 01       	movw	r28, r24
    3a76:	40 e0       	ldi	r20, 0x00	; 0
    3a78:	60 e0       	ldi	r22, 0x00	; 0
    3a7a:	81 e0       	ldi	r24, 0x01	; 1
    3a7c:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    3a80:	c8 0f       	add	r28, r24
    3a82:	d9 1f       	adc	r29, r25
    3a84:	40 e0       	ldi	r20, 0x00	; 0
    3a86:	60 e0       	ldi	r22, 0x00	; 0
    3a88:	82 e0       	ldi	r24, 0x02	; 2
    3a8a:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    3a8e:	c8 0f       	add	r28, r24
    3a90:	d9 1f       	adc	r29, r25
    3a92:	40 e0       	ldi	r20, 0x00	; 0
    3a94:	60 e0       	ldi	r22, 0x00	; 0
    3a96:	83 e0       	ldi	r24, 0x03	; 3
    3a98:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    3a9c:	c8 0f       	add	r28, r24
    3a9e:	d9 1f       	adc	r29, r25
    3aa0:	40 e0       	ldi	r20, 0x00	; 0
    3aa2:	60 e0       	ldi	r22, 0x00	; 0
    3aa4:	84 e0       	ldi	r24, 0x04	; 4
    3aa6:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    3aaa:	c8 0f       	add	r28, r24
    3aac:	d9 1f       	adc	r29, r25
    3aae:	40 e0       	ldi	r20, 0x00	; 0
    3ab0:	60 e0       	ldi	r22, 0x00	; 0
    3ab2:	85 e0       	ldi	r24, 0x05	; 5
    3ab4:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    3ab8:	c8 0f       	add	r28, r24
    3aba:	d9 1f       	adc	r29, r25
    3abc:	40 e0       	ldi	r20, 0x00	; 0
    3abe:	60 e0       	ldi	r22, 0x00	; 0
    3ac0:	86 e0       	ldi	r24, 0x06	; 6
    3ac2:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    3ac6:	c8 0f       	add	r28, r24
    3ac8:	d9 1f       	adc	r29, r25
    3aca:	40 e0       	ldi	r20, 0x00	; 0
    3acc:	61 e0       	ldi	r22, 0x01	; 1
    3ace:	81 e0       	ldi	r24, 0x01	; 1
    3ad0:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    3ad4:	c8 0f       	add	r28, r24
    3ad6:	d9 1f       	adc	r29, r25
    3ad8:	40 e0       	ldi	r20, 0x00	; 0
    3ada:	61 e0       	ldi	r22, 0x01	; 1
    3adc:	82 e0       	ldi	r24, 0x02	; 2
    3ade:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    3ae2:	c8 0f       	add	r28, r24
    3ae4:	d9 1f       	adc	r29, r25
    3ae6:	40 e0       	ldi	r20, 0x00	; 0
    3ae8:	61 e0       	ldi	r22, 0x01	; 1
    3aea:	83 e0       	ldi	r24, 0x03	; 3
    3aec:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    3af0:	c8 0f       	add	r28, r24
    3af2:	d9 1f       	adc	r29, r25
    3af4:	40 e0       	ldi	r20, 0x00	; 0
    3af6:	61 e0       	ldi	r22, 0x01	; 1
    3af8:	84 e0       	ldi	r24, 0x04	; 4
    3afa:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    3afe:	c8 0f       	add	r28, r24
    3b00:	d9 1f       	adc	r29, r25
    3b02:	40 e0       	ldi	r20, 0x00	; 0
    3b04:	61 e0       	ldi	r22, 0x01	; 1
    3b06:	85 e0       	ldi	r24, 0x05	; 5
    3b08:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    3b0c:	c8 0f       	add	r28, r24
    3b0e:	d9 1f       	adc	r29, r25
    3b10:	40 e0       	ldi	r20, 0x00	; 0
    3b12:	61 e0       	ldi	r22, 0x01	; 1
    3b14:	86 e0       	ldi	r24, 0x06	; 6
    3b16:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    3b1a:	8c 0f       	add	r24, r28
    3b1c:	9d 1f       	adc	r25, r29
    3b1e:	06 97       	sbiw	r24, 0x06	; 6
    3b20:	0c f0       	brlt	.+2      	; 0x3b24 <main+0x5a2>
    3b22:	a3 cf       	rjmp	.-186    	; 0x3a6a <main+0x4e8>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_main_code_2023.ino:41
  move(forward,T90/2);
    3b24:	c0 91 87 08 	lds	r28, 0x0887	; 0x800887 <T90>
    3b28:	d0 91 88 08 	lds	r29, 0x0888	; 0x800888 <T90+0x1>
    3b2c:	d7 fd       	sbrc	r29, 7
    3b2e:	21 96       	adiw	r28, 0x01	; 1
    3b30:	d5 95       	asr	r29
    3b32:	c7 95       	ror	r28
move():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1912
    get_back(); 
}
void move(int direction, int lenth, int speed=180) {
  switch (direction) {
    case forward:
      cnt = 0;
    3b34:	1d bc       	out	0x2d, r1	; 45
    3b36:	1c bc       	out	0x2c, r1	; 44
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1913
      while (cnt / 100 < lenth) {
    3b38:	04 e6       	ldi	r16, 0x64	; 100
    3b3a:	10 e0       	ldi	r17, 0x00	; 0
    3b3c:	8c b5       	in	r24, 0x2c	; 44
    3b3e:	9d b5       	in	r25, 0x2d	; 45
    3b40:	b8 01       	movw	r22, r16
    3b42:	0e 94 7b 2d 	call	0x5af6	; 0x5af6 <__udivmodhi4>
    3b46:	6c 17       	cp	r22, r28
    3b48:	7d 07       	cpc	r23, r29
    3b4a:	10 f0       	brcs	.+4      	; 0x3b50 <main+0x5ce>
    3b4c:	0c 94 5f 28 	jmp	0x50be	; 0x50be <main+0x1b3c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1914
        go(speed, speed);
    3b50:	64 eb       	ldi	r22, 0xB4	; 180
    3b52:	70 e0       	ldi	r23, 0x00	; 0
    3b54:	84 eb       	ldi	r24, 0xB4	; 180
    3b56:	90 e0       	ldi	r25, 0x00	; 0
    3b58:	0e 94 56 06 	call	0xcac	; 0xcac <go(int, int)>
    3b5c:	ef cf       	rjmp	.-34     	; 0x3b3c <main+0x5ba>
menu():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1348
  lcd.printf("SBL=%d   SBR=%d", SBL, SBR);

  lcd.setCursor(0, 3);
  lcd.printf("p_p=%d next_p=%d Ent=%d", previuse_page, next_page, start);

  if (start == 0 || next_page == 0 || previuse_page == 0 || SBL == 0 || SBR == 0)
    3b5e:	88 e0       	ldi	r24, 0x08	; 8
    3b60:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    3b64:	89 2b       	or	r24, r25
    3b66:	09 f4       	brne	.+2      	; 0x3b6a <main+0x5e8>
    3b68:	ee ce       	rjmp	.-548    	; 0x3946 <main+0x3c4>
    3b6a:	89 e0       	ldi	r24, 0x09	; 9
    3b6c:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    3b70:	89 2b       	or	r24, r25
    3b72:	09 f4       	brne	.+2      	; 0x3b76 <main+0x5f4>
    3b74:	e8 ce       	rjmp	.-560    	; 0x3946 <main+0x3c4>
    3b76:	85 e2       	ldi	r24, 0x25	; 37
    3b78:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    3b7c:	89 2b       	or	r24, r25
    3b7e:	09 f4       	brne	.+2      	; 0x3b82 <main+0x600>
    3b80:	e2 ce       	rjmp	.-572    	; 0x3946 <main+0x3c4>
    3b82:	86 e2       	ldi	r24, 0x26	; 38
    3b84:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    3b88:	89 2b       	or	r24, r25
    3b8a:	09 f4       	brne	.+2      	; 0x3b8e <main+0x60c>
    3b8c:	dc ce       	rjmp	.-584    	; 0x3946 <main+0x3c4>
    3b8e:	df ce       	rjmp	.-578    	; 0x394e <main+0x3cc>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1358
      while (next_page == 0)
        ;
      delay(50);
      page++;
      if (page > last_page)
        page = 1;
    3b90:	d0 92 05 01 	sts	0x0105, r13	; 0x800105 <menu()::page>
    3b94:	00 cf       	rjmp	.-512    	; 0x3996 <main+0x414>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1367
      while (previuse_page == 0)
        ;
      delay(50);
      page--;
      if (page < 1)
        page = last_page;
    3b96:	c0 92 05 01 	sts	0x0105, r12	; 0x800105 <menu()::page>
    3b9a:	16 cf       	rjmp	.-468    	; 0x39c8 <main+0x446>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1382
      lcd.setCursor(2, 3);
      lcd.print("Test Color    ");
      lcd.setCursor(0, page - 1);
      lcd.print("> ");
    } else if (page > 4) {
      lcd.setCursor(2, 0);
    3b9c:	82 e0       	ldi	r24, 0x02	; 2
    3b9e:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1383
      lcd.print("Test Motor   ");
    3ba2:	85 ea       	ldi	r24, 0xA5	; 165
    3ba4:	95 e0       	ldi	r25, 0x05	; 5
    3ba6:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1384
      lcd.setCursor(2, 1);
    3baa:	61 e0       	ldi	r22, 0x01	; 1
    3bac:	82 e0       	ldi	r24, 0x02	; 2
    3bae:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1385
      lcd.print("color calib ");
    3bb2:	83 eb       	ldi	r24, 0xB3	; 179
    3bb4:	95 e0       	ldi	r25, 0x05	; 5
    3bb6:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1386
      lcd.setCursor(0, page - 5);
    3bba:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <menu()::page>
    3bbe:	65 50       	subi	r22, 0x05	; 5
    3bc0:	2d cf       	rjmp	.-422    	; 0x3a1c <main+0x49a>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1401

        lcd.print("Rescue Team");
        beep(1);
        break;
      }
      battery = analogRead(A7);
    3bc2:	84 e3       	ldi	r24, 0x34	; 52
    3bc4:	0e 94 39 02 	call	0x472	; 0x472 <analogRead>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1402
      battery = (battery * 5 / 102.3) * 3.1;
    3bc8:	b8 9e       	mul	r11, r24
    3bca:	b0 01       	movw	r22, r0
    3bcc:	b9 9e       	mul	r11, r25
    3bce:	70 0d       	add	r23, r0
    3bd0:	11 24       	eor	r1, r1
    3bd2:	07 2e       	mov	r0, r23
    3bd4:	00 0c       	add	r0, r0
    3bd6:	88 0b       	sbc	r24, r24
    3bd8:	99 0b       	sbc	r25, r25
    3bda:	0e 94 5e 2c 	call	0x58bc	; 0x58bc <__floatsisf>
    3bde:	2a e9       	ldi	r18, 0x9A	; 154
    3be0:	39 e9       	ldi	r19, 0x99	; 153
    3be2:	4c ec       	ldi	r20, 0xCC	; 204
    3be4:	52 e4       	ldi	r21, 0x42	; 66
    3be6:	0e 94 b4 2b 	call	0x5768	; 0x5768 <__divsf3>
    3bea:	26 e6       	ldi	r18, 0x66	; 102
    3bec:	36 e6       	ldi	r19, 0x66	; 102
    3bee:	46 e4       	ldi	r20, 0x46	; 70
    3bf0:	50 e4       	ldi	r21, 0x40	; 64
    3bf2:	0e 94 0e 2d 	call	0x5a1c	; 0x5a1c <__mulsf3>
    3bf6:	0e 94 26 2c 	call	0x584c	; 0x584c <__fixsfsi>
    3bfa:	a6 2e       	mov	r10, r22
    3bfc:	97 2e       	mov	r9, r23
    3bfe:	e6 2e       	mov	r14, r22
    3c00:	f7 2e       	mov	r15, r23
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1403
      lcd.setCursor(8, 0);
    3c02:	60 e0       	ldi	r22, 0x00	; 0
    3c04:	88 e0       	ldi	r24, 0x08	; 8
    3c06:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1404
      lcd.printf("bat=%3d ", battery);
    3c0a:	9f 92       	push	r9
    3c0c:	af 92       	push	r10
    3c0e:	df 93       	push	r29
    3c10:	cf 93       	push	r28
    3c12:	1f 93       	push	r17
    3c14:	0f 93       	push	r16
    3c16:	0e 94 df 06 	call	0xdbe	; 0xdbe <Print::printf(char const*, ...) [clone .constprop.22]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1406

      if (battery < 105) {
    3c1a:	0f 90       	pop	r0
    3c1c:	0f 90       	pop	r0
    3c1e:	0f 90       	pop	r0
    3c20:	0f 90       	pop	r0
    3c22:	0f 90       	pop	r0
    3c24:	0f 90       	pop	r0
    3c26:	39 e6       	ldi	r19, 0x69	; 105
    3c28:	e3 16       	cp	r14, r19
    3c2a:	f1 04       	cpc	r15, r1
    3c2c:	0c f0       	brlt	.+2      	; 0x3c30 <main+0x6ae>
    3c2e:	9b ce       	rjmp	.-714    	; 0x3966 <main+0x3e4>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1407
        LED_on;
    3c30:	61 e0       	ldi	r22, 0x01	; 1
    3c32:	8d e0       	ldi	r24, 0x0D	; 13
    3c34:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <digitalWrite>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1408
        delay(50);
    3c38:	62 e3       	ldi	r22, 0x32	; 50
    3c3a:	70 e0       	ldi	r23, 0x00	; 0
    3c3c:	80 e0       	ldi	r24, 0x00	; 0
    3c3e:	90 e0       	ldi	r25, 0x00	; 0
    3c40:	0e 94 aa 02 	call	0x554	; 0x554 <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1409
        LED_off;
    3c44:	60 e0       	ldi	r22, 0x00	; 0
    3c46:	8d e0       	ldi	r24, 0x0D	; 13
    3c48:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <digitalWrite>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1410
        delay(50);
    3c4c:	62 e3       	ldi	r22, 0x32	; 50
    3c4e:	70 e0       	ldi	r23, 0x00	; 0
    3c50:	80 e0       	ldi	r24, 0x00	; 0
    3c52:	90 e0       	ldi	r25, 0x00	; 0
    3c54:	0e 94 aa 02 	call	0x554	; 0x554 <delay>
    3c58:	86 ce       	rjmp	.-756    	; 0x3966 <main+0x3e4>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1412
      }
    } else if (page == 2)  // Test Sensor
    3c5a:	82 30       	cpi	r24, 0x02	; 2
    3c5c:	09 f0       	breq	.+2      	; 0x3c60 <main+0x6de>
    3c5e:	61 c4       	rjmp	.+2242   	; 0x4522 <main+0xfa0>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1414
    {
      if (start == 0) {
    3c60:	86 e0       	ldi	r24, 0x06	; 6
    3c62:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    3c66:	89 2b       	or	r24, r25
    3c68:	09 f0       	breq	.+2      	; 0x3c6c <main+0x6ea>
    3c6a:	7d ce       	rjmp	.-774    	; 0x3966 <main+0x3e4>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1415
        while (start == 0)
    3c6c:	86 e0       	ldi	r24, 0x06	; 6
    3c6e:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    3c72:	89 2b       	or	r24, r25
    3c74:	d9 f3       	breq	.-10     	; 0x3c6c <main+0x6ea>
menu_sensor():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:804
long microsecondsToMillimeters(long microseconds) {
  return microseconds * 10 / 29 / 2;
}
void menu_sensor(void) {
  static char page = 1, last_page = 6;
  lcd.clear();
    3c76:	0e 94 45 05 	call	0xa8a	; 0xa8a <LiquidCrystal::clear() [clone .constprop.34]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:934
      delay(200);
      lcd.clear();
    }else if (page == 6)  // compass
    {
      lcd.setCursor(0, 0);
      lcd.printf("deg: %d pi: %d ro: %d",deg,pitch,role);
    3c7a:	c4 e7       	ldi	r28, 0x74	; 116
    3c7c:	da e0       	ldi	r29, 0x0A	; 10
pulseIn():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.c:50

  unsigned long width = countPulseASM(portInputRegister(port), bit, stateMask, maxloops);

  // prevent clockCyclesToMicroseconds to return bogus values if countPulseASM timed out
  if (width)
    return clockCyclesToMicroseconds(width * 16 + 16);
    3c7e:	6b e0       	ldi	r22, 0x0B	; 11
    3c80:	c6 2e       	mov	r12, r22
    3c82:	d1 2c       	mov	r13, r1
    3c84:	e1 2c       	mov	r14, r1
    3c86:	f1 2c       	mov	r15, r1
menu_sensor():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:806
}
void menu_sensor(void) {
  static char page = 1, last_page = 6;
  lcd.clear();
  while (1) {
    if (next_page == 0) {
    3c88:	88 e0       	ldi	r24, 0x08	; 8
    3c8a:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    3c8e:	89 2b       	or	r24, r25
    3c90:	a9 f4       	brne	.+42     	; 0x3cbc <main+0x73a>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:807
      while (next_page == 0)
    3c92:	88 e0       	ldi	r24, 0x08	; 8
    3c94:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    3c98:	89 2b       	or	r24, r25
    3c9a:	d9 f3       	breq	.-10     	; 0x3c92 <main+0x710>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:809
        ;
      delay(50);
    3c9c:	62 e3       	ldi	r22, 0x32	; 50
    3c9e:	70 e0       	ldi	r23, 0x00	; 0
    3ca0:	80 e0       	ldi	r24, 0x00	; 0
    3ca2:	90 e0       	ldi	r25, 0x00	; 0
    3ca4:	0e 94 aa 02 	call	0x554	; 0x554 <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:810
      page++;
    3ca8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <menu_sensor()::page>
    3cac:	8f 5f       	subi	r24, 0xFF	; 255
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:811
      if (page > last_page)
    3cae:	87 30       	cpi	r24, 0x07	; 7
    3cb0:	0c f0       	brlt	.+2      	; 0x3cb4 <main+0x732>
    3cb2:	5b c1       	rjmp	.+694    	; 0x3f6a <main+0x9e8>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:812
        page = 1;
    3cb4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <menu_sensor()::page>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:813
      lcd.clear();
    3cb8:	0e 94 45 05 	call	0xa8a	; 0xa8a <LiquidCrystal::clear() [clone .constprop.34]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:815
    }
    if (previuse_page == 0) {
    3cbc:	89 e0       	ldi	r24, 0x09	; 9
    3cbe:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    3cc2:	89 2b       	or	r24, r25
    3cc4:	a9 f4       	brne	.+42     	; 0x3cf0 <main+0x76e>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:816
      while (previuse_page == 0)
    3cc6:	89 e0       	ldi	r24, 0x09	; 9
    3cc8:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    3ccc:	89 2b       	or	r24, r25
    3cce:	d9 f3       	breq	.-10     	; 0x3cc6 <main+0x744>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:818
        ;
      delay(50);
    3cd0:	62 e3       	ldi	r22, 0x32	; 50
    3cd2:	70 e0       	ldi	r23, 0x00	; 0
    3cd4:	80 e0       	ldi	r24, 0x00	; 0
    3cd6:	90 e0       	ldi	r25, 0x00	; 0
    3cd8:	0e 94 aa 02 	call	0x554	; 0x554 <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:819
      page--;
    3cdc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <menu_sensor()::page>
    3ce0:	81 50       	subi	r24, 0x01	; 1
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:820
      if (page < 1)
    3ce2:	18 16       	cp	r1, r24
    3ce4:	0c f0       	brlt	.+2      	; 0x3ce8 <main+0x766>
    3ce6:	43 c1       	rjmp	.+646    	; 0x3f6e <main+0x9ec>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:821
        page = last_page;
    3ce8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <menu_sensor()::page>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:822
      lcd.clear();
    3cec:	0e 94 45 05 	call	0xa8a	; 0xa8a <LiquidCrystal::clear() [clone .constprop.34]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:824
    }
    if (increase == 0)
    3cf0:	8a e0       	ldi	r24, 0x0A	; 10
    3cf2:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    3cf6:	89 2b       	or	r24, r25
    3cf8:	09 f0       	breq	.+2      	; 0x3cfc <main+0x77a>
    3cfa:	3b c1       	rjmp	.+630    	; 0x3f72 <main+0x9f0>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:825
      go(40, 40);
    3cfc:	68 e2       	ldi	r22, 0x28	; 40
    3cfe:	70 e0       	ldi	r23, 0x00	; 0
    3d00:	88 e2       	ldi	r24, 0x28	; 40
    3d02:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:829
    else if (decrease == 0)
      go(-40, -40);
    else
      go(0, 0);
    3d04:	0e 94 56 06 	call	0xcac	; 0xcac <go(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:833

    ///////////////

    if (page == 1) {
    3d08:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <menu_sensor()::page>
    3d0c:	81 30       	cpi	r24, 0x01	; 1
    3d0e:	09 f0       	breq	.+2      	; 0x3d12 <main+0x790>
    3d10:	93 c1       	rjmp	.+806    	; 0x4038 <main+0xab6>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:834
      lcd.setCursor(0, 0);
    3d12:	60 e0       	ldi	r22, 0x00	; 0
    3d14:	80 e0       	ldi	r24, 0x00	; 0
    3d16:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:835
      lcd.printf("%d       %d      %d", SL10, SM, SR10);
    3d1a:	40 e0       	ldi	r20, 0x00	; 0
    3d1c:	63 e0       	ldi	r22, 0x03	; 3
    3d1e:	82 e0       	ldi	r24, 0x02	; 2
    3d20:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    3d24:	b8 2e       	mov	r11, r24
    3d26:	a9 2e       	mov	r10, r25
    3d28:	40 e0       	ldi	r20, 0x00	; 0
    3d2a:	60 e0       	ldi	r22, 0x00	; 0
    3d2c:	80 e0       	ldi	r24, 0x00	; 0
    3d2e:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    3d32:	18 2f       	mov	r17, r24
    3d34:	09 2f       	mov	r16, r25
    3d36:	40 e0       	ldi	r20, 0x00	; 0
    3d38:	62 e0       	ldi	r22, 0x02	; 2
    3d3a:	82 e0       	ldi	r24, 0x02	; 2
    3d3c:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    3d40:	af 92       	push	r10
    3d42:	bf 92       	push	r11
    3d44:	0f 93       	push	r16
    3d46:	1f 93       	push	r17
    3d48:	9f 93       	push	r25
    3d4a:	8f 93       	push	r24
    3d4c:	85 ed       	ldi	r24, 0xD5	; 213
    3d4e:	95 e0       	ldi	r25, 0x05	; 5
    3d50:	9f 93       	push	r25
    3d52:	8f 93       	push	r24
    3d54:	df 93       	push	r29
    3d56:	cf 93       	push	r28
    3d58:	0e 94 df 06 	call	0xdbe	; 0xdbe <Print::printf(char const*, ...) [clone .constprop.22]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:837

      lcd.setCursor(0, 1);
    3d5c:	61 e0       	ldi	r22, 0x01	; 1
    3d5e:	80 e0       	ldi	r24, 0x00	; 0
    3d60:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:838
      lcd.printf("   %d%d%d    %d%d%d   ", SL3, SL2, SL1, SR1, SR2, SR3);
    3d64:	40 e0       	ldi	r20, 0x00	; 0
    3d66:	61 e0       	ldi	r22, 0x01	; 1
    3d68:	83 e0       	ldi	r24, 0x03	; 3
    3d6a:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    3d6e:	58 2e       	mov	r5, r24
    3d70:	49 2e       	mov	r4, r25
    3d72:	40 e0       	ldi	r20, 0x00	; 0
    3d74:	61 e0       	ldi	r22, 0x01	; 1
    3d76:	82 e0       	ldi	r24, 0x02	; 2
    3d78:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    3d7c:	78 2e       	mov	r7, r24
    3d7e:	69 2e       	mov	r6, r25
    3d80:	40 e0       	ldi	r20, 0x00	; 0
    3d82:	61 e0       	ldi	r22, 0x01	; 1
    3d84:	81 e0       	ldi	r24, 0x01	; 1
    3d86:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    3d8a:	98 2e       	mov	r9, r24
    3d8c:	89 2e       	mov	r8, r25
    3d8e:	40 e0       	ldi	r20, 0x00	; 0
    3d90:	60 e0       	ldi	r22, 0x00	; 0
    3d92:	81 e0       	ldi	r24, 0x01	; 1
    3d94:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    3d98:	b8 2e       	mov	r11, r24
    3d9a:	a9 2e       	mov	r10, r25
    3d9c:	40 e0       	ldi	r20, 0x00	; 0
    3d9e:	60 e0       	ldi	r22, 0x00	; 0
    3da0:	82 e0       	ldi	r24, 0x02	; 2
    3da2:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    3da6:	18 2f       	mov	r17, r24
    3da8:	09 2f       	mov	r16, r25
    3daa:	40 e0       	ldi	r20, 0x00	; 0
    3dac:	60 e0       	ldi	r22, 0x00	; 0
    3dae:	83 e0       	ldi	r24, 0x03	; 3
    3db0:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    3db4:	4f 92       	push	r4
    3db6:	5f 92       	push	r5
    3db8:	6f 92       	push	r6
    3dba:	7f 92       	push	r7
    3dbc:	8f 92       	push	r8
    3dbe:	9f 92       	push	r9
    3dc0:	af 92       	push	r10
    3dc2:	bf 92       	push	r11
    3dc4:	0f 93       	push	r16
    3dc6:	1f 93       	push	r17
    3dc8:	9f 93       	push	r25
    3dca:	8f 93       	push	r24
    3dcc:	89 ee       	ldi	r24, 0xE9	; 233
    3dce:	95 e0       	ldi	r25, 0x05	; 5
    3dd0:	9f 93       	push	r25
    3dd2:	8f 93       	push	r24
    3dd4:	df 93       	push	r29
    3dd6:	cf 93       	push	r28
    3dd8:	0e 94 df 06 	call	0xdbe	; 0xdbe <Print::printf(char const*, ...) [clone .constprop.22]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:840

      lcd.setCursor(0, 2);
    3ddc:	62 e0       	ldi	r22, 0x02	; 2
    3dde:	80 e0       	ldi	r24, 0x00	; 0
    3de0:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:841
      lcd.printf("%d%d%d  ENC=%3d %d%d%d", SL6, SL5, SL4, cnt / 100, SR4, SR5, SR6);
    3de4:	40 e0       	ldi	r20, 0x00	; 0
    3de6:	61 e0       	ldi	r22, 0x01	; 1
    3de8:	86 e0       	ldi	r24, 0x06	; 6
    3dea:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    3dee:	38 2e       	mov	r3, r24
    3df0:	29 2e       	mov	r2, r25
    3df2:	40 e0       	ldi	r20, 0x00	; 0
    3df4:	61 e0       	ldi	r22, 0x01	; 1
    3df6:	85 e0       	ldi	r24, 0x05	; 5
    3df8:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    3dfc:	58 2e       	mov	r5, r24
    3dfe:	49 2e       	mov	r4, r25
    3e00:	40 e0       	ldi	r20, 0x00	; 0
    3e02:	61 e0       	ldi	r22, 0x01	; 1
    3e04:	84 e0       	ldi	r24, 0x04	; 4
    3e06:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    3e0a:	78 2e       	mov	r7, r24
    3e0c:	69 2e       	mov	r6, r25
    3e0e:	ac b4       	in	r10, 0x2c	; 44
    3e10:	bd b4       	in	r11, 0x2d	; 45
    3e12:	40 e0       	ldi	r20, 0x00	; 0
    3e14:	60 e0       	ldi	r22, 0x00	; 0
    3e16:	84 e0       	ldi	r24, 0x04	; 4
    3e18:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    3e1c:	98 2e       	mov	r9, r24
    3e1e:	89 2e       	mov	r8, r25
    3e20:	40 e0       	ldi	r20, 0x00	; 0
    3e22:	60 e0       	ldi	r22, 0x00	; 0
    3e24:	85 e0       	ldi	r24, 0x05	; 5
    3e26:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    3e2a:	18 2f       	mov	r17, r24
    3e2c:	09 2f       	mov	r16, r25
    3e2e:	40 e0       	ldi	r20, 0x00	; 0
    3e30:	60 e0       	ldi	r22, 0x00	; 0
    3e32:	86 e0       	ldi	r24, 0x06	; 6
    3e34:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    3e38:	9c 01       	movw	r18, r24
    3e3a:	2f 92       	push	r2
    3e3c:	3f 92       	push	r3
    3e3e:	4f 92       	push	r4
    3e40:	5f 92       	push	r5
    3e42:	6f 92       	push	r6
    3e44:	7f 92       	push	r7
    3e46:	c5 01       	movw	r24, r10
    3e48:	64 e6       	ldi	r22, 0x64	; 100
    3e4a:	70 e0       	ldi	r23, 0x00	; 0
    3e4c:	0e 94 7b 2d 	call	0x5af6	; 0x5af6 <__udivmodhi4>
    3e50:	7f 93       	push	r23
    3e52:	6f 93       	push	r22
    3e54:	8f 92       	push	r8
    3e56:	9f 92       	push	r9
    3e58:	0f 93       	push	r16
    3e5a:	1f 93       	push	r17
    3e5c:	3f 93       	push	r19
    3e5e:	2f 93       	push	r18
    3e60:	80 e0       	ldi	r24, 0x00	; 0
    3e62:	96 e0       	ldi	r25, 0x06	; 6
    3e64:	9f 93       	push	r25
    3e66:	8f 93       	push	r24
    3e68:	df 93       	push	r29
    3e6a:	cf 93       	push	r28
    3e6c:	0e 94 df 06 	call	0xdbe	; 0xdbe <Print::printf(char const*, ...) [clone .constprop.22]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:843

      lcd.setCursor(0, 3);
    3e70:	8d b7       	in	r24, 0x3d	; 61
    3e72:	9e b7       	in	r25, 0x3e	; 62
    3e74:	8c 96       	adiw	r24, 0x2c	; 44
    3e76:	0f b6       	in	r0, 0x3f	; 63
    3e78:	f8 94       	cli
    3e7a:	9e bf       	out	0x3e, r25	; 62
    3e7c:	0f be       	out	0x3f, r0	; 63
    3e7e:	8d bf       	out	0x3d, r24	; 61
    3e80:	63 e0       	ldi	r22, 0x03	; 3
    3e82:	80 e0       	ldi	r24, 0x00	; 0
    3e84:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:844
      lcd.printf("%d%d%d", SL9, SL8, SL7);
    3e88:	40 e0       	ldi	r20, 0x00	; 0
    3e8a:	60 e0       	ldi	r22, 0x00	; 0
    3e8c:	87 e0       	ldi	r24, 0x07	; 7
    3e8e:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    3e92:	b8 2e       	mov	r11, r24
    3e94:	a9 2e       	mov	r10, r25
    3e96:	40 e0       	ldi	r20, 0x00	; 0
    3e98:	62 e0       	ldi	r22, 0x02	; 2
    3e9a:	80 e0       	ldi	r24, 0x00	; 0
    3e9c:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    3ea0:	18 2f       	mov	r17, r24
    3ea2:	09 2f       	mov	r16, r25
    3ea4:	40 e0       	ldi	r20, 0x00	; 0
    3ea6:	62 e0       	ldi	r22, 0x02	; 2
    3ea8:	81 e0       	ldi	r24, 0x01	; 1
    3eaa:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    3eae:	af 92       	push	r10
    3eb0:	bf 92       	push	r11
    3eb2:	0f 93       	push	r16
    3eb4:	1f 93       	push	r17
    3eb6:	9f 93       	push	r25
    3eb8:	8f 93       	push	r24
    3eba:	00 e1       	ldi	r16, 0x10	; 16
    3ebc:	16 e0       	ldi	r17, 0x06	; 6
    3ebe:	1f 93       	push	r17
    3ec0:	0f 93       	push	r16
    3ec2:	df 93       	push	r29
    3ec4:	cf 93       	push	r28
    3ec6:	0e 94 df 06 	call	0xdbe	; 0xdbe <Print::printf(char const*, ...) [clone .constprop.22]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:846

      lcd.setCursor(13, 3);
    3eca:	63 e0       	ldi	r22, 0x03	; 3
    3ecc:	8d e0       	ldi	r24, 0x0D	; 13
    3ece:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:847
      lcd.printf("%d%d%d", SR7, SR8, SR9);
    3ed2:	40 e0       	ldi	r20, 0x00	; 0
    3ed4:	63 e0       	ldi	r22, 0x03	; 3
    3ed6:	81 e0       	ldi	r24, 0x01	; 1
    3ed8:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    3edc:	98 2e       	mov	r9, r24
    3ede:	89 2e       	mov	r8, r25
    3ee0:	40 e0       	ldi	r20, 0x00	; 0
    3ee2:	63 e0       	ldi	r22, 0x03	; 3
    3ee4:	80 e0       	ldi	r24, 0x00	; 0
    3ee6:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    3eea:	b8 2e       	mov	r11, r24
    3eec:	a9 2e       	mov	r10, r25
    3eee:	40 e0       	ldi	r20, 0x00	; 0
    3ef0:	61 e0       	ldi	r22, 0x01	; 1
    3ef2:	87 e0       	ldi	r24, 0x07	; 7
    3ef4:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    3ef8:	8f 92       	push	r8
    3efa:	9f 92       	push	r9
    3efc:	af 92       	push	r10
    3efe:	bf 92       	push	r11
    3f00:	9f 93       	push	r25
    3f02:	8f 93       	push	r24
    3f04:	1f 93       	push	r17
    3f06:	0f 93       	push	r16
    3f08:	df 93       	push	r29
    3f0a:	cf 93       	push	r28
    3f0c:	0e 94 df 06 	call	0xdbe	; 0xdbe <Print::printf(char const*, ...) [clone .constprop.22]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:849

      lcd.setCursor(4, 3);
    3f10:	63 e0       	ldi	r22, 0x03	; 3
    3f12:	84 e0       	ldi	r24, 0x04	; 4
    3f14:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:850
      if (color_L == RED)
    3f18:	81 e0       	ldi	r24, 0x01	; 1
    3f1a:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <color(char)>
    3f1e:	ed b7       	in	r30, 0x3d	; 61
    3f20:	fe b7       	in	r31, 0x3e	; 62
    3f22:	74 96       	adiw	r30, 0x14	; 20
    3f24:	0f b6       	in	r0, 0x3f	; 63
    3f26:	f8 94       	cli
    3f28:	fe bf       	out	0x3e, r31	; 62
    3f2a:	0f be       	out	0x3f, r0	; 63
    3f2c:	ed bf       	out	0x3d, r30	; 61
    3f2e:	81 11       	cpse	r24, r1
    3f30:	2f c0       	rjmp	.+94     	; 0x3f90 <main+0xa0e>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:851
        lcd.print("RED ");
    3f32:	88 e6       	ldi	r24, 0x68	; 104
    3f34:	94 e0       	ldi	r25, 0x04	; 4
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:861
      else if (color_L == YELLOW)
        lcd.print("YEL ");
      else if (color_L == SILVER)
        lcd.print("SIL ");
      else
        lcd.print("WHT ");
    3f36:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:863

      lcd.setCursor(9, 3);
    3f3a:	63 e0       	ldi	r22, 0x03	; 3
    3f3c:	89 e0       	ldi	r24, 0x09	; 9
    3f3e:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:864
      if (color_R == RED)
    3f42:	82 e0       	ldi	r24, 0x02	; 2
    3f44:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <color(char)>
    3f48:	81 11       	cpse	r24, r1
    3f4a:	45 c0       	rjmp	.+138    	; 0x3fd6 <main+0xa54>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:865
        lcd.print("RED");
    3f4c:	8c e1       	ldi	r24, 0x1C	; 28
    3f4e:	96 e0       	ldi	r25, 0x06	; 6
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:875
      else if (color_R == YELLOW)
        lcd.print("YEL");
      else if (VSR6 < 0.9)
        lcd.print("SIL");
      else
        lcd.print("WHT");
    3f50:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:877

      if (start == 0) {
    3f54:	86 e0       	ldi	r24, 0x06	; 6
    3f56:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    3f5a:	89 2b       	or	r24, r25
    3f5c:	09 f0       	breq	.+2      	; 0x3f60 <main+0x9de>
    3f5e:	94 ce       	rjmp	.-728    	; 0x3c88 <main+0x706>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:878
        TCNT1 = 0;
    3f60:	1d bc       	out	0x2d, r1	; 45
    3f62:	1c bc       	out	0x2c, r1	; 44
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:879
        cnt = 0;
    3f64:	1d bc       	out	0x2d, r1	; 45
    3f66:	1c bc       	out	0x2c, r1	; 44
    3f68:	8f ce       	rjmp	.-738    	; 0x3c88 <main+0x706>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:812
      while (next_page == 0)
        ;
      delay(50);
      page++;
      if (page > last_page)
        page = 1;
    3f6a:	81 e0       	ldi	r24, 0x01	; 1
    3f6c:	a3 ce       	rjmp	.-698    	; 0x3cb4 <main+0x732>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:821
      while (previuse_page == 0)
        ;
      delay(50);
      page--;
      if (page < 1)
        page = last_page;
    3f6e:	86 e0       	ldi	r24, 0x06	; 6
    3f70:	bb ce       	rjmp	.-650    	; 0x3ce8 <main+0x766>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:826
      lcd.clear();
    }
    if (increase == 0)
      go(40, 40);
    else if (decrease == 0)
    3f72:	8b e0       	ldi	r24, 0x0B	; 11
    3f74:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    3f78:	89 2b       	or	r24, r25
    3f7a:	29 f4       	brne	.+10     	; 0x3f86 <main+0xa04>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:827
      go(-40, -40);
    3f7c:	68 ed       	ldi	r22, 0xD8	; 216
    3f7e:	7f ef       	ldi	r23, 0xFF	; 255
    3f80:	88 ed       	ldi	r24, 0xD8	; 216
    3f82:	9f ef       	ldi	r25, 0xFF	; 255
    3f84:	bf ce       	rjmp	.-642    	; 0x3d04 <main+0x782>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:829
    else
      go(0, 0);
    3f86:	70 e0       	ldi	r23, 0x00	; 0
    3f88:	60 e0       	ldi	r22, 0x00	; 0
    3f8a:	90 e0       	ldi	r25, 0x00	; 0
    3f8c:	80 e0       	ldi	r24, 0x00	; 0
    3f8e:	ba ce       	rjmp	.-652    	; 0x3d04 <main+0x782>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:852
      lcd.printf("%d%d%d", SR7, SR8, SR9);

      lcd.setCursor(4, 3);
      if (color_L == RED)
        lcd.print("RED ");
      else if (color_L == GREEN)
    3f90:	81 e0       	ldi	r24, 0x01	; 1
    3f92:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <color(char)>
    3f96:	81 30       	cpi	r24, 0x01	; 1
    3f98:	19 f4       	brne	.+6      	; 0x3fa0 <main+0xa1e>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:853
        lcd.print("GRN ");
    3f9a:	8f e7       	ldi	r24, 0x7F	; 127
    3f9c:	94 e0       	ldi	r25, 0x04	; 4
    3f9e:	cb cf       	rjmp	.-106    	; 0x3f36 <main+0x9b4>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:854
      else if (color_L == BLUE)
    3fa0:	81 e0       	ldi	r24, 0x01	; 1
    3fa2:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <color(char)>
    3fa6:	82 30       	cpi	r24, 0x02	; 2
    3fa8:	19 f4       	brne	.+6      	; 0x3fb0 <main+0xa2e>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:855
        lcd.print("BLU ");
    3faa:	83 e6       	ldi	r24, 0x63	; 99
    3fac:	94 e0       	ldi	r25, 0x04	; 4
    3fae:	c3 cf       	rjmp	.-122    	; 0x3f36 <main+0x9b4>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:856
      else if (color_L == YELLOW)
    3fb0:	81 e0       	ldi	r24, 0x01	; 1
    3fb2:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <color(char)>
    3fb6:	84 30       	cpi	r24, 0x04	; 4
    3fb8:	19 f4       	brne	.+6      	; 0x3fc0 <main+0xa3e>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:857
        lcd.print("YEL ");
    3fba:	87 e1       	ldi	r24, 0x17	; 23
    3fbc:	96 e0       	ldi	r25, 0x06	; 6
    3fbe:	bb cf       	rjmp	.-138    	; 0x3f36 <main+0x9b4>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:858
      else if (color_L == SILVER)
    3fc0:	81 e0       	ldi	r24, 0x01	; 1
    3fc2:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <color(char)>
    3fc6:	85 30       	cpi	r24, 0x05	; 5
    3fc8:	19 f4       	brne	.+6      	; 0x3fd0 <main+0xa4e>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:859
        lcd.print("SIL ");
    3fca:	87 e9       	ldi	r24, 0x97	; 151
    3fcc:	94 e0       	ldi	r25, 0x04	; 4
    3fce:	b3 cf       	rjmp	.-154    	; 0x3f36 <main+0x9b4>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:861
      else
        lcd.print("WHT ");
    3fd0:	8c e9       	ldi	r24, 0x9C	; 156
    3fd2:	94 e0       	ldi	r25, 0x04	; 4
    3fd4:	b0 cf       	rjmp	.-160    	; 0x3f36 <main+0x9b4>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:866

      lcd.setCursor(9, 3);
      if (color_R == RED)
        lcd.print("RED");
      else if (color_R == GREEN)
    3fd6:	82 e0       	ldi	r24, 0x02	; 2
    3fd8:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <color(char)>
    3fdc:	81 30       	cpi	r24, 0x01	; 1
    3fde:	19 f4       	brne	.+6      	; 0x3fe6 <main+0xa64>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:867
        lcd.print("GRN");
    3fe0:	80 e2       	ldi	r24, 0x20	; 32
    3fe2:	96 e0       	ldi	r25, 0x06	; 6
    3fe4:	b5 cf       	rjmp	.-150    	; 0x3f50 <main+0x9ce>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:868
      else if (color_R == BLUE)
    3fe6:	82 e0       	ldi	r24, 0x02	; 2
    3fe8:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <color(char)>
    3fec:	82 30       	cpi	r24, 0x02	; 2
    3fee:	19 f4       	brne	.+6      	; 0x3ff6 <main+0xa74>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:869
        lcd.print("BLU");
    3ff0:	84 e2       	ldi	r24, 0x24	; 36
    3ff2:	96 e0       	ldi	r25, 0x06	; 6
    3ff4:	ad cf       	rjmp	.-166    	; 0x3f50 <main+0x9ce>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:870
      else if (color_R == YELLOW)
    3ff6:	82 e0       	ldi	r24, 0x02	; 2
    3ff8:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <color(char)>
    3ffc:	84 30       	cpi	r24, 0x04	; 4
    3ffe:	19 f4       	brne	.+6      	; 0x4006 <main+0xa84>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:871
        lcd.print("YEL");
    4000:	88 e2       	ldi	r24, 0x28	; 40
    4002:	96 e0       	ldi	r25, 0x06	; 6
    4004:	a5 cf       	rjmp	.-182    	; 0x3f50 <main+0x9ce>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:872
      else if (VSR6 < 0.9)
    4006:	41 e0       	ldi	r20, 0x01	; 1
    4008:	61 e0       	ldi	r22, 0x01	; 1
    400a:	86 e0       	ldi	r24, 0x06	; 6
    400c:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    4010:	bc 01       	movw	r22, r24
    4012:	99 0f       	add	r25, r25
    4014:	88 0b       	sbc	r24, r24
    4016:	99 0b       	sbc	r25, r25
    4018:	0e 94 5e 2c 	call	0x58bc	; 0x58bc <__floatsisf>
    401c:	26 e6       	ldi	r18, 0x66	; 102
    401e:	36 e6       	ldi	r19, 0x66	; 102
    4020:	46 e6       	ldi	r20, 0x66	; 102
    4022:	5f e3       	ldi	r21, 0x3F	; 63
    4024:	0e 94 af 2b 	call	0x575e	; 0x575e <__cmpsf2>
    4028:	87 ff       	sbrs	r24, 7
    402a:	03 c0       	rjmp	.+6      	; 0x4032 <main+0xab0>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:873
        lcd.print("SIL");
    402c:	8c e2       	ldi	r24, 0x2C	; 44
    402e:	96 e0       	ldi	r25, 0x06	; 6
    4030:	8f cf       	rjmp	.-226    	; 0x3f50 <main+0x9ce>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:875
      else
        lcd.print("WHT");
    4032:	80 e3       	ldi	r24, 0x30	; 48
    4034:	96 e0       	ldi	r25, 0x06	; 6
    4036:	8c cf       	rjmp	.-232    	; 0x3f50 <main+0x9ce>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:882
      if (start == 0) {
        TCNT1 = 0;
        cnt = 0;
        //puls_cnt = 0;
      }
    } else if (page == 2)  // V left
    4038:	82 30       	cpi	r24, 0x02	; 2
    403a:	09 f0       	breq	.+2      	; 0x403e <main+0xabc>
    403c:	92 c0       	rjmp	.+292    	; 0x4162 <main+0xbe0>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:884
    {
      lcd.setCursor(0, 0);
    403e:	60 e0       	ldi	r22, 0x00	; 0
    4040:	80 e0       	ldi	r24, 0x00	; 0
    4042:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:885
      lcd.printf("L10=%02d        %02d", VSL10, VSM);
    4046:	41 e0       	ldi	r20, 0x01	; 1
    4048:	60 e0       	ldi	r22, 0x00	; 0
    404a:	80 e0       	ldi	r24, 0x00	; 0
    404c:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    4050:	18 2f       	mov	r17, r24
    4052:	09 2f       	mov	r16, r25
    4054:	41 e0       	ldi	r20, 0x01	; 1
    4056:	62 e0       	ldi	r22, 0x02	; 2
    4058:	82 e0       	ldi	r24, 0x02	; 2
    405a:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    405e:	0f 93       	push	r16
    4060:	1f 93       	push	r17
    4062:	9f 93       	push	r25
    4064:	8f 93       	push	r24
    4066:	84 e3       	ldi	r24, 0x34	; 52
    4068:	96 e0       	ldi	r25, 0x06	; 6
    406a:	9f 93       	push	r25
    406c:	8f 93       	push	r24
    406e:	df 93       	push	r29
    4070:	cf 93       	push	r28
    4072:	0e 94 df 06 	call	0xdbe	; 0xdbe <Print::printf(char const*, ...) [clone .constprop.22]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:887

      lcd.setCursor(5, 1);
    4076:	61 e0       	ldi	r22, 0x01	; 1
    4078:	85 e0       	ldi	r24, 0x05	; 5
    407a:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:888
      lcd.printf("%02d  %02d  %02d", VSL3, VSL2, VSL1);
    407e:	41 e0       	ldi	r20, 0x01	; 1
    4080:	60 e0       	ldi	r22, 0x00	; 0
    4082:	81 e0       	ldi	r24, 0x01	; 1
    4084:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    4088:	b8 2e       	mov	r11, r24
    408a:	a9 2e       	mov	r10, r25
    408c:	41 e0       	ldi	r20, 0x01	; 1
    408e:	60 e0       	ldi	r22, 0x00	; 0
    4090:	82 e0       	ldi	r24, 0x02	; 2
    4092:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    4096:	18 2f       	mov	r17, r24
    4098:	09 2f       	mov	r16, r25
    409a:	41 e0       	ldi	r20, 0x01	; 1
    409c:	60 e0       	ldi	r22, 0x00	; 0
    409e:	83 e0       	ldi	r24, 0x03	; 3
    40a0:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    40a4:	af 92       	push	r10
    40a6:	bf 92       	push	r11
    40a8:	0f 93       	push	r16
    40aa:	1f 93       	push	r17
    40ac:	9f 93       	push	r25
    40ae:	8f 93       	push	r24
    40b0:	89 e4       	ldi	r24, 0x49	; 73
    40b2:	96 e0       	ldi	r25, 0x06	; 6
    40b4:	9f 93       	push	r25
    40b6:	8f 93       	push	r24
    40b8:	df 93       	push	r29
    40ba:	cf 93       	push	r28
    40bc:	0e 94 df 06 	call	0xdbe	; 0xdbe <Print::printf(char const*, ...) [clone .constprop.22]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:890

      lcd.setCursor(2, 2);
    40c0:	62 e0       	ldi	r22, 0x02	; 2
    40c2:	82 e0       	ldi	r24, 0x02	; 2
    40c4:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:891
      lcd.printf("%02d  %02d  %02d ", VSL6, VSL5, VSL4);
    40c8:	41 e0       	ldi	r20, 0x01	; 1
    40ca:	60 e0       	ldi	r22, 0x00	; 0
    40cc:	84 e0       	ldi	r24, 0x04	; 4
    40ce:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    40d2:	b8 2e       	mov	r11, r24
    40d4:	a9 2e       	mov	r10, r25
    40d6:	41 e0       	ldi	r20, 0x01	; 1
    40d8:	60 e0       	ldi	r22, 0x00	; 0
    40da:	85 e0       	ldi	r24, 0x05	; 5
    40dc:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    40e0:	18 2f       	mov	r17, r24
    40e2:	09 2f       	mov	r16, r25
    40e4:	41 e0       	ldi	r20, 0x01	; 1
    40e6:	60 e0       	ldi	r22, 0x00	; 0
    40e8:	86 e0       	ldi	r24, 0x06	; 6
    40ea:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    40ee:	af 92       	push	r10
    40f0:	bf 92       	push	r11
    40f2:	0f 93       	push	r16
    40f4:	1f 93       	push	r17
    40f6:	9f 93       	push	r25
    40f8:	8f 93       	push	r24
    40fa:	0a e5       	ldi	r16, 0x5A	; 90
    40fc:	16 e0       	ldi	r17, 0x06	; 6
    40fe:	1f 93       	push	r17
    4100:	0f 93       	push	r16
    4102:	df 93       	push	r29
    4104:	cf 93       	push	r28
    4106:	0e 94 df 06 	call	0xdbe	; 0xdbe <Print::printf(char const*, ...) [clone .constprop.22]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:893

      lcd.setCursor(0, 3);
    410a:	63 e0       	ldi	r22, 0x03	; 3
    410c:	80 e0       	ldi	r24, 0x00	; 0
    410e:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:894
      lcd.printf("%02d  %02d  %02d ", VSL9, VSL8, VSL7);
    4112:	41 e0       	ldi	r20, 0x01	; 1
    4114:	60 e0       	ldi	r22, 0x00	; 0
    4116:	87 e0       	ldi	r24, 0x07	; 7
    4118:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    411c:	98 2e       	mov	r9, r24
    411e:	89 2e       	mov	r8, r25
    4120:	41 e0       	ldi	r20, 0x01	; 1
    4122:	62 e0       	ldi	r22, 0x02	; 2
    4124:	80 e0       	ldi	r24, 0x00	; 0
    4126:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    412a:	b8 2e       	mov	r11, r24
    412c:	a9 2e       	mov	r10, r25
    412e:	41 e0       	ldi	r20, 0x01	; 1
    4130:	62 e0       	ldi	r22, 0x02	; 2
    4132:	81 e0       	ldi	r24, 0x01	; 1
    4134:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    4138:	8f 92       	push	r8
    413a:	9f 92       	push	r9
    413c:	af 92       	push	r10
    413e:	bf 92       	push	r11
    4140:	9f 93       	push	r25
    4142:	8f 93       	push	r24
    4144:	1f 93       	push	r17
    4146:	0f 93       	push	r16
    4148:	df 93       	push	r29
    414a:	cf 93       	push	r28
    414c:	0e 94 df 06 	call	0xdbe	; 0xdbe <Print::printf(char const*, ...) [clone .constprop.22]>
    4150:	8d b7       	in	r24, 0x3d	; 61
    4152:	9e b7       	in	r25, 0x3e	; 62
    4154:	86 96       	adiw	r24, 0x26	; 38
    4156:	0f b6       	in	r0, 0x3f	; 63
    4158:	f8 94       	cli
    415a:	9e bf       	out	0x3e, r25	; 62
    415c:	0f be       	out	0x3f, r0	; 63
    415e:	8d bf       	out	0x3d, r24	; 61
    4160:	93 cd       	rjmp	.-1242   	; 0x3c88 <main+0x706>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:895
    } else if (page == 3)  // V right
    4162:	83 30       	cpi	r24, 0x03	; 3
    4164:	09 f0       	breq	.+2      	; 0x4168 <main+0xbe6>
    4166:	91 c0       	rjmp	.+290    	; 0x428a <main+0xd08>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:897
    {
      lcd.setCursor(0, 0);
    4168:	60 e0       	ldi	r22, 0x00	; 0
    416a:	80 e0       	ldi	r24, 0x00	; 0
    416c:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:898
      lcd.printf("%02d        R10=%02d", VSM, VSR10);
    4170:	41 e0       	ldi	r20, 0x01	; 1
    4172:	63 e0       	ldi	r22, 0x03	; 3
    4174:	82 e0       	ldi	r24, 0x02	; 2
    4176:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    417a:	18 2f       	mov	r17, r24
    417c:	09 2f       	mov	r16, r25
    417e:	41 e0       	ldi	r20, 0x01	; 1
    4180:	60 e0       	ldi	r22, 0x00	; 0
    4182:	80 e0       	ldi	r24, 0x00	; 0
    4184:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    4188:	0f 93       	push	r16
    418a:	1f 93       	push	r17
    418c:	9f 93       	push	r25
    418e:	8f 93       	push	r24
    4190:	8c e6       	ldi	r24, 0x6C	; 108
    4192:	96 e0       	ldi	r25, 0x06	; 6
    4194:	9f 93       	push	r25
    4196:	8f 93       	push	r24
    4198:	df 93       	push	r29
    419a:	cf 93       	push	r28
    419c:	0e 94 df 06 	call	0xdbe	; 0xdbe <Print::printf(char const*, ...) [clone .constprop.22]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:900

      lcd.setCursor(2, 1);
    41a0:	61 e0       	ldi	r22, 0x01	; 1
    41a2:	82 e0       	ldi	r24, 0x02	; 2
    41a4:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:901
      lcd.printf("%02d  %02d  %02d ", VSR1, VSR2, VSR3);
    41a8:	41 e0       	ldi	r20, 0x01	; 1
    41aa:	61 e0       	ldi	r22, 0x01	; 1
    41ac:	83 e0       	ldi	r24, 0x03	; 3
    41ae:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    41b2:	b8 2e       	mov	r11, r24
    41b4:	a9 2e       	mov	r10, r25
    41b6:	41 e0       	ldi	r20, 0x01	; 1
    41b8:	61 e0       	ldi	r22, 0x01	; 1
    41ba:	82 e0       	ldi	r24, 0x02	; 2
    41bc:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    41c0:	18 2f       	mov	r17, r24
    41c2:	09 2f       	mov	r16, r25
    41c4:	41 e0       	ldi	r20, 0x01	; 1
    41c6:	61 e0       	ldi	r22, 0x01	; 1
    41c8:	81 e0       	ldi	r24, 0x01	; 1
    41ca:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    41ce:	af 92       	push	r10
    41d0:	bf 92       	push	r11
    41d2:	0f 93       	push	r16
    41d4:	1f 93       	push	r17
    41d6:	9f 93       	push	r25
    41d8:	8f 93       	push	r24
    41da:	0a e5       	ldi	r16, 0x5A	; 90
    41dc:	16 e0       	ldi	r17, 0x06	; 6
    41de:	1f 93       	push	r17
    41e0:	0f 93       	push	r16
    41e2:	df 93       	push	r29
    41e4:	cf 93       	push	r28
    41e6:	0e 94 df 06 	call	0xdbe	; 0xdbe <Print::printf(char const*, ...) [clone .constprop.22]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:903

      lcd.setCursor(4, 2);
    41ea:	62 e0       	ldi	r22, 0x02	; 2
    41ec:	84 e0       	ldi	r24, 0x04	; 4
    41ee:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:904
      lcd.printf("%02d  %02d  %02d ", VSR4, VSR5, VSR6);
    41f2:	41 e0       	ldi	r20, 0x01	; 1
    41f4:	61 e0       	ldi	r22, 0x01	; 1
    41f6:	86 e0       	ldi	r24, 0x06	; 6
    41f8:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    41fc:	98 2e       	mov	r9, r24
    41fe:	89 2e       	mov	r8, r25
    4200:	41 e0       	ldi	r20, 0x01	; 1
    4202:	61 e0       	ldi	r22, 0x01	; 1
    4204:	85 e0       	ldi	r24, 0x05	; 5
    4206:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    420a:	b8 2e       	mov	r11, r24
    420c:	a9 2e       	mov	r10, r25
    420e:	41 e0       	ldi	r20, 0x01	; 1
    4210:	61 e0       	ldi	r22, 0x01	; 1
    4212:	84 e0       	ldi	r24, 0x04	; 4
    4214:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    4218:	8f 92       	push	r8
    421a:	9f 92       	push	r9
    421c:	af 92       	push	r10
    421e:	bf 92       	push	r11
    4220:	9f 93       	push	r25
    4222:	8f 93       	push	r24
    4224:	1f 93       	push	r17
    4226:	0f 93       	push	r16
    4228:	df 93       	push	r29
    422a:	cf 93       	push	r28
    422c:	0e 94 df 06 	call	0xdbe	; 0xdbe <Print::printf(char const*, ...) [clone .constprop.22]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:906

      lcd.setCursor(6, 3);
    4230:	63 e0       	ldi	r22, 0x03	; 3
    4232:	86 e0       	ldi	r24, 0x06	; 6
    4234:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:907
      lcd.printf("%02d  %02d  %02d ", VSR7, VSR8, VSR9);
    4238:	41 e0       	ldi	r20, 0x01	; 1
    423a:	63 e0       	ldi	r22, 0x03	; 3
    423c:	81 e0       	ldi	r24, 0x01	; 1
    423e:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    4242:	98 2e       	mov	r9, r24
    4244:	89 2e       	mov	r8, r25
    4246:	41 e0       	ldi	r20, 0x01	; 1
    4248:	63 e0       	ldi	r22, 0x03	; 3
    424a:	80 e0       	ldi	r24, 0x00	; 0
    424c:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    4250:	b8 2e       	mov	r11, r24
    4252:	a9 2e       	mov	r10, r25
    4254:	41 e0       	ldi	r20, 0x01	; 1
    4256:	61 e0       	ldi	r22, 0x01	; 1
    4258:	87 e0       	ldi	r24, 0x07	; 7
    425a:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    425e:	8f 92       	push	r8
    4260:	9f 92       	push	r9
    4262:	af 92       	push	r10
    4264:	bf 92       	push	r11
    4266:	9f 93       	push	r25
    4268:	8f 93       	push	r24
    426a:	1f 93       	push	r17
    426c:	0f 93       	push	r16
    426e:	df 93       	push	r29
    4270:	cf 93       	push	r28
    4272:	0e 94 df 06 	call	0xdbe	; 0xdbe <Print::printf(char const*, ...) [clone .constprop.22]>
    4276:	2d b7       	in	r18, 0x3d	; 61
    4278:	3e b7       	in	r19, 0x3e	; 62
    427a:	2a 5d       	subi	r18, 0xDA	; 218
    427c:	3f 4f       	sbci	r19, 0xFF	; 255
    427e:	0f b6       	in	r0, 0x3f	; 63
    4280:	f8 94       	cli
    4282:	3e bf       	out	0x3e, r19	; 62
    4284:	0f be       	out	0x3f, r0	; 63
    4286:	2d bf       	out	0x3d, r18	; 61
    4288:	ff cc       	rjmp	.-1538   	; 0x3c88 <main+0x706>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:908
    } else if (page == 4)  // switches
    428a:	84 30       	cpi	r24, 0x04	; 4
    428c:	09 f0       	breq	.+2      	; 0x4290 <main+0xd0e>
    428e:	7e c0       	rjmp	.+252    	; 0x438c <main+0xe0a>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:910
    {
      lcd.setCursor(0, 0);
    4290:	60 e0       	ldi	r22, 0x00	; 0
    4292:	80 e0       	ldi	r24, 0x00	; 0
    4294:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:911
      lcd.printf("SL=%d con=%d SR=%d", SFL, con, SFR);
    4298:	40 e0       	ldi	r20, 0x00	; 0
    429a:	63 e0       	ldi	r22, 0x03	; 3
    429c:	84 e0       	ldi	r24, 0x04	; 4
    429e:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    42a2:	b8 2e       	mov	r11, r24
    42a4:	a9 2e       	mov	r10, r25
    42a6:	40 e0       	ldi	r20, 0x00	; 0
    42a8:	63 e0       	ldi	r22, 0x03	; 3
    42aa:	83 e0       	ldi	r24, 0x03	; 3
    42ac:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    42b0:	18 2f       	mov	r17, r24
    42b2:	09 2f       	mov	r16, r25
    42b4:	40 e0       	ldi	r20, 0x00	; 0
    42b6:	62 e0       	ldi	r22, 0x02	; 2
    42b8:	84 e0       	ldi	r24, 0x04	; 4
    42ba:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    42be:	af 92       	push	r10
    42c0:	bf 92       	push	r11
    42c2:	0f 93       	push	r16
    42c4:	1f 93       	push	r17
    42c6:	9f 93       	push	r25
    42c8:	8f 93       	push	r24
    42ca:	81 e8       	ldi	r24, 0x81	; 129
    42cc:	96 e0       	ldi	r25, 0x06	; 6
    42ce:	9f 93       	push	r25
    42d0:	8f 93       	push	r24
    42d2:	df 93       	push	r29
    42d4:	cf 93       	push	r28
    42d6:	0e 94 df 06 	call	0xdbe	; 0xdbe <Print::printf(char const*, ...) [clone .constprop.22]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:913

      lcd.setCursor(0, 1);
    42da:	61 e0       	ldi	r22, 0x01	; 1
    42dc:	80 e0       	ldi	r24, 0x00	; 0
    42de:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:914
      lcd.printf("obs = %d = %02d ", obs, Vobs);
    42e2:	41 e0       	ldi	r20, 0x01	; 1
    42e4:	62 e0       	ldi	r22, 0x02	; 2
    42e6:	86 e0       	ldi	r24, 0x06	; 6
    42e8:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    42ec:	18 2f       	mov	r17, r24
    42ee:	09 2f       	mov	r16, r25
    42f0:	40 e0       	ldi	r20, 0x00	; 0
    42f2:	62 e0       	ldi	r22, 0x02	; 2
    42f4:	86 e0       	ldi	r24, 0x06	; 6
    42f6:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    42fa:	0f 93       	push	r16
    42fc:	1f 93       	push	r17
    42fe:	9f 93       	push	r25
    4300:	8f 93       	push	r24
    4302:	84 e9       	ldi	r24, 0x94	; 148
    4304:	96 e0       	ldi	r25, 0x06	; 6
    4306:	9f 93       	push	r25
    4308:	8f 93       	push	r24
    430a:	df 93       	push	r29
    430c:	cf 93       	push	r28
    430e:	0e 94 df 06 	call	0xdbe	; 0xdbe <Print::printf(char const*, ...) [clone .constprop.22]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:916

      lcd.setCursor(0, 2);
    4312:	62 e0       	ldi	r22, 0x02	; 2
    4314:	80 e0       	ldi	r24, 0x00	; 0
    4316:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:917
      lcd.printf("ball=%d = %02d ", ball, Vball);
    431a:	41 e0       	ldi	r20, 0x01	; 1
    431c:	62 e0       	ldi	r22, 0x02	; 2
    431e:	85 e0       	ldi	r24, 0x05	; 5
    4320:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    4324:	18 2f       	mov	r17, r24
    4326:	09 2f       	mov	r16, r25
    4328:	40 e0       	ldi	r20, 0x00	; 0
    432a:	62 e0       	ldi	r22, 0x02	; 2
    432c:	85 e0       	ldi	r24, 0x05	; 5
    432e:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    4332:	0f 93       	push	r16
    4334:	1f 93       	push	r17
    4336:	9f 93       	push	r25
    4338:	8f 93       	push	r24
    433a:	85 ea       	ldi	r24, 0xA5	; 165
    433c:	96 e0       	ldi	r25, 0x06	; 6
    433e:	9f 93       	push	r25
    4340:	8f 93       	push	r24
    4342:	df 93       	push	r29
    4344:	cf 93       	push	r28
    4346:	0e 94 df 06 	call	0xdbe	; 0xdbe <Print::printf(char const*, ...) [clone .constprop.22]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:919

      lcd.setCursor(0, 3);
    434a:	63 e0       	ldi	r22, 0x03	; 3
    434c:	80 e0       	ldi	r24, 0x00	; 0
    434e:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:920
      lcd.printf("SBL=%d  SBR=%d  ", SBL, SBR);
    4352:	86 e2       	ldi	r24, 0x26	; 38
    4354:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    4358:	18 2f       	mov	r17, r24
    435a:	09 2f       	mov	r16, r25
    435c:	85 e2       	ldi	r24, 0x25	; 37
    435e:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    4362:	0f 93       	push	r16
    4364:	1f 93       	push	r17
    4366:	9f 93       	push	r25
    4368:	8f 93       	push	r24
    436a:	85 eb       	ldi	r24, 0xB5	; 181
    436c:	96 e0       	ldi	r25, 0x06	; 6
    436e:	9f 93       	push	r25
    4370:	8f 93       	push	r24
    4372:	df 93       	push	r29
    4374:	cf 93       	push	r28
    4376:	0e 94 df 06 	call	0xdbe	; 0xdbe <Print::printf(char const*, ...) [clone .constprop.22]>
    437a:	8d b7       	in	r24, 0x3d	; 61
    437c:	9e b7       	in	r25, 0x3e	; 62
    437e:	82 96       	adiw	r24, 0x22	; 34
    4380:	0f b6       	in	r0, 0x3f	; 63
    4382:	f8 94       	cli
    4384:	9e bf       	out	0x3e, r25	; 62
    4386:	0f be       	out	0x3f, r0	; 63
    4388:	8d bf       	out	0x3d, r24	; 61
    438a:	7e cc       	rjmp	.-1796   	; 0x3c88 <main+0x706>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:921
    } else if (page == 5)  // distance
    438c:	85 30       	cpi	r24, 0x05	; 5
    438e:	09 f0       	breq	.+2      	; 0x4392 <main+0xe10>
    4390:	9a c0       	rjmp	.+308    	; 0x44c6 <main+0xf44>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:923
    {
      lcd.setCursor(0, 0);
    4392:	60 e0       	ldi	r22, 0x00	; 0
    4394:	80 e0       	ldi	r24, 0x00	; 0
    4396:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
ultrasonic():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:2162
    go(0,0); delay(2000);
  }
}
*/
int ultrasonic(){
    pinMode(pingPin, OUTPUT);
    439a:	61 e0       	ldi	r22, 0x01	; 1
    439c:	89 e1       	ldi	r24, 0x19	; 25
    439e:	0e 94 89 01 	call	0x312	; 0x312 <pinMode>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:2163
    digitalWrite(pingPin, LOW);
    43a2:	60 e0       	ldi	r22, 0x00	; 0
    43a4:	89 e1       	ldi	r24, 0x19	; 25
    43a6:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <digitalWrite>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:2164
    delayMicroseconds(2);
    43aa:	82 e0       	ldi	r24, 0x02	; 2
    43ac:	90 e0       	ldi	r25, 0x00	; 0
    43ae:	0e 94 42 02 	call	0x484	; 0x484 <delayMicroseconds>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:2165
    digitalWrite(pingPin, HIGH);
    43b2:	61 e0       	ldi	r22, 0x01	; 1
    43b4:	89 e1       	ldi	r24, 0x19	; 25
    43b6:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <digitalWrite>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:2166
    delayMicroseconds(10);
    43ba:	8a e0       	ldi	r24, 0x0A	; 10
    43bc:	90 e0       	ldi	r25, 0x00	; 0
    43be:	0e 94 42 02 	call	0x484	; 0x484 <delayMicroseconds>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:2167
    digitalWrite(pingPin, LOW);
    43c2:	60 e0       	ldi	r22, 0x00	; 0
    43c4:	89 e1       	ldi	r24, 0x19	; 25
    43c6:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <digitalWrite>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:2168
    pinMode(echoPin, INPUT);
    43ca:	60 e0       	ldi	r22, 0x00	; 0
    43cc:	80 e1       	ldi	r24, 0x10	; 16
    43ce:	0e 94 89 01 	call	0x312	; 0x312 <pinMode>
pulseIn():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.c:38
unsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout)
{
  // cache the port and bit of the pin in order to speed up the
  // pulse width measuring loop and achieve finer resolution.  calling
  // digitalRead() instead yields much coarser resolution.
  uint8_t bit = digitalPinToBitMask(pin);
    43d2:	e1 e0       	ldi	r30, 0x01	; 1
    43d4:	f1 e0       	ldi	r31, 0x01	; 1
    43d6:	64 91       	lpm	r22, Z
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.c:39
  uint8_t port = digitalPinToPort(pin);
    43d8:	ec ec       	ldi	r30, 0xCC	; 204
    43da:	f0 e0       	ldi	r31, 0x00	; 0
    43dc:	84 91       	lpm	r24, Z
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.c:46

  // convert the timeout from microseconds to a number of times through
  // the initial loop; it takes approximately 16 clock cycles per iteration
  unsigned long maxloops = microsecondsToClockCycles(timeout)/16;

  unsigned long width = countPulseASM(portInputRegister(port), bit, stateMask, maxloops);
    43de:	e8 2f       	mov	r30, r24
    43e0:	f0 e0       	ldi	r31, 0x00	; 0
    43e2:	ee 0f       	add	r30, r30
    43e4:	ff 1f       	adc	r31, r31
    43e6:	e4 55       	subi	r30, 0x54	; 84
    43e8:	ff 4f       	sbci	r31, 0xFF	; 255
    43ea:	85 91       	lpm	r24, Z+
    43ec:	94 91       	lpm	r25, Z
    43ee:	0c e8       	ldi	r16, 0x8C	; 140
    43f0:	1d e7       	ldi	r17, 0x7D	; 125
    43f2:	2a e0       	ldi	r18, 0x0A	; 10
    43f4:	30 e0       	ldi	r19, 0x00	; 0
    43f6:	46 2f       	mov	r20, r22
    43f8:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <countPulseASM>
    43fc:	9b 01       	movw	r18, r22
    43fe:	ac 01       	movw	r20, r24
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.c:49

  // prevent clockCyclesToMicroseconds to return bogus values if countPulseASM timed out
  if (width)
    4400:	21 15       	cp	r18, r1
    4402:	31 05       	cpc	r19, r1
    4404:	41 05       	cpc	r20, r1
    4406:	51 05       	cpc	r21, r1
    4408:	79 f0       	breq	.+30     	; 0x4428 <main+0xea6>
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_pulse.c:50
    return clockCyclesToMicroseconds(width * 16 + 16);
    440a:	6f 5f       	subi	r22, 0xFF	; 255
    440c:	7f 4f       	sbci	r23, 0xFF	; 255
    440e:	8f 4f       	sbci	r24, 0xFF	; 255
    4410:	9f 4f       	sbci	r25, 0xFF	; 255
    4412:	44 e0       	ldi	r20, 0x04	; 4
    4414:	66 0f       	add	r22, r22
    4416:	77 1f       	adc	r23, r23
    4418:	88 1f       	adc	r24, r24
    441a:	99 1f       	adc	r25, r25
    441c:	4a 95       	dec	r20
    441e:	d1 f7       	brne	.-12     	; 0x4414 <main+0xe92>
    4420:	a7 01       	movw	r20, r14
    4422:	96 01       	movw	r18, r12
    4424:	0e 94 a3 2d 	call	0x5b46	; 0x5b46 <__udivmodsi4>
microsecondsToMillimeters():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:800
      }
    }
  }
}
long microsecondsToMillimeters(long microseconds) {
  return microseconds * 10 / 29 / 2;
    4428:	aa e0       	ldi	r26, 0x0A	; 10
    442a:	b0 e0       	ldi	r27, 0x00	; 0
    442c:	0e 94 fc 2d 	call	0x5bf8	; 0x5bf8 <__muluhisi3>
    4430:	2a e3       	ldi	r18, 0x3A	; 58
    4432:	30 e0       	ldi	r19, 0x00	; 0
    4434:	40 e0       	ldi	r20, 0x00	; 0
    4436:	50 e0       	ldi	r21, 0x00	; 0
    4438:	0e 94 c5 2d 	call	0x5b8a	; 0x5b8a <__divmodsi4>
menu_sensor():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:924
      lcd.setCursor(0, 3);
      lcd.printf("SBL=%d  SBR=%d  ", SBL, SBR);
    } else if (page == 5)  // distance
    {
      lcd.setCursor(0, 0);
      lcd.printf("Front: %d", Front_distance);
    443c:	3f 93       	push	r19
    443e:	2f 93       	push	r18
    4440:	26 ec       	ldi	r18, 0xC6	; 198
    4442:	36 e0       	ldi	r19, 0x06	; 6
    4444:	3f 93       	push	r19
    4446:	2f 93       	push	r18
    4448:	df 93       	push	r29
    444a:	cf 93       	push	r28
    444c:	0e 94 df 06 	call	0xdbe	; 0xdbe <Print::printf(char const*, ...) [clone .constprop.22]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:925
      lcd.setCursor(0, 1);
    4450:	61 e0       	ldi	r22, 0x01	; 1
    4452:	80 e0       	ldi	r24, 0x00	; 0
    4454:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:926
      lcd.printf("     VL_F=%d  ", VL_Front);
    4458:	83 e0       	ldi	r24, 0x03	; 3
    445a:	0e 94 4e 0b 	call	0x169c	; 0x169c <vl(char)>
    445e:	9f 93       	push	r25
    4460:	8f 93       	push	r24
    4462:	20 ed       	ldi	r18, 0xD0	; 208
    4464:	36 e0       	ldi	r19, 0x06	; 6
    4466:	3f 93       	push	r19
    4468:	2f 93       	push	r18
    446a:	df 93       	push	r29
    446c:	cf 93       	push	r28
    446e:	0e 94 df 06 	call	0xdbe	; 0xdbe <Print::printf(char const*, ...) [clone .constprop.22]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:927
      lcd.setCursor(0, 2);
    4472:	62 e0       	ldi	r22, 0x02	; 2
    4474:	80 e0       	ldi	r24, 0x00	; 0
    4476:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:928
      lcd.printf("VL_L=%d VL_R=%d ", VL_Left, VL_Right);
    447a:	81 e0       	ldi	r24, 0x01	; 1
    447c:	0e 94 4e 0b 	call	0x169c	; 0x169c <vl(char)>
    4480:	18 2f       	mov	r17, r24
    4482:	09 2f       	mov	r16, r25
    4484:	82 e0       	ldi	r24, 0x02	; 2
    4486:	0e 94 4e 0b 	call	0x169c	; 0x169c <vl(char)>
    448a:	0f 93       	push	r16
    448c:	1f 93       	push	r17
    448e:	9f 93       	push	r25
    4490:	8f 93       	push	r24
    4492:	2f ed       	ldi	r18, 0xDF	; 223
    4494:	36 e0       	ldi	r19, 0x06	; 6
    4496:	3f 93       	push	r19
    4498:	2f 93       	push	r18
    449a:	df 93       	push	r29
    449c:	cf 93       	push	r28
    449e:	0e 94 df 06 	call	0xdbe	; 0xdbe <Print::printf(char const*, ...) [clone .constprop.22]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:929
      delay(200);
    44a2:	68 ec       	ldi	r22, 0xC8	; 200
    44a4:	70 e0       	ldi	r23, 0x00	; 0
    44a6:	80 e0       	ldi	r24, 0x00	; 0
    44a8:	90 e0       	ldi	r25, 0x00	; 0
    44aa:	0e 94 aa 02 	call	0x554	; 0x554 <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:930
      lcd.clear();
    44ae:	0e 94 45 05 	call	0xa8a	; 0xa8a <LiquidCrystal::clear() [clone .constprop.34]>
    44b2:	2d b7       	in	r18, 0x3d	; 61
    44b4:	3e b7       	in	r19, 0x3e	; 62
    44b6:	2c 5e       	subi	r18, 0xEC	; 236
    44b8:	3f 4f       	sbci	r19, 0xFF	; 255
    44ba:	0f b6       	in	r0, 0x3f	; 63
    44bc:	f8 94       	cli
    44be:	3e bf       	out	0x3e, r19	; 62
    44c0:	0f be       	out	0x3f, r0	; 63
    44c2:	2d bf       	out	0x3d, r18	; 61
    44c4:	e1 cb       	rjmp	.-2110   	; 0x3c88 <main+0x706>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:931
    }else if (page == 6)  // compass
    44c6:	86 30       	cpi	r24, 0x06	; 6
    44c8:	09 f0       	breq	.+2      	; 0x44cc <main+0xf4a>
    44ca:	de cb       	rjmp	.-2116   	; 0x3c88 <main+0x706>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:933
    {
      lcd.setCursor(0, 0);
    44cc:	60 e0       	ldi	r22, 0x00	; 0
    44ce:	80 e0       	ldi	r24, 0x00	; 0
    44d0:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:934
      lcd.printf("deg: %d pi: %d ro: %d",deg,pitch,role);
    44d4:	83 e0       	ldi	r24, 0x03	; 3
    44d6:	90 e0       	ldi	r25, 0x00	; 0
    44d8:	0e 94 04 0c 	call	0x1808	; 0x1808 <cmps(int)>
    44dc:	b8 2e       	mov	r11, r24
    44de:	a9 2e       	mov	r10, r25
    44e0:	82 e0       	ldi	r24, 0x02	; 2
    44e2:	90 e0       	ldi	r25, 0x00	; 0
    44e4:	0e 94 04 0c 	call	0x1808	; 0x1808 <cmps(int)>
    44e8:	18 2f       	mov	r17, r24
    44ea:	09 2f       	mov	r16, r25
    44ec:	81 e0       	ldi	r24, 0x01	; 1
    44ee:	90 e0       	ldi	r25, 0x00	; 0
    44f0:	0e 94 04 0c 	call	0x1808	; 0x1808 <cmps(int)>
    44f4:	af 92       	push	r10
    44f6:	bf 92       	push	r11
    44f8:	0f 93       	push	r16
    44fa:	1f 93       	push	r17
    44fc:	9f 93       	push	r25
    44fe:	8f 93       	push	r24
    4500:	80 ef       	ldi	r24, 0xF0	; 240
    4502:	96 e0       	ldi	r25, 0x06	; 6
    4504:	9f 93       	push	r25
    4506:	8f 93       	push	r24
    4508:	df 93       	push	r29
    450a:	cf 93       	push	r28
    450c:	0e 94 df 06 	call	0xdbe	; 0xdbe <Print::printf(char const*, ...) [clone .constprop.22]>
    4510:	8d b7       	in	r24, 0x3d	; 61
    4512:	9e b7       	in	r25, 0x3e	; 62
    4514:	0a 96       	adiw	r24, 0x0a	; 10
    4516:	0f b6       	in	r0, 0x3f	; 63
    4518:	f8 94       	cli
    451a:	9e bf       	out	0x3e, r25	; 62
    451c:	0f be       	out	0x3f, r0	; 63
    451e:	8d bf       	out	0x3d, r24	; 61
    4520:	b3 cb       	rjmp	.-2202   	; 0x3c88 <main+0x706>
menu():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1419
      if (start == 0) {
        while (start == 0)
          ;
        menu_sensor();
      }
    } else if (page == 3)  // Setup
    4522:	83 30       	cpi	r24, 0x03	; 3
    4524:	09 f0       	breq	.+2      	; 0x4528 <main+0xfa6>
    4526:	56 c2       	rjmp	.+1196   	; 0x49d4 <main+0x1452>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1421
    {
      if (start == 0) {
    4528:	86 e0       	ldi	r24, 0x06	; 6
    452a:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    452e:	89 2b       	or	r24, r25
    4530:	09 f0       	breq	.+2      	; 0x4534 <main+0xfb2>
    4532:	19 ca       	rjmp	.-3022   	; 0x3966 <main+0x3e4>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1422
        while (start == 0)
    4534:	86 e0       	ldi	r24, 0x06	; 6
    4536:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    453a:	89 2b       	or	r24, r25
    453c:	d9 f3       	breq	.-10     	; 0x4534 <main+0xfb2>
menu_setup():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:640
  }
}

void menu_setup(void) {
  static char page = 1, last_page = 8;
  int spd = EEPROM_read_int(spd_address);
    453e:	86 e9       	ldi	r24, 0x96	; 150
    4540:	90 e0       	ldi	r25, 0x00	; 0
    4542:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    4546:	8c 01       	movw	r16, r24
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:641
  int T90 = EEPROM_read_int(T90_address);
    4548:	88 e9       	ldi	r24, 0x98	; 152
    454a:	90 e0       	ldi	r25, 0x00	; 0
    454c:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    4550:	7c 01       	movw	r14, r24
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:642
  int range_value = EEPROM_read_int(range_address);
    4552:	8a e9       	ldi	r24, 0x9A	; 154
    4554:	90 e0       	ldi	r25, 0x00	; 0
    4556:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    455a:	6c 01       	movw	r12, r24
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:643
  int DN = EEPROM_read_int(DN_address);
    455c:	8c e9       	ldi	r24, 0x9C	; 156
    455e:	90 e0       	ldi	r25, 0x00	; 0
    4560:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    4564:	98 2e       	mov	r9, r24
    4566:	89 2e       	mov	r8, r25
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:644
  int DE = EEPROM_read_int(DE_address);
    4568:	8e e9       	ldi	r24, 0x9E	; 158
    456a:	90 e0       	ldi	r25, 0x00	; 0
    456c:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    4570:	78 2e       	mov	r7, r24
    4572:	69 2e       	mov	r6, r25
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:645
  int DS = EEPROM_read_int(DS_address);
    4574:	80 ea       	ldi	r24, 0xA0	; 160
    4576:	90 e0       	ldi	r25, 0x00	; 0
    4578:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    457c:	58 2e       	mov	r5, r24
    457e:	49 2e       	mov	r4, r25
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:646
  int ev_s_ball = EEPROM_read_int(DW_address);
    4580:	82 ea       	ldi	r24, 0xA2	; 162
    4582:	90 e0       	ldi	r25, 0x00	; 0
    4584:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    4588:	1c 01       	movw	r2, r24
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:648

  lcd.clear();
    458a:	0e 94 45 05 	call	0xa8a	; 0xa8a <LiquidCrystal::clear() [clone .constprop.34]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:687
      lcd.setCursor(0, page - 1);
      lcd.print(">");
    } else if (page < 9) {

      lcd.setCursor(2, 0);
      lcd.printf("DN  %d  deg: %d ", DN, deg);
    458e:	c4 e7       	ldi	r28, 0x74	; 116
    4590:	da e0       	ldi	r29, 0x0A	; 10
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:651
  int ev_s_ball = EEPROM_read_int(DW_address);

  lcd.clear();

  while (1) {
    if (next_page == 0) {
    4592:	88 e0       	ldi	r24, 0x08	; 8
    4594:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    4598:	89 2b       	or	r24, r25
    459a:	a9 f4       	brne	.+42     	; 0x45c6 <main+0x1044>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:652
      while (next_page == 0)
    459c:	88 e0       	ldi	r24, 0x08	; 8
    459e:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    45a2:	89 2b       	or	r24, r25
    45a4:	d9 f3       	breq	.-10     	; 0x459c <main+0x101a>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:654
        ;
      delay(50);
    45a6:	62 e3       	ldi	r22, 0x32	; 50
    45a8:	70 e0       	ldi	r23, 0x00	; 0
    45aa:	80 e0       	ldi	r24, 0x00	; 0
    45ac:	90 e0       	ldi	r25, 0x00	; 0
    45ae:	0e 94 aa 02 	call	0x554	; 0x554 <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:655
      page++;
    45b2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <menu_setup()::page>
    45b6:	8f 5f       	subi	r24, 0xFF	; 255
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:656
      if (page > last_page)
    45b8:	89 30       	cpi	r24, 0x09	; 9
    45ba:	0c f0       	brlt	.+2      	; 0x45be <main+0x103c>
    45bc:	8e c0       	rjmp	.+284    	; 0x46da <main+0x1158>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:657
        page = 1;
    45be:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <menu_setup()::page>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:658
      lcd.clear();
    45c2:	0e 94 45 05 	call	0xa8a	; 0xa8a <LiquidCrystal::clear() [clone .constprop.34]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:660
    }
    if (previuse_page == 0) {
    45c6:	89 e0       	ldi	r24, 0x09	; 9
    45c8:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    45cc:	89 2b       	or	r24, r25
    45ce:	a9 f4       	brne	.+42     	; 0x45fa <main+0x1078>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:661
      while (previuse_page == 0)
    45d0:	89 e0       	ldi	r24, 0x09	; 9
    45d2:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    45d6:	89 2b       	or	r24, r25
    45d8:	d9 f3       	breq	.-10     	; 0x45d0 <main+0x104e>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:663
        ;
      delay(50);
    45da:	62 e3       	ldi	r22, 0x32	; 50
    45dc:	70 e0       	ldi	r23, 0x00	; 0
    45de:	80 e0       	ldi	r24, 0x00	; 0
    45e0:	90 e0       	ldi	r25, 0x00	; 0
    45e2:	0e 94 aa 02 	call	0x554	; 0x554 <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:664
      page--;
    45e6:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <menu_setup()::page>
    45ea:	81 50       	subi	r24, 0x01	; 1
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:665
      if (page < 1)
    45ec:	18 16       	cp	r1, r24
    45ee:	0c f0       	brlt	.+2      	; 0x45f2 <main+0x1070>
    45f0:	76 c0       	rjmp	.+236    	; 0x46de <main+0x115c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:666
        page = last_page;
    45f2:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <menu_setup()::page>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:667
      lcd.clear();
    45f6:	0e 94 45 05 	call	0xa8a	; 0xa8a <LiquidCrystal::clear() [clone .constprop.34]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:669
    }
    if (page < 5) {
    45fa:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <menu_setup()::page>
    45fe:	85 30       	cpi	r24, 0x05	; 5
    4600:	0c f0       	brlt	.+2      	; 0x4604 <main+0x1082>
    4602:	6f c0       	rjmp	.+222    	; 0x46e2 <main+0x1160>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:670
      lcd.setCursor(2, 0);
    4604:	60 e0       	ldi	r22, 0x00	; 0
    4606:	82 e0       	ldi	r24, 0x02	; 2
    4608:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:671
      lcd.printf("speed     %3d ", spd);
    460c:	1f 93       	push	r17
    460e:	0f 93       	push	r16
    4610:	e6 e0       	ldi	r30, 0x06	; 6
    4612:	f7 e0       	ldi	r31, 0x07	; 7
    4614:	ff 93       	push	r31
    4616:	ef 93       	push	r30
    4618:	df 93       	push	r29
    461a:	cf 93       	push	r28
    461c:	0e 94 df 06 	call	0xdbe	; 0xdbe <Print::printf(char const*, ...) [clone .constprop.22]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:673

      lcd.setCursor(2, 1);
    4620:	61 e0       	ldi	r22, 0x01	; 1
    4622:	82 e0       	ldi	r24, 0x02	; 2
    4624:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:674
      lcd.printf("T90       %3d ", T90);
    4628:	ff 92       	push	r15
    462a:	ef 92       	push	r14
    462c:	e5 e1       	ldi	r30, 0x15	; 21
    462e:	f7 e0       	ldi	r31, 0x07	; 7
    4630:	ff 93       	push	r31
    4632:	ef 93       	push	r30
    4634:	df 93       	push	r29
    4636:	cf 93       	push	r28
    4638:	0e 94 df 06 	call	0xdbe	; 0xdbe <Print::printf(char const*, ...) [clone .constprop.22]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:676

      lcd.setCursor(2, 2);
    463c:	62 e0       	ldi	r22, 0x02	; 2
    463e:	82 e0       	ldi	r24, 0x02	; 2
    4640:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:677
      lcd.printf("calib rng %3d ", range);
    4644:	8a e9       	ldi	r24, 0x9A	; 154
    4646:	90 e0       	ldi	r25, 0x00	; 0
    4648:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <EEPROM_read_int(int)>
    464c:	9f 93       	push	r25
    464e:	8f 93       	push	r24
    4650:	e4 e2       	ldi	r30, 0x24	; 36
    4652:	f7 e0       	ldi	r31, 0x07	; 7
    4654:	ff 93       	push	r31
    4656:	ef 93       	push	r30
    4658:	df 93       	push	r29
    465a:	cf 93       	push	r28
    465c:	0e 94 df 06 	call	0xdbe	; 0xdbe <Print::printf(char const*, ...) [clone .constprop.22]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:679

      lcd.setCursor(2, 3);
    4660:	63 e0       	ldi	r22, 0x03	; 3
    4662:	82 e0       	ldi	r24, 0x02	; 2
    4664:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:680
      lcd.printf("reset memory   ");
    4668:	e3 e3       	ldi	r30, 0x33	; 51
    466a:	f7 e0       	ldi	r31, 0x07	; 7
    466c:	ff 93       	push	r31
    466e:	ef 93       	push	r30
    4670:	df 93       	push	r29
    4672:	cf 93       	push	r28
    4674:	0e 94 df 06 	call	0xdbe	; 0xdbe <Print::printf(char const*, ...) [clone .constprop.22]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:682

      lcd.setCursor(0, page - 1);
    4678:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <menu_setup()::page>
    467c:	61 50       	subi	r22, 0x01	; 1
    467e:	80 e0       	ldi	r24, 0x00	; 0
    4680:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:683
      lcd.print(">");
    4684:	83 e4       	ldi	r24, 0x43	; 67
    4686:	97 e0       	ldi	r25, 0x07	; 7
    4688:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
    468c:	ed b7       	in	r30, 0x3d	; 61
    468e:	fe b7       	in	r31, 0x3e	; 62
    4690:	76 96       	adiw	r30, 0x16	; 22
    4692:	0f b6       	in	r0, 0x3f	; 63
    4694:	f8 94       	cli
    4696:	fe bf       	out	0x3e, r31	; 62
    4698:	0f be       	out	0x3f, r0	; 63
    469a:	ed bf       	out	0x3d, r30	; 61
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:702

      lcd.setCursor(0, page - 5);
      lcd.print(">");
    }

    if (page == 1)  // spd
    469c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <menu_setup()::page>
    46a0:	81 30       	cpi	r24, 0x01	; 1
    46a2:	09 f0       	breq	.+2      	; 0x46a6 <main+0x1124>
    46a4:	9c c0       	rjmp	.+312    	; 0x47de <main+0x125c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:704
    {
      if (increase == 0) {
    46a6:	8a e0       	ldi	r24, 0x0A	; 10
    46a8:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    46ac:	89 2b       	or	r24, r25
    46ae:	09 f0       	breq	.+2      	; 0x46b2 <main+0x1130>
    46b0:	6c c0       	rjmp	.+216    	; 0x478a <main+0x1208>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:705
        delay(120);
    46b2:	68 e7       	ldi	r22, 0x78	; 120
    46b4:	70 e0       	ldi	r23, 0x00	; 0
    46b6:	80 e0       	ldi	r24, 0x00	; 0
    46b8:	90 e0       	ldi	r25, 0x00	; 0
    46ba:	0e 94 aa 02 	call	0x554	; 0x554 <delay>
    46be:	06 5f       	subi	r16, 0xF6	; 246
    46c0:	1f 4f       	sbci	r17, 0xFF	; 255
    46c2:	0f 3f       	cpi	r16, 0xFF	; 255
    46c4:	11 05       	cpc	r17, r1
    46c6:	19 f0       	breq	.+6      	; 0x46ce <main+0x114c>
    46c8:	14 f0       	brlt	.+4      	; 0x46ce <main+0x114c>
    46ca:	0f ef       	ldi	r16, 0xFF	; 255
    46cc:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:721
      } else if (start == 0) {
        go(spd, spd);
        while (start == 0)
          ;
        go(0, 0);
        EEPROM_write_int(spd_address, spd);
    46ce:	b8 01       	movw	r22, r16
    46d0:	86 e9       	ldi	r24, 0x96	; 150
    46d2:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:786
    {
      if (start == 0) {
        while (start == 0)
          ;
        DS = deg;
        EEPROM_write_int(DS_address, DS);
    46d4:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
    46d8:	5c cf       	rjmp	.-328    	; 0x4592 <main+0x1010>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:657
      while (next_page == 0)
        ;
      delay(50);
      page++;
      if (page > last_page)
        page = 1;
    46da:	81 e0       	ldi	r24, 0x01	; 1
    46dc:	70 cf       	rjmp	.-288    	; 0x45be <main+0x103c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:666
      while (previuse_page == 0)
        ;
      delay(50);
      page--;
      if (page < 1)
        page = last_page;
    46de:	88 e0       	ldi	r24, 0x08	; 8
    46e0:	88 cf       	rjmp	.-240    	; 0x45f2 <main+0x1070>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:684
      lcd.setCursor(2, 3);
      lcd.printf("reset memory   ");

      lcd.setCursor(0, page - 1);
      lcd.print(">");
    } else if (page < 9) {
    46e2:	89 30       	cpi	r24, 0x09	; 9
    46e4:	dc f6       	brge	.-74     	; 0x469c <main+0x111a>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:686

      lcd.setCursor(2, 0);
    46e6:	60 e0       	ldi	r22, 0x00	; 0
    46e8:	82 e0       	ldi	r24, 0x02	; 2
    46ea:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:687
      lcd.printf("DN  %d  deg: %d ", DN, deg);
    46ee:	81 e0       	ldi	r24, 0x01	; 1
    46f0:	90 e0       	ldi	r25, 0x00	; 0
    46f2:	0e 94 04 0c 	call	0x1808	; 0x1808 <cmps(int)>
    46f6:	9f 93       	push	r25
    46f8:	8f 93       	push	r24
    46fa:	8f 92       	push	r8
    46fc:	9f 92       	push	r9
    46fe:	25 e4       	ldi	r18, 0x45	; 69
    4700:	37 e0       	ldi	r19, 0x07	; 7
    4702:	3f 93       	push	r19
    4704:	2f 93       	push	r18
    4706:	df 93       	push	r29
    4708:	cf 93       	push	r28
    470a:	0e 94 df 06 	call	0xdbe	; 0xdbe <Print::printf(char const*, ...) [clone .constprop.22]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:689

      lcd.setCursor(2, 1);
    470e:	61 e0       	ldi	r22, 0x01	; 1
    4710:	82 e0       	ldi	r24, 0x02	; 2
    4712:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:690
      lcd.printf("DE  %d ", DE);
    4716:	6f 92       	push	r6
    4718:	7f 92       	push	r7
    471a:	26 e5       	ldi	r18, 0x56	; 86
    471c:	37 e0       	ldi	r19, 0x07	; 7
    471e:	3f 93       	push	r19
    4720:	2f 93       	push	r18
    4722:	df 93       	push	r29
    4724:	cf 93       	push	r28
    4726:	0e 94 df 06 	call	0xdbe	; 0xdbe <Print::printf(char const*, ...) [clone .constprop.22]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:692

      lcd.setCursor(2, 2);
    472a:	62 e0       	ldi	r22, 0x02	; 2
    472c:	82 e0       	ldi	r24, 0x02	; 2
    472e:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:693
      lcd.printf("DS  %d ", DS);
    4732:	4f 92       	push	r4
    4734:	5f 92       	push	r5
    4736:	2e e5       	ldi	r18, 0x5E	; 94
    4738:	37 e0       	ldi	r19, 0x07	; 7
    473a:	3f 93       	push	r19
    473c:	2f 93       	push	r18
    473e:	df 93       	push	r29
    4740:	cf 93       	push	r28
    4742:	0e 94 df 06 	call	0xdbe	; 0xdbe <Print::printf(char const*, ...) [clone .constprop.22]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:695

      lcd.setCursor(2, 3);
    4746:	63 e0       	ldi	r22, 0x03	; 3
    4748:	82 e0       	ldi	r24, 0x02	; 2
    474a:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:696
      lcd.printf("ev_s_ball  %d ", ev_s_ball);
    474e:	3f 92       	push	r3
    4750:	2f 92       	push	r2
    4752:	26 e6       	ldi	r18, 0x66	; 102
    4754:	37 e0       	ldi	r19, 0x07	; 7
    4756:	3f 93       	push	r19
    4758:	2f 93       	push	r18
    475a:	df 93       	push	r29
    475c:	cf 93       	push	r28
    475e:	0e 94 df 06 	call	0xdbe	; 0xdbe <Print::printf(char const*, ...) [clone .constprop.22]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:698

      lcd.setCursor(0, page - 5);
    4762:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <menu_setup()::page>
    4766:	65 50       	subi	r22, 0x05	; 5
    4768:	80 e0       	ldi	r24, 0x00	; 0
    476a:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:699
      lcd.print(">");
    476e:	83 e4       	ldi	r24, 0x43	; 67
    4770:	97 e0       	ldi	r25, 0x07	; 7
    4772:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
    4776:	2d b7       	in	r18, 0x3d	; 61
    4778:	3e b7       	in	r19, 0x3e	; 62
    477a:	26 5e       	subi	r18, 0xE6	; 230
    477c:	3f 4f       	sbci	r19, 0xFF	; 255
    477e:	0f b6       	in	r0, 0x3f	; 63
    4780:	f8 94       	cli
    4782:	3e bf       	out	0x3e, r19	; 62
    4784:	0f be       	out	0x3f, r0	; 63
    4786:	2d bf       	out	0x3d, r18	; 61
    4788:	89 cf       	rjmp	.-238    	; 0x469c <main+0x111a>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:710
        delay(120);
        spd += 10;
        if (spd > 255)
          spd = 255;
        EEPROM_write_int(spd_address, spd);
      } else if (decrease == 0) {
    478a:	8b e0       	ldi	r24, 0x0B	; 11
    478c:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    4790:	89 2b       	or	r24, r25
    4792:	79 f4       	brne	.+30     	; 0x47b2 <main+0x1230>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:711
        delay(120);
    4794:	68 e7       	ldi	r22, 0x78	; 120
    4796:	70 e0       	ldi	r23, 0x00	; 0
    4798:	80 e0       	ldi	r24, 0x00	; 0
    479a:	90 e0       	ldi	r25, 0x00	; 0
    479c:	0e 94 aa 02 	call	0x554	; 0x554 <delay>
    47a0:	0a 50       	subi	r16, 0x0A	; 10
    47a2:	11 09       	sbc	r17, r1
    47a4:	0a 30       	cpi	r16, 0x0A	; 10
    47a6:	11 05       	cpc	r17, r1
    47a8:	0c f0       	brlt	.+2      	; 0x47ac <main+0x122a>
    47aa:	91 cf       	rjmp	.-222    	; 0x46ce <main+0x114c>
    47ac:	0a e0       	ldi	r16, 0x0A	; 10
    47ae:	10 e0       	ldi	r17, 0x00	; 0
    47b0:	8e cf       	rjmp	.-228    	; 0x46ce <main+0x114c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:716
        spd -= 10;
        if (spd < 10)
          spd = 10;
        EEPROM_write_int(spd_address, spd);
      } else if (start == 0) {
    47b2:	86 e0       	ldi	r24, 0x06	; 6
    47b4:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    47b8:	89 2b       	or	r24, r25
    47ba:	09 f0       	breq	.+2      	; 0x47be <main+0x123c>
    47bc:	ea ce       	rjmp	.-556    	; 0x4592 <main+0x1010>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:717
        go(spd, spd);
    47be:	b8 01       	movw	r22, r16
    47c0:	c8 01       	movw	r24, r16
    47c2:	0e 94 56 06 	call	0xcac	; 0xcac <go(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:718
        while (start == 0)
    47c6:	86 e0       	ldi	r24, 0x06	; 6
    47c8:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    47cc:	89 2b       	or	r24, r25
    47ce:	d9 f3       	breq	.-10     	; 0x47c6 <main+0x1244>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:720
          ;
        go(0, 0);
    47d0:	70 e0       	ldi	r23, 0x00	; 0
    47d2:	60 e0       	ldi	r22, 0x00	; 0
    47d4:	90 e0       	ldi	r25, 0x00	; 0
    47d6:	80 e0       	ldi	r24, 0x00	; 0
    47d8:	0e 94 56 06 	call	0xcac	; 0xcac <go(int, int)>
    47dc:	78 cf       	rjmp	.-272    	; 0x46ce <main+0x114c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:723
        EEPROM_write_int(spd_address, spd);
      }
    } else if (page == 2)  // T90
    47de:	82 30       	cpi	r24, 0x02	; 2
    47e0:	09 f0       	breq	.+2      	; 0x47e4 <main+0x1262>
    47e2:	4c c0       	rjmp	.+152    	; 0x487c <main+0x12fa>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:725
    {
      if (increase == 0) {
    47e4:	8a e0       	ldi	r24, 0x0A	; 10
    47e6:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    47ea:	89 2b       	or	r24, r25
    47ec:	69 f4       	brne	.+26     	; 0x4808 <main+0x1286>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:726
        delay(200);
    47ee:	68 ec       	ldi	r22, 0xC8	; 200
    47f0:	70 e0       	ldi	r23, 0x00	; 0
    47f2:	80 e0       	ldi	r24, 0x00	; 0
    47f4:	90 e0       	ldi	r25, 0x00	; 0
    47f6:	0e 94 aa 02 	call	0x554	; 0x554 <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:727
        T90 += 1;
    47fa:	3f ef       	ldi	r19, 0xFF	; 255
    47fc:	e3 1a       	sub	r14, r19
    47fe:	f3 0a       	sbc	r15, r19
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:732
        EEPROM_write_int(T90_address, T90);
      } else if (decrease == 0) {
        delay(200);
        T90 -= 1;
        EEPROM_write_int(T90_address, T90);
    4800:	b7 01       	movw	r22, r14
    4802:	88 e9       	ldi	r24, 0x98	; 152
    4804:	90 e0       	ldi	r25, 0x00	; 0
    4806:	66 cf       	rjmp	.-308    	; 0x46d4 <main+0x1152>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:729
    {
      if (increase == 0) {
        delay(200);
        T90 += 1;
        EEPROM_write_int(T90_address, T90);
      } else if (decrease == 0) {
    4808:	8b e0       	ldi	r24, 0x0B	; 11
    480a:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    480e:	89 2b       	or	r24, r25
    4810:	51 f4       	brne	.+20     	; 0x4826 <main+0x12a4>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:730
        delay(200);
    4812:	68 ec       	ldi	r22, 0xC8	; 200
    4814:	70 e0       	ldi	r23, 0x00	; 0
    4816:	80 e0       	ldi	r24, 0x00	; 0
    4818:	90 e0       	ldi	r25, 0x00	; 0
    481a:	0e 94 aa 02 	call	0x554	; 0x554 <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:731
        T90 -= 1;
    481e:	81 e0       	ldi	r24, 0x01	; 1
    4820:	e8 1a       	sub	r14, r24
    4822:	f1 08       	sbc	r15, r1
    4824:	ed cf       	rjmp	.-38     	; 0x4800 <main+0x127e>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:733
        EEPROM_write_int(T90_address, T90);
      } else if (start == 0) {
    4826:	86 e0       	ldi	r24, 0x06	; 6
    4828:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    482c:	89 2b       	or	r24, r25
    482e:	09 f0       	breq	.+2      	; 0x4832 <main+0x12b0>
    4830:	b0 ce       	rjmp	.-672    	; 0x4592 <main+0x1010>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:734
        while (start == 0)
    4832:	86 e0       	ldi	r24, 0x06	; 6
    4834:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    4838:	89 2b       	or	r24, r25
    483a:	d9 f3       	breq	.-10     	; 0x4832 <main+0x12b0>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:736
          ;
        lcd.clear();
    483c:	0e 94 45 05 	call	0xa8a	; 0xa8a <LiquidCrystal::clear() [clone .constprop.34]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:737
        EEPROM_write_int(T90_address, T90);
    4840:	b7 01       	movw	r22, r14
    4842:	88 e9       	ldi	r24, 0x98	; 152
    4844:	90 e0       	ldi	r25, 0x00	; 0
    4846:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
move():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1919
        go(speed, speed);
      }
      go(0, 0);
      break;
    case Left:
      cnt = 0;
    484a:	1d bc       	out	0x2d, r1	; 45
    484c:	1c bc       	out	0x2c, r1	; 44
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1920
      while (cnt / 100 < lenth) {
    484e:	8c b5       	in	r24, 0x2c	; 44
    4850:	9d b5       	in	r25, 0x2d	; 45
    4852:	64 e6       	ldi	r22, 0x64	; 100
    4854:	70 e0       	ldi	r23, 0x00	; 0
    4856:	0e 94 7b 2d 	call	0x5af6	; 0x5af6 <__udivmodhi4>
    485a:	6e 15       	cp	r22, r14
    485c:	7f 05       	cpc	r23, r15
    485e:	38 f4       	brcc	.+14     	; 0x486e <main+0x12ec>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1921
        go(-speed, speed);
    4860:	68 ec       	ldi	r22, 0xC8	; 200
    4862:	70 e0       	ldi	r23, 0x00	; 0
    4864:	88 e3       	ldi	r24, 0x38	; 56
    4866:	9f ef       	ldi	r25, 0xFF	; 255
    4868:	0e 94 56 06 	call	0xcac	; 0xcac <go(int, int)>
    486c:	f0 cf       	rjmp	.-32     	; 0x484e <main+0x12cc>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1923
      }
      go(0, 0);
    486e:	70 e0       	ldi	r23, 0x00	; 0
    4870:	60 e0       	ldi	r22, 0x00	; 0
    4872:	90 e0       	ldi	r25, 0x00	; 0
    4874:	80 e0       	ldi	r24, 0x00	; 0
    4876:	0e 94 56 06 	call	0xcac	; 0xcac <go(int, int)>
    487a:	8b ce       	rjmp	.-746    	; 0x4592 <main+0x1010>
menu_setup():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:740
          ;
        lcd.clear();
        EEPROM_write_int(T90_address, T90);
        move(Left, T90, 200);
      }
    } else if (page == 3)  // range
    487c:	83 30       	cpi	r24, 0x03	; 3
    487e:	81 f5       	brne	.+96     	; 0x48e0 <main+0x135e>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:742
    {
      if (increase == 0) {
    4880:	8a e0       	ldi	r24, 0x0A	; 10
    4882:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    4886:	89 2b       	or	r24, r25
    4888:	a1 f4       	brne	.+40     	; 0x48b2 <main+0x1330>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:743
        delay(100);
    488a:	64 e6       	ldi	r22, 0x64	; 100
    488c:	70 e0       	ldi	r23, 0x00	; 0
    488e:	80 e0       	ldi	r24, 0x00	; 0
    4890:	90 e0       	ldi	r25, 0x00	; 0
    4892:	0e 94 aa 02 	call	0x554	; 0x554 <delay>
    4896:	9f ef       	ldi	r25, 0xFF	; 255
    4898:	c9 1a       	sub	r12, r25
    489a:	d9 0a       	sbc	r13, r25
    489c:	e1 e5       	ldi	r30, 0x51	; 81
    489e:	ce 16       	cp	r12, r30
    48a0:	d1 04       	cpc	r13, r1
    48a2:	1c f0       	brlt	.+6      	; 0x48aa <main+0x1328>
    48a4:	30 e5       	ldi	r19, 0x50	; 80
    48a6:	c3 2e       	mov	r12, r19
    48a8:	d1 2c       	mov	r13, r1
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:753
      } else if (decrease == 0) {
        delay(100);
        range_value -= 1;
        if (range_value < 5)
          range_value = 5;
        EEPROM_write_int(range_address, range_value);
    48aa:	b6 01       	movw	r22, r12
    48ac:	8a e9       	ldi	r24, 0x9A	; 154
    48ae:	90 e0       	ldi	r25, 0x00	; 0
    48b0:	11 cf       	rjmp	.-478    	; 0x46d4 <main+0x1152>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:748
        delay(100);
        range_value += 1;
        if (range_value > 80)
          range_value = 80;
        EEPROM_write_int(range_address, range_value);
      } else if (decrease == 0) {
    48b2:	8b e0       	ldi	r24, 0x0B	; 11
    48b4:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    48b8:	89 2b       	or	r24, r25
    48ba:	09 f0       	breq	.+2      	; 0x48be <main+0x133c>
    48bc:	6a ce       	rjmp	.-812    	; 0x4592 <main+0x1010>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:749
        delay(100);
    48be:	64 e6       	ldi	r22, 0x64	; 100
    48c0:	70 e0       	ldi	r23, 0x00	; 0
    48c2:	80 e0       	ldi	r24, 0x00	; 0
    48c4:	90 e0       	ldi	r25, 0x00	; 0
    48c6:	0e 94 aa 02 	call	0x554	; 0x554 <delay>
    48ca:	f1 e0       	ldi	r31, 0x01	; 1
    48cc:	cf 1a       	sub	r12, r31
    48ce:	d1 08       	sbc	r13, r1
    48d0:	25 e0       	ldi	r18, 0x05	; 5
    48d2:	c2 16       	cp	r12, r18
    48d4:	d1 04       	cpc	r13, r1
    48d6:	4c f7       	brge	.-46     	; 0x48aa <main+0x1328>
    48d8:	25 e0       	ldi	r18, 0x05	; 5
    48da:	c2 2e       	mov	r12, r18
    48dc:	d1 2c       	mov	r13, r1
    48de:	e5 cf       	rjmp	.-54     	; 0x48aa <main+0x1328>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:755
        range_value -= 1;
        if (range_value < 5)
          range_value = 5;
        EEPROM_write_int(range_address, range_value);
      }
    } else if (page == 4)  // reset memory
    48e0:	84 30       	cpi	r24, 0x04	; 4
    48e2:	d1 f4       	brne	.+52     	; 0x4918 <main+0x1396>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:757
    {
      if (start == 0) {
    48e4:	86 e0       	ldi	r24, 0x06	; 6
    48e6:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    48ea:	5c 01       	movw	r10, r24
    48ec:	89 2b       	or	r24, r25
    48ee:	09 f0       	breq	.+2      	; 0x48f2 <main+0x1370>
    48f0:	50 ce       	rjmp	.-864    	; 0x4592 <main+0x1010>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:758
        lcd.clear();
    48f2:	0e 94 45 05 	call	0xa8a	; 0xa8a <LiquidCrystal::clear() [clone .constprop.34]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:759
        while (start == 0)
    48f6:	86 e0       	ldi	r24, 0x06	; 6
    48f8:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    48fc:	89 2b       	or	r24, r25
    48fe:	d9 f3       	breq	.-10     	; 0x48f6 <main+0x1374>
operator=():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\libraries\EEPROM\src/EEPROM.h:47
    operator uint8_t() const             { return **this; }

    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    4900:	60 e0       	ldi	r22, 0x00	; 0
    4902:	c5 01       	movw	r24, r10
    4904:	0e 94 a2 2b 	call	0x5744	; 0x5744 <eeprom_write_byte>
menu_setup():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:761
          ;
        for (int i = 0; i < 200; i++)
    4908:	3f ef       	ldi	r19, 0xFF	; 255
    490a:	a3 1a       	sub	r10, r19
    490c:	b3 0a       	sbc	r11, r19
    490e:	88 ec       	ldi	r24, 0xC8	; 200
    4910:	a8 16       	cp	r10, r24
    4912:	b1 04       	cpc	r11, r1
    4914:	a9 f7       	brne	.-22     	; 0x4900 <main+0x137e>
    4916:	3d ce       	rjmp	.-902    	; 0x4592 <main+0x1010>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:764
          EEPROM.write(i, 0);
      }
    } else if (page == 5)  // DN
    4918:	85 30       	cpi	r24, 0x05	; 5
    491a:	b1 f4       	brne	.+44     	; 0x4948 <main+0x13c6>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:766
    {
      if (start == 0) {
    491c:	86 e0       	ldi	r24, 0x06	; 6
    491e:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    4922:	89 2b       	or	r24, r25
    4924:	09 f0       	breq	.+2      	; 0x4928 <main+0x13a6>
    4926:	35 ce       	rjmp	.-918    	; 0x4592 <main+0x1010>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:767
        while (start == 0)
    4928:	86 e0       	ldi	r24, 0x06	; 6
    492a:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    492e:	89 2b       	or	r24, r25
    4930:	d9 f3       	breq	.-10     	; 0x4928 <main+0x13a6>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:769
          ;
        DN = deg;
    4932:	81 e0       	ldi	r24, 0x01	; 1
    4934:	90 e0       	ldi	r25, 0x00	; 0
    4936:	0e 94 04 0c 	call	0x1808	; 0x1808 <cmps(int)>
    493a:	98 2e       	mov	r9, r24
    493c:	89 2e       	mov	r8, r25
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:770
        EEPROM_write_int(DN_address, DN);
    493e:	68 2f       	mov	r22, r24
    4940:	79 2f       	mov	r23, r25
    4942:	8c e9       	ldi	r24, 0x9C	; 156
    4944:	90 e0       	ldi	r25, 0x00	; 0
    4946:	c6 ce       	rjmp	.-628    	; 0x46d4 <main+0x1152>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:772
      }
    } else if (page == 6)  // DE
    4948:	86 30       	cpi	r24, 0x06	; 6
    494a:	a9 f4       	brne	.+42     	; 0x4976 <main+0x13f4>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:774
    {
       if (start == 0) {
    494c:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    4950:	89 2b       	or	r24, r25
    4952:	09 f0       	breq	.+2      	; 0x4956 <main+0x13d4>
    4954:	1e ce       	rjmp	.-964    	; 0x4592 <main+0x1010>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:775
        while (start == 0)
    4956:	86 e0       	ldi	r24, 0x06	; 6
    4958:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    495c:	89 2b       	or	r24, r25
    495e:	d9 f3       	breq	.-10     	; 0x4956 <main+0x13d4>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:777
          ;
        DE = deg;
    4960:	81 e0       	ldi	r24, 0x01	; 1
    4962:	90 e0       	ldi	r25, 0x00	; 0
    4964:	0e 94 04 0c 	call	0x1808	; 0x1808 <cmps(int)>
    4968:	78 2e       	mov	r7, r24
    496a:	69 2e       	mov	r6, r25
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:778
        EEPROM_write_int(DE_address, DE);
    496c:	68 2f       	mov	r22, r24
    496e:	79 2f       	mov	r23, r25
    4970:	8e e9       	ldi	r24, 0x9E	; 158
    4972:	90 e0       	ldi	r25, 0x00	; 0
    4974:	af ce       	rjmp	.-674    	; 0x46d4 <main+0x1152>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:780
      }
    } else if (page == 7)  // DS
    4976:	87 30       	cpi	r24, 0x07	; 7
    4978:	b1 f4       	brne	.+44     	; 0x49a6 <main+0x1424>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:782
    {
      if (start == 0) {
    497a:	86 e0       	ldi	r24, 0x06	; 6
    497c:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    4980:	89 2b       	or	r24, r25
    4982:	09 f0       	breq	.+2      	; 0x4986 <main+0x1404>
    4984:	06 ce       	rjmp	.-1012   	; 0x4592 <main+0x1010>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:783
        while (start == 0)
    4986:	86 e0       	ldi	r24, 0x06	; 6
    4988:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    498c:	89 2b       	or	r24, r25
    498e:	d9 f3       	breq	.-10     	; 0x4986 <main+0x1404>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:785
          ;
        DS = deg;
    4990:	81 e0       	ldi	r24, 0x01	; 1
    4992:	90 e0       	ldi	r25, 0x00	; 0
    4994:	0e 94 04 0c 	call	0x1808	; 0x1808 <cmps(int)>
    4998:	58 2e       	mov	r5, r24
    499a:	49 2e       	mov	r4, r25
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:786
        EEPROM_write_int(DS_address, DS);
    499c:	68 2f       	mov	r22, r24
    499e:	79 2f       	mov	r23, r25
    49a0:	80 ea       	ldi	r24, 0xA0	; 160
    49a2:	90 e0       	ldi	r25, 0x00	; 0
    49a4:	97 ce       	rjmp	.-722    	; 0x46d4 <main+0x1152>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:788
      }
    } else if (page == 8)  // DW
    49a6:	88 30       	cpi	r24, 0x08	; 8
    49a8:	09 f0       	breq	.+2      	; 0x49ac <main+0x142a>
    49aa:	f3 cd       	rjmp	.-1050   	; 0x4592 <main+0x1010>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:790
    {
      if (start == 0) {
    49ac:	86 e0       	ldi	r24, 0x06	; 6
    49ae:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    49b2:	89 2b       	or	r24, r25
    49b4:	09 f0       	breq	.+2      	; 0x49b8 <main+0x1436>
    49b6:	ed cd       	rjmp	.-1062   	; 0x4592 <main+0x1010>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:791
        while (start == 0)
    49b8:	86 e0       	ldi	r24, 0x06	; 6
    49ba:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    49be:	89 2b       	or	r24, r25
    49c0:	d9 f3       	breq	.-10     	; 0x49b8 <main+0x1436>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:794
          ;
        ev_s_ball = 0;
        EEPROM_write_int(DW_address, ev_s_ball);
    49c2:	70 e0       	ldi	r23, 0x00	; 0
    49c4:	60 e0       	ldi	r22, 0x00	; 0
    49c6:	82 ea       	ldi	r24, 0xA2	; 162
    49c8:	90 e0       	ldi	r25, 0x00	; 0
    49ca:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
main():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:793
    } else if (page == 8)  // DW
    {
      if (start == 0) {
        while (start == 0)
          ;
        ev_s_ball = 0;
    49ce:	21 2c       	mov	r2, r1
    49d0:	31 2c       	mov	r3, r1
    49d2:	df cd       	rjmp	.-1090   	; 0x4592 <main+0x1010>
menu():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1426
      if (start == 0) {
        while (start == 0)
          ;
        menu_setup();
      }
    } else if (page == 4)  // Test Color
    49d4:	84 30       	cpi	r24, 0x04	; 4
    49d6:	81 f4       	brne	.+32     	; 0x49f8 <main+0x1476>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1428
    {
      if (start == 0) {
    49d8:	86 e0       	ldi	r24, 0x06	; 6
    49da:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    49de:	89 2b       	or	r24, r25
    49e0:	11 f0       	breq	.+4      	; 0x49e6 <main+0x1464>
    49e2:	0c 94 b3 1c 	jmp	0x3966	; 0x3966 <main+0x3e4>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1429
        lcd.clear();
    49e6:	0e 94 45 05 	call	0xa8a	; 0xa8a <LiquidCrystal::clear() [clone .constprop.34]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1430
        while (start == 0)
    49ea:	86 e0       	ldi	r24, 0x06	; 6
    49ec:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    49f0:	89 2b       	or	r24, r25
    49f2:	d9 f3       	breq	.-10     	; 0x49ea <main+0x1468>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1432
          ;
        menu_color();
    49f4:	0e 94 1e 14 	call	0x283c	; 0x283c <menu_color()>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1434
      }
    } else if (page == 5)  // Test Motor
    49f8:	85 30       	cpi	r24, 0x05	; 5
    49fa:	71 f4       	brne	.+28     	; 0x4a18 <main+0x1496>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1436
    {
      if (start == 0) {
    49fc:	86 e0       	ldi	r24, 0x06	; 6
    49fe:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    4a02:	89 2b       	or	r24, r25
    4a04:	11 f0       	breq	.+4      	; 0x4a0a <main+0x1488>
    4a06:	0c 94 b3 1c 	jmp	0x3966	; 0x3966 <main+0x3e4>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1437
        while (start == 0)
    4a0a:	86 e0       	ldi	r24, 0x06	; 6
    4a0c:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    4a10:	89 2b       	or	r24, r25
    4a12:	d9 f3       	breq	.-10     	; 0x4a0a <main+0x1488>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1439
          ;
        menu_motor();
    4a14:	0e 94 93 0c 	call	0x1926	; 0x1926 <menu_motor()>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1441
      }
    } else if (page == 6)  // color calibration
    4a18:	86 30       	cpi	r24, 0x06	; 6
    4a1a:	11 f0       	breq	.+4      	; 0x4a20 <main+0x149e>
    4a1c:	0c 94 b3 1c 	jmp	0x3966	; 0x3966 <main+0x3e4>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1443
    {
      if (start == 0) {
    4a20:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    4a24:	89 2b       	or	r24, r25
    4a26:	11 f0       	breq	.+4      	; 0x4a2c <main+0x14aa>
    4a28:	0c 94 b3 1c 	jmp	0x3966	; 0x3966 <main+0x3e4>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1444
        lcd.clear();
    4a2c:	0e 94 45 05 	call	0xa8a	; 0xa8a <LiquidCrystal::clear() [clone .constprop.34]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1445
        while (start == 0)
    4a30:	86 e0       	ldi	r24, 0x06	; 6
    4a32:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    4a36:	89 2b       	or	r24, r25
    4a38:	d9 f3       	breq	.-10     	; 0x4a30 <main+0x14ae>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1447
          ;
        delay(200);
    4a3a:	68 ec       	ldi	r22, 0xC8	; 200
    4a3c:	70 e0       	ldi	r23, 0x00	; 0
    4a3e:	80 e0       	ldi	r24, 0x00	; 0
    4a40:	90 e0       	ldi	r25, 0x00	; 0
    4a42:	0e 94 aa 02 	call	0x554	; 0x554 <delay>
color_calib():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:406

void color_calib(void) {
  static char page = 1, last_page = 12;
  char red_l_calibrated = 0, red_r_calibrated = 0, grn_l_calibrated = 0, grn_r_calibrated = 0, blu_l_calibrated = 0, blu_r_calibrated = 0, yel_l_calibrated = 0, yel_r_calibrated = 0, sil_l_calibrated = 0, sil_r_calibrated = 0,red_f_calibrated = 0, grn_f_calibrated = 0;

  lcd.clear();
    4a46:	0e 94 45 05 	call	0xa8a	; 0xa8a <LiquidCrystal::clear() [clone .constprop.34]>
main():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:404
  // delay(5);
}

void color_calib(void) {
  static char page = 1, last_page = 12;
  char red_l_calibrated = 0, red_r_calibrated = 0, grn_l_calibrated = 0, grn_r_calibrated = 0, blu_l_calibrated = 0, blu_r_calibrated = 0, yel_l_calibrated = 0, yel_r_calibrated = 0, sil_l_calibrated = 0, sil_r_calibrated = 0,red_f_calibrated = 0, grn_f_calibrated = 0;
    4a4a:	81 2c       	mov	r8, r1
    4a4c:	c0 e0       	ldi	r28, 0x00	; 0
    4a4e:	91 2c       	mov	r9, r1
    4a50:	a1 2c       	mov	r10, r1
    4a52:	b1 2c       	mov	r11, r1
    4a54:	c1 2c       	mov	r12, r1
    4a56:	d1 2c       	mov	r13, r1
    4a58:	e1 2c       	mov	r14, r1
    4a5a:	f1 2c       	mov	r15, r1
    4a5c:	00 e0       	ldi	r16, 0x00	; 0
    4a5e:	10 e0       	ldi	r17, 0x00	; 0
    4a60:	d0 e0       	ldi	r29, 0x00	; 0
color_calib():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:413
    if (next_page == 0) {
      while (next_page == 0)
        ;
      page++;
      if (page > last_page)
        page = 1;
    4a62:	77 24       	eor	r7, r7
    4a64:	73 94       	inc	r7
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:422
    if (previuse_page == 0) {
      while (previuse_page == 0)
        ;
      page--;
      if (page < 1)
        page = last_page;
    4a66:	9c e0       	ldi	r25, 0x0C	; 12
    4a68:	69 2e       	mov	r6, r25
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:408
  static char page = 1, last_page = 12;
  char red_l_calibrated = 0, red_r_calibrated = 0, grn_l_calibrated = 0, grn_r_calibrated = 0, blu_l_calibrated = 0, blu_r_calibrated = 0, yel_l_calibrated = 0, yel_r_calibrated = 0, sil_l_calibrated = 0, sil_r_calibrated = 0,red_f_calibrated = 0, grn_f_calibrated = 0;

  lcd.clear();
  while (1) {
    if (next_page == 0) {
    4a6a:	88 e0       	ldi	r24, 0x08	; 8
    4a6c:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    4a70:	89 2b       	or	r24, r25
    4a72:	79 f4       	brne	.+30     	; 0x4a92 <main+0x1510>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:409
      while (next_page == 0)
    4a74:	88 e0       	ldi	r24, 0x08	; 8
    4a76:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    4a7a:	89 2b       	or	r24, r25
    4a7c:	d9 f3       	breq	.-10     	; 0x4a74 <main+0x14f2>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:411
        ;
      page++;
    4a7e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <color_calib()::page>
    4a82:	8f 5f       	subi	r24, 0xFF	; 255
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:412
      if (page > last_page)
    4a84:	8d 30       	cpi	r24, 0x0D	; 13
    4a86:	0c f0       	brlt	.+2      	; 0x4a8a <main+0x1508>
    4a88:	9d c0       	rjmp	.+314    	; 0x4bc4 <main+0x1642>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:411
  lcd.clear();
  while (1) {
    if (next_page == 0) {
      while (next_page == 0)
        ;
      page++;
    4a8a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <color_calib()::page>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:414
      if (page > last_page)
        page = 1;
      lcd.clear();
    4a8e:	0e 94 45 05 	call	0xa8a	; 0xa8a <LiquidCrystal::clear() [clone .constprop.34]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:417
    }

    if (previuse_page == 0) {
    4a92:	89 e0       	ldi	r24, 0x09	; 9
    4a94:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    4a98:	89 2b       	or	r24, r25
    4a9a:	79 f4       	brne	.+30     	; 0x4aba <main+0x1538>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:418
      while (previuse_page == 0)
    4a9c:	89 e0       	ldi	r24, 0x09	; 9
    4a9e:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    4aa2:	89 2b       	or	r24, r25
    4aa4:	d9 f3       	breq	.-10     	; 0x4a9c <main+0x151a>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:420
        ;
      page--;
    4aa6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <color_calib()::page>
    4aaa:	81 50       	subi	r24, 0x01	; 1
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:421
      if (page < 1)
    4aac:	18 16       	cp	r1, r24
    4aae:	0c f0       	brlt	.+2      	; 0x4ab2 <main+0x1530>
    4ab0:	8c c0       	rjmp	.+280    	; 0x4bca <main+0x1648>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:420
    }

    if (previuse_page == 0) {
      while (previuse_page == 0)
        ;
      page--;
    4ab2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <color_calib()::page>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:423
      if (page < 1)
        page = last_page;
      lcd.clear();
    4ab6:	0e 94 45 05 	call	0xa8a	; 0xa8a <LiquidCrystal::clear() [clone .constprop.34]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:426
    }

    if (start == 0) {
    4aba:	86 e0       	ldi	r24, 0x06	; 6
    4abc:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    4ac0:	89 2b       	or	r24, r25
    4ac2:	41 f4       	brne	.+16     	; 0x4ad4 <main+0x1552>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:427
      lcd.clear();
    4ac4:	0e 94 45 05 	call	0xa8a	; 0xa8a <LiquidCrystal::clear() [clone .constprop.34]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:428
      delay(200);
    4ac8:	68 ec       	ldi	r22, 0xC8	; 200
    4aca:	70 e0       	ldi	r23, 0x00	; 0
    4acc:	80 e0       	ldi	r24, 0x00	; 0
    4ace:	90 e0       	ldi	r25, 0x00	; 0
    4ad0:	0e 94 aa 02 	call	0x554	; 0x554 <delay>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:431
    }  // baraye inke age 2 bar khastim calib konim motevajeh beshim

    if (page <= 4) {
    4ad4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <color_calib()::page>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:432
      lcd.setCursor(3, 0);
    4ad8:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:431
    if (start == 0) {
      lcd.clear();
      delay(200);
    }  // baraye inke age 2 bar khastim calib konim motevajeh beshim

    if (page <= 4) {
    4ada:	85 30       	cpi	r24, 0x05	; 5
    4adc:	0c f0       	brlt	.+2      	; 0x4ae0 <main+0x155e>
    4ade:	78 c0       	rjmp	.+240    	; 0x4bd0 <main+0x164e>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:432
      lcd.setCursor(3, 0);
    4ae0:	83 e0       	ldi	r24, 0x03	; 3
    4ae2:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:433
      lcd.print("RED left    ");
    4ae6:	85 e7       	ldi	r24, 0x75	; 117
    4ae8:	97 e0       	ldi	r25, 0x07	; 7
    4aea:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:434
      if (red_l_calibrated == 1)
    4aee:	d1 30       	cpi	r29, 0x01	; 1
    4af0:	21 f4       	brne	.+8      	; 0x4afa <main+0x1578>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:435
        lcd.print("done");
    4af2:	82 e8       	ldi	r24, 0x82	; 130
    4af4:	97 e0       	ldi	r25, 0x07	; 7
    4af6:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:437

      lcd.setCursor(3, 1);
    4afa:	61 e0       	ldi	r22, 0x01	; 1
    4afc:	83 e0       	ldi	r24, 0x03	; 3
    4afe:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:438
      lcd.print("RED right   ");
    4b02:	87 e8       	ldi	r24, 0x87	; 135
    4b04:	97 e0       	ldi	r25, 0x07	; 7
    4b06:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:439
      if (red_r_calibrated == 1)
    4b0a:	11 30       	cpi	r17, 0x01	; 1
    4b0c:	21 f4       	brne	.+8      	; 0x4b16 <main+0x1594>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:440
        lcd.print("done");
    4b0e:	82 e8       	ldi	r24, 0x82	; 130
    4b10:	97 e0       	ldi	r25, 0x07	; 7
    4b12:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:442

      lcd.setCursor(3, 2);
    4b16:	62 e0       	ldi	r22, 0x02	; 2
    4b18:	83 e0       	ldi	r24, 0x03	; 3
    4b1a:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:443
      lcd.print("Green left  ");
    4b1e:	84 e9       	ldi	r24, 0x94	; 148
    4b20:	97 e0       	ldi	r25, 0x07	; 7
    4b22:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:444
      if (grn_l_calibrated == 1)
    4b26:	01 30       	cpi	r16, 0x01	; 1
    4b28:	21 f4       	brne	.+8      	; 0x4b32 <main+0x15b0>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:445
        lcd.print("done");
    4b2a:	82 e8       	ldi	r24, 0x82	; 130
    4b2c:	97 e0       	ldi	r25, 0x07	; 7
    4b2e:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:447

      lcd.setCursor(3, 3);
    4b32:	63 e0       	ldi	r22, 0x03	; 3
    4b34:	83 e0       	ldi	r24, 0x03	; 3
    4b36:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:448
      lcd.print("Green right ");
    4b3a:	81 ea       	ldi	r24, 0xA1	; 161
    4b3c:	97 e0       	ldi	r25, 0x07	; 7
    4b3e:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:449
      if (grn_r_calibrated == 1)
    4b42:	91 e0       	ldi	r25, 0x01	; 1
    4b44:	f9 12       	cpse	r15, r25
    4b46:	04 c0       	rjmp	.+8      	; 0x4b50 <main+0x15ce>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:450
        lcd.print("done");
    4b48:	82 e8       	ldi	r24, 0x82	; 130
    4b4a:	97 e0       	ldi	r25, 0x07	; 7
    4b4c:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:452

      lcd.setCursor(0, page - 1);
    4b50:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <color_calib()::page>
    4b54:	61 50       	subi	r22, 0x01	; 1
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:498
      lcd.setCursor(3, 3);
      lcd.print("Red Front");
      if (red_f_calibrated == 1)
        lcd.print("done");

      lcd.setCursor(0, page - 9);
    4b56:	80 e0       	ldi	r24, 0x00	; 0
    4b58:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:499
      lcd.print("-> ");
    4b5c:	8e ea       	ldi	r24, 0xAE	; 174
    4b5e:	97 e0       	ldi	r25, 0x07	; 7
    4b60:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:502
    }

    if (page == 1)  // -> red left
    4b64:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <color_calib()::page>
    4b68:	81 30       	cpi	r24, 0x01	; 1
    4b6a:	09 f0       	breq	.+2      	; 0x4b6e <main+0x15ec>
    4b6c:	b1 c0       	rjmp	.+354    	; 0x4cd0 <main+0x174e>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:504
    {
      if (start == 0) {
    4b6e:	86 e0       	ldi	r24, 0x06	; 6
    4b70:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    4b74:	89 2b       	or	r24, r25
    4b76:	09 f0       	breq	.+2      	; 0x4b7a <main+0x15f8>
    4b78:	78 cf       	rjmp	.-272    	; 0x4a6a <main+0x14e8>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:505
        color_L;
    4b7a:	81 e0       	ldi	r24, 0x01	; 1
    4b7c:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <color(char)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:510
        // EEPROM_read_int(red_left_r) = red;
        // EEPROM_read_int(red_left_g) = green;
        // EEPROM_read_int(red_left_b) = blue;
        // EEPROM_read_int(red_left_c) = clear;
        EEPROM_write_int(red_left_r, red);
    4b80:	60 91 6f 08 	lds	r22, 0x086F	; 0x80086f <red>
    4b84:	70 91 70 08 	lds	r23, 0x0870	; 0x800870 <red+0x1>
    4b88:	84 e1       	ldi	r24, 0x14	; 20
    4b8a:	90 e0       	ldi	r25, 0x00	; 0
    4b8c:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:511
        EEPROM_write_int(red_left_g, green);
    4b90:	60 91 6d 08 	lds	r22, 0x086D	; 0x80086d <green>
    4b94:	70 91 6e 08 	lds	r23, 0x086E	; 0x80086e <green+0x1>
    4b98:	86 e1       	ldi	r24, 0x16	; 22
    4b9a:	90 e0       	ldi	r25, 0x00	; 0
    4b9c:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:512
        EEPROM_write_int(red_left_b, blue);
    4ba0:	60 91 6b 08 	lds	r22, 0x086B	; 0x80086b <blue>
    4ba4:	70 91 6c 08 	lds	r23, 0x086C	; 0x80086c <blue+0x1>
    4ba8:	88 e1       	ldi	r24, 0x18	; 24
    4baa:	90 e0       	ldi	r25, 0x00	; 0
    4bac:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:513
        EEPROM_write_int(red_left_c, clear);
    4bb0:	60 91 69 08 	lds	r22, 0x0869	; 0x800869 <clear>
    4bb4:	70 91 6a 08 	lds	r23, 0x086A	; 0x80086a <clear+0x1>
    4bb8:	8a e1       	ldi	r24, 0x1A	; 26
    4bba:	90 e0       	ldi	r25, 0x00	; 0
    4bbc:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
main():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:514
        red_l_calibrated = 1;
    4bc0:	d1 e0       	ldi	r29, 0x01	; 1
    4bc2:	53 cf       	rjmp	.-346    	; 0x4a6a <main+0x14e8>
color_calib():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:413
    if (next_page == 0) {
      while (next_page == 0)
        ;
      page++;
      if (page > last_page)
        page = 1;
    4bc4:	70 92 04 01 	sts	0x0104, r7	; 0x800104 <color_calib()::page>
    4bc8:	62 cf       	rjmp	.-316    	; 0x4a8e <main+0x150c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:422
    if (previuse_page == 0) {
      while (previuse_page == 0)
        ;
      page--;
      if (page < 1)
        page = last_page;
    4bca:	60 92 04 01 	sts	0x0104, r6	; 0x800104 <color_calib()::page>
    4bce:	73 cf       	rjmp	.-282    	; 0x4ab6 <main+0x1534>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:454
      if (grn_r_calibrated == 1)
        lcd.print("done");

      lcd.setCursor(0, page - 1);
      lcd.print("-> ");
    } else if (page <= 8) {
    4bd0:	89 30       	cpi	r24, 0x09	; 9
    4bd2:	0c f0       	brlt	.+2      	; 0x4bd6 <main+0x1654>
    4bd4:	3f c0       	rjmp	.+126    	; 0x4c54 <main+0x16d2>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:455
      lcd.setCursor(3, 0);
    4bd6:	83 e0       	ldi	r24, 0x03	; 3
    4bd8:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:456
      lcd.print("BLUE left   ");
    4bdc:	82 eb       	ldi	r24, 0xB2	; 178
    4bde:	97 e0       	ldi	r25, 0x07	; 7
    4be0:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:457
      if (blu_l_calibrated == 1)
    4be4:	e1 e0       	ldi	r30, 0x01	; 1
    4be6:	ee 12       	cpse	r14, r30
    4be8:	04 c0       	rjmp	.+8      	; 0x4bf2 <main+0x1670>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:458
        lcd.print("done");
    4bea:	82 e8       	ldi	r24, 0x82	; 130
    4bec:	97 e0       	ldi	r25, 0x07	; 7
    4bee:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:460

      lcd.setCursor(3, 1);
    4bf2:	61 e0       	ldi	r22, 0x01	; 1
    4bf4:	83 e0       	ldi	r24, 0x03	; 3
    4bf6:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:461
      lcd.print("BLUE right  ");
    4bfa:	8f eb       	ldi	r24, 0xBF	; 191
    4bfc:	97 e0       	ldi	r25, 0x07	; 7
    4bfe:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:462
      if (blu_r_calibrated == 1)
    4c02:	f1 e0       	ldi	r31, 0x01	; 1
    4c04:	df 12       	cpse	r13, r31
    4c06:	04 c0       	rjmp	.+8      	; 0x4c10 <main+0x168e>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:463
        lcd.print("done");
    4c08:	82 e8       	ldi	r24, 0x82	; 130
    4c0a:	97 e0       	ldi	r25, 0x07	; 7
    4c0c:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:465

      lcd.setCursor(3, 2);
    4c10:	62 e0       	ldi	r22, 0x02	; 2
    4c12:	83 e0       	ldi	r24, 0x03	; 3
    4c14:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:466
      lcd.print("YELLOW left ");
    4c18:	8c ec       	ldi	r24, 0xCC	; 204
    4c1a:	97 e0       	ldi	r25, 0x07	; 7
    4c1c:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:467
      if (yel_l_calibrated == 1)
    4c20:	21 e0       	ldi	r18, 0x01	; 1
    4c22:	c2 12       	cpse	r12, r18
    4c24:	04 c0       	rjmp	.+8      	; 0x4c2e <main+0x16ac>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:468
        lcd.print("done");
    4c26:	82 e8       	ldi	r24, 0x82	; 130
    4c28:	97 e0       	ldi	r25, 0x07	; 7
    4c2a:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:470

      lcd.setCursor(3, 3);
    4c2e:	63 e0       	ldi	r22, 0x03	; 3
    4c30:	83 e0       	ldi	r24, 0x03	; 3
    4c32:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:471
      lcd.print("YELLOW right ");
    4c36:	89 ed       	ldi	r24, 0xD9	; 217
    4c38:	97 e0       	ldi	r25, 0x07	; 7
    4c3a:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:472
      if (yel_r_calibrated == 1)
    4c3e:	31 e0       	ldi	r19, 0x01	; 1
    4c40:	b3 12       	cpse	r11, r19
    4c42:	04 c0       	rjmp	.+8      	; 0x4c4c <main+0x16ca>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:473
        lcd.print("done");
    4c44:	82 e8       	ldi	r24, 0x82	; 130
    4c46:	97 e0       	ldi	r25, 0x07	; 7
    4c48:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:475

      lcd.setCursor(0, page - 5);
    4c4c:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <color_calib()::page>
    4c50:	65 50       	subi	r22, 0x05	; 5
    4c52:	81 cf       	rjmp	.-254    	; 0x4b56 <main+0x15d4>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:478
      lcd.print("-> ");
    } else {
      lcd.setCursor(3, 0);
    4c54:	83 e0       	ldi	r24, 0x03	; 3
    4c56:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:479
      lcd.print("SILVER left  ");
    4c5a:	87 ee       	ldi	r24, 0xE7	; 231
    4c5c:	97 e0       	ldi	r25, 0x07	; 7
    4c5e:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:480
      if (sil_l_calibrated == 1)
    4c62:	81 e0       	ldi	r24, 0x01	; 1
    4c64:	a8 12       	cpse	r10, r24
    4c66:	04 c0       	rjmp	.+8      	; 0x4c70 <main+0x16ee>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:481
        lcd.print("done");
    4c68:	82 e8       	ldi	r24, 0x82	; 130
    4c6a:	97 e0       	ldi	r25, 0x07	; 7
    4c6c:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:483

      lcd.setCursor(3, 1);
    4c70:	61 e0       	ldi	r22, 0x01	; 1
    4c72:	83 e0       	ldi	r24, 0x03	; 3
    4c74:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:484
      lcd.print("SILVER right ");
    4c78:	85 ef       	ldi	r24, 0xF5	; 245
    4c7a:	97 e0       	ldi	r25, 0x07	; 7
    4c7c:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:485
      if (sil_r_calibrated == 1)
    4c80:	91 e0       	ldi	r25, 0x01	; 1
    4c82:	99 12       	cpse	r9, r25
    4c84:	04 c0       	rjmp	.+8      	; 0x4c8e <main+0x170c>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:486
        lcd.print("done");
    4c86:	82 e8       	ldi	r24, 0x82	; 130
    4c88:	97 e0       	ldi	r25, 0x07	; 7
    4c8a:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:488

      lcd.setCursor(3, 2);
    4c8e:	62 e0       	ldi	r22, 0x02	; 2
    4c90:	83 e0       	ldi	r24, 0x03	; 3
    4c92:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:489
      lcd.print("Green Front ");
    4c96:	83 e0       	ldi	r24, 0x03	; 3
    4c98:	98 e0       	ldi	r25, 0x08	; 8
    4c9a:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:490
      if (grn_f_calibrated == 1)
    4c9e:	e1 e0       	ldi	r30, 0x01	; 1
    4ca0:	8e 12       	cpse	r8, r30
    4ca2:	04 c0       	rjmp	.+8      	; 0x4cac <main+0x172a>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:491
        lcd.print("done");
    4ca4:	82 e8       	ldi	r24, 0x82	; 130
    4ca6:	97 e0       	ldi	r25, 0x07	; 7
    4ca8:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:493

      lcd.setCursor(3, 3);
    4cac:	63 e0       	ldi	r22, 0x03	; 3
    4cae:	83 e0       	ldi	r24, 0x03	; 3
    4cb0:	0e 94 ed 05 	call	0xbda	; 0xbda <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.21]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:494
      lcd.print("Red Front");
    4cb4:	80 e1       	ldi	r24, 0x10	; 16
    4cb6:	98 e0       	ldi	r25, 0x08	; 8
    4cb8:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:495
      if (red_f_calibrated == 1)
    4cbc:	c1 30       	cpi	r28, 0x01	; 1
    4cbe:	21 f4       	brne	.+8      	; 0x4cc8 <main+0x1746>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:496
        lcd.print("done");
    4cc0:	82 e8       	ldi	r24, 0x82	; 130
    4cc2:	97 e0       	ldi	r25, 0x07	; 7
    4cc4:	0e 94 07 07 	call	0xe0e	; 0xe0e <Print::print(char const*) [clone .constprop.3]>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:498

      lcd.setCursor(0, page - 9);
    4cc8:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <color_calib()::page>
    4ccc:	69 50       	subi	r22, 0x09	; 9
    4cce:	43 cf       	rjmp	.-378    	; 0x4b56 <main+0x15d4>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:516
        EEPROM_write_int(red_left_g, green);
        EEPROM_write_int(red_left_b, blue);
        EEPROM_write_int(red_left_c, clear);
        red_l_calibrated = 1;
      }
    } else if (page == 2)  // red right
    4cd0:	82 30       	cpi	r24, 0x02	; 2
    4cd2:	59 f5       	brne	.+86     	; 0x4d2a <main+0x17a8>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:518
    {
      if (start == 0) {
    4cd4:	86 e0       	ldi	r24, 0x06	; 6
    4cd6:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    4cda:	89 2b       	or	r24, r25
    4cdc:	09 f0       	breq	.+2      	; 0x4ce0 <main+0x175e>
    4cde:	c5 ce       	rjmp	.-630    	; 0x4a6a <main+0x14e8>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:519
        color_R;
    4ce0:	82 e0       	ldi	r24, 0x02	; 2
    4ce2:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <color(char)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:520
        EEPROM_write_int(red_right_r, red);
    4ce6:	60 91 6f 08 	lds	r22, 0x086F	; 0x80086f <red>
    4cea:	70 91 70 08 	lds	r23, 0x0870	; 0x800870 <red+0x1>
    4cee:	8c e3       	ldi	r24, 0x3C	; 60
    4cf0:	90 e0       	ldi	r25, 0x00	; 0
    4cf2:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:521
        EEPROM_write_int(red_right_g, green);
    4cf6:	60 91 6d 08 	lds	r22, 0x086D	; 0x80086d <green>
    4cfa:	70 91 6e 08 	lds	r23, 0x086E	; 0x80086e <green+0x1>
    4cfe:	8e e3       	ldi	r24, 0x3E	; 62
    4d00:	90 e0       	ldi	r25, 0x00	; 0
    4d02:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:522
        EEPROM_write_int(red_right_b, blue);
    4d06:	60 91 6b 08 	lds	r22, 0x086B	; 0x80086b <blue>
    4d0a:	70 91 6c 08 	lds	r23, 0x086C	; 0x80086c <blue+0x1>
    4d0e:	80 e4       	ldi	r24, 0x40	; 64
    4d10:	90 e0       	ldi	r25, 0x00	; 0
    4d12:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:523
        EEPROM_write_int(red_right_c, clear);
    4d16:	60 91 69 08 	lds	r22, 0x0869	; 0x800869 <clear>
    4d1a:	70 91 6a 08 	lds	r23, 0x086A	; 0x80086a <clear+0x1>
    4d1e:	82 e4       	ldi	r24, 0x42	; 66
    4d20:	90 e0       	ldi	r25, 0x00	; 0
    4d22:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
main():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:524
        red_r_calibrated = 1;
    4d26:	11 e0       	ldi	r17, 0x01	; 1
    4d28:	a0 ce       	rjmp	.-704    	; 0x4a6a <main+0x14e8>
color_calib():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:528
      }
    }

    else if (page == 3)  // grn left
    4d2a:	83 30       	cpi	r24, 0x03	; 3
    4d2c:	59 f5       	brne	.+86     	; 0x4d84 <main+0x1802>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:530
    {
      if (start == 0) {
    4d2e:	86 e0       	ldi	r24, 0x06	; 6
    4d30:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    4d34:	89 2b       	or	r24, r25
    4d36:	09 f0       	breq	.+2      	; 0x4d3a <main+0x17b8>
    4d38:	98 ce       	rjmp	.-720    	; 0x4a6a <main+0x14e8>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:531
        color_L;
    4d3a:	81 e0       	ldi	r24, 0x01	; 1
    4d3c:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <color(char)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:532
        EEPROM_write_int(green_left_r, red);
    4d40:	60 91 6f 08 	lds	r22, 0x086F	; 0x80086f <red>
    4d44:	70 91 70 08 	lds	r23, 0x0870	; 0x800870 <red+0x1>
    4d48:	8c e1       	ldi	r24, 0x1C	; 28
    4d4a:	90 e0       	ldi	r25, 0x00	; 0
    4d4c:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:533
        EEPROM_write_int(green_left_g, green);
    4d50:	60 91 6d 08 	lds	r22, 0x086D	; 0x80086d <green>
    4d54:	70 91 6e 08 	lds	r23, 0x086E	; 0x80086e <green+0x1>
    4d58:	8e e1       	ldi	r24, 0x1E	; 30
    4d5a:	90 e0       	ldi	r25, 0x00	; 0
    4d5c:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:534
        EEPROM_write_int(green_left_b, blue);
    4d60:	60 91 6b 08 	lds	r22, 0x086B	; 0x80086b <blue>
    4d64:	70 91 6c 08 	lds	r23, 0x086C	; 0x80086c <blue+0x1>
    4d68:	80 e2       	ldi	r24, 0x20	; 32
    4d6a:	90 e0       	ldi	r25, 0x00	; 0
    4d6c:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:535
        EEPROM_write_int(green_left_c, clear);
    4d70:	60 91 69 08 	lds	r22, 0x0869	; 0x800869 <clear>
    4d74:	70 91 6a 08 	lds	r23, 0x086A	; 0x80086a <clear+0x1>
    4d78:	82 e2       	ldi	r24, 0x22	; 34
    4d7a:	90 e0       	ldi	r25, 0x00	; 0
    4d7c:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
main():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:536
        grn_l_calibrated = 1;
    4d80:	01 e0       	ldi	r16, 0x01	; 1
    4d82:	73 ce       	rjmp	.-794    	; 0x4a6a <main+0x14e8>
color_calib():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:538
      }
    } else if (page == 4)  // grn right
    4d84:	84 30       	cpi	r24, 0x04	; 4
    4d86:	61 f5       	brne	.+88     	; 0x4de0 <main+0x185e>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:540
    {
      if (start == 0) {
    4d88:	86 e0       	ldi	r24, 0x06	; 6
    4d8a:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    4d8e:	89 2b       	or	r24, r25
    4d90:	09 f0       	breq	.+2      	; 0x4d94 <main+0x1812>
    4d92:	6b ce       	rjmp	.-810    	; 0x4a6a <main+0x14e8>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:541
        color_R;
    4d94:	82 e0       	ldi	r24, 0x02	; 2
    4d96:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <color(char)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:542
        EEPROM_write_int(green_right_r, red);
    4d9a:	60 91 6f 08 	lds	r22, 0x086F	; 0x80086f <red>
    4d9e:	70 91 70 08 	lds	r23, 0x0870	; 0x800870 <red+0x1>
    4da2:	84 e4       	ldi	r24, 0x44	; 68
    4da4:	90 e0       	ldi	r25, 0x00	; 0
    4da6:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:543
        EEPROM_write_int(green_right_g, green);
    4daa:	60 91 6d 08 	lds	r22, 0x086D	; 0x80086d <green>
    4dae:	70 91 6e 08 	lds	r23, 0x086E	; 0x80086e <green+0x1>
    4db2:	86 e4       	ldi	r24, 0x46	; 70
    4db4:	90 e0       	ldi	r25, 0x00	; 0
    4db6:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:544
        EEPROM_write_int(green_right_b, blue);
    4dba:	60 91 6b 08 	lds	r22, 0x086B	; 0x80086b <blue>
    4dbe:	70 91 6c 08 	lds	r23, 0x086C	; 0x80086c <blue+0x1>
    4dc2:	88 e4       	ldi	r24, 0x48	; 72
    4dc4:	90 e0       	ldi	r25, 0x00	; 0
    4dc6:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:545
        EEPROM_write_int(green_right_c, clear);
    4dca:	60 91 69 08 	lds	r22, 0x0869	; 0x800869 <clear>
    4dce:	70 91 6a 08 	lds	r23, 0x086A	; 0x80086a <clear+0x1>
    4dd2:	8a e4       	ldi	r24, 0x4A	; 74
    4dd4:	90 e0       	ldi	r25, 0x00	; 0
    4dd6:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
main():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:546
        grn_r_calibrated = 1;
    4dda:	ff 24       	eor	r15, r15
    4ddc:	f3 94       	inc	r15
    4dde:	45 ce       	rjmp	.-886    	; 0x4a6a <main+0x14e8>
color_calib():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:550
      }
    }

    else if (page == 5)  // blu left
    4de0:	85 30       	cpi	r24, 0x05	; 5
    4de2:	61 f5       	brne	.+88     	; 0x4e3c <main+0x18ba>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:552
    {
      if (start == 0) {
    4de4:	86 e0       	ldi	r24, 0x06	; 6
    4de6:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    4dea:	89 2b       	or	r24, r25
    4dec:	09 f0       	breq	.+2      	; 0x4df0 <main+0x186e>
    4dee:	3d ce       	rjmp	.-902    	; 0x4a6a <main+0x14e8>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:553
        color_L;
    4df0:	81 e0       	ldi	r24, 0x01	; 1
    4df2:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <color(char)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:554
        EEPROM_write_int(blue_left_r, red);
    4df6:	60 91 6f 08 	lds	r22, 0x086F	; 0x80086f <red>
    4dfa:	70 91 70 08 	lds	r23, 0x0870	; 0x800870 <red+0x1>
    4dfe:	84 e2       	ldi	r24, 0x24	; 36
    4e00:	90 e0       	ldi	r25, 0x00	; 0
    4e02:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:555
        EEPROM_write_int(blue_left_g, green);
    4e06:	60 91 6d 08 	lds	r22, 0x086D	; 0x80086d <green>
    4e0a:	70 91 6e 08 	lds	r23, 0x086E	; 0x80086e <green+0x1>
    4e0e:	86 e2       	ldi	r24, 0x26	; 38
    4e10:	90 e0       	ldi	r25, 0x00	; 0
    4e12:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:556
        EEPROM_write_int(blue_left_b, blue);
    4e16:	60 91 6b 08 	lds	r22, 0x086B	; 0x80086b <blue>
    4e1a:	70 91 6c 08 	lds	r23, 0x086C	; 0x80086c <blue+0x1>
    4e1e:	88 e2       	ldi	r24, 0x28	; 40
    4e20:	90 e0       	ldi	r25, 0x00	; 0
    4e22:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:557
        EEPROM_write_int(blue_left_c, clear);
    4e26:	60 91 69 08 	lds	r22, 0x0869	; 0x800869 <clear>
    4e2a:	70 91 6a 08 	lds	r23, 0x086A	; 0x80086a <clear+0x1>
    4e2e:	8a e2       	ldi	r24, 0x2A	; 42
    4e30:	90 e0       	ldi	r25, 0x00	; 0
    4e32:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
main():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:558
        blu_l_calibrated = 1;
    4e36:	ee 24       	eor	r14, r14
    4e38:	e3 94       	inc	r14
    4e3a:	17 ce       	rjmp	.-978    	; 0x4a6a <main+0x14e8>
color_calib():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:560
      }
    } else if (page == 6)  // blu right
    4e3c:	86 30       	cpi	r24, 0x06	; 6
    4e3e:	59 f5       	brne	.+86     	; 0x4e96 <main+0x1914>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:562
    {
      if (start == 0) {
    4e40:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    4e44:	89 2b       	or	r24, r25
    4e46:	09 f0       	breq	.+2      	; 0x4e4a <main+0x18c8>
    4e48:	10 ce       	rjmp	.-992    	; 0x4a6a <main+0x14e8>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:563
        color_R;
    4e4a:	82 e0       	ldi	r24, 0x02	; 2
    4e4c:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <color(char)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:564
        EEPROM_write_int(blue_right_r, red);
    4e50:	60 91 6f 08 	lds	r22, 0x086F	; 0x80086f <red>
    4e54:	70 91 70 08 	lds	r23, 0x0870	; 0x800870 <red+0x1>
    4e58:	8c e4       	ldi	r24, 0x4C	; 76
    4e5a:	90 e0       	ldi	r25, 0x00	; 0
    4e5c:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:565
        EEPROM_write_int(blue_right_g, green);
    4e60:	60 91 6d 08 	lds	r22, 0x086D	; 0x80086d <green>
    4e64:	70 91 6e 08 	lds	r23, 0x086E	; 0x80086e <green+0x1>
    4e68:	8e e4       	ldi	r24, 0x4E	; 78
    4e6a:	90 e0       	ldi	r25, 0x00	; 0
    4e6c:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:566
        EEPROM_write_int(blue_right_b, blue);
    4e70:	60 91 6b 08 	lds	r22, 0x086B	; 0x80086b <blue>
    4e74:	70 91 6c 08 	lds	r23, 0x086C	; 0x80086c <blue+0x1>
    4e78:	80 e5       	ldi	r24, 0x50	; 80
    4e7a:	90 e0       	ldi	r25, 0x00	; 0
    4e7c:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:567
        EEPROM_write_int(blue_right_c, clear);
    4e80:	60 91 69 08 	lds	r22, 0x0869	; 0x800869 <clear>
    4e84:	70 91 6a 08 	lds	r23, 0x086A	; 0x80086a <clear+0x1>
    4e88:	82 e5       	ldi	r24, 0x52	; 82
    4e8a:	90 e0       	ldi	r25, 0x00	; 0
    4e8c:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
main():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:568
        blu_r_calibrated = 1;
    4e90:	dd 24       	eor	r13, r13
    4e92:	d3 94       	inc	r13
    4e94:	ea cd       	rjmp	.-1068   	; 0x4a6a <main+0x14e8>
color_calib():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:572
      }
    }

    else if (page == 7)  // yelow left
    4e96:	87 30       	cpi	r24, 0x07	; 7
    4e98:	61 f5       	brne	.+88     	; 0x4ef2 <main+0x1970>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:574
    {
      if (start == 0) {
    4e9a:	86 e0       	ldi	r24, 0x06	; 6
    4e9c:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    4ea0:	89 2b       	or	r24, r25
    4ea2:	09 f0       	breq	.+2      	; 0x4ea6 <main+0x1924>
    4ea4:	e2 cd       	rjmp	.-1084   	; 0x4a6a <main+0x14e8>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:575
        color_L;
    4ea6:	81 e0       	ldi	r24, 0x01	; 1
    4ea8:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <color(char)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:576
        EEPROM_write_int(yellow_left_r, red);
    4eac:	60 91 6f 08 	lds	r22, 0x086F	; 0x80086f <red>
    4eb0:	70 91 70 08 	lds	r23, 0x0870	; 0x800870 <red+0x1>
    4eb4:	8c e2       	ldi	r24, 0x2C	; 44
    4eb6:	90 e0       	ldi	r25, 0x00	; 0
    4eb8:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:577
        EEPROM_write_int(yellow_left_g, green);
    4ebc:	60 91 6d 08 	lds	r22, 0x086D	; 0x80086d <green>
    4ec0:	70 91 6e 08 	lds	r23, 0x086E	; 0x80086e <green+0x1>
    4ec4:	8e e2       	ldi	r24, 0x2E	; 46
    4ec6:	90 e0       	ldi	r25, 0x00	; 0
    4ec8:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:578
        EEPROM_write_int(yellow_left_b, blue);
    4ecc:	60 91 6b 08 	lds	r22, 0x086B	; 0x80086b <blue>
    4ed0:	70 91 6c 08 	lds	r23, 0x086C	; 0x80086c <blue+0x1>
    4ed4:	80 e3       	ldi	r24, 0x30	; 48
    4ed6:	90 e0       	ldi	r25, 0x00	; 0
    4ed8:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:579
        EEPROM_write_int(yellow_left_c, clear);
    4edc:	60 91 69 08 	lds	r22, 0x0869	; 0x800869 <clear>
    4ee0:	70 91 6a 08 	lds	r23, 0x086A	; 0x80086a <clear+0x1>
    4ee4:	82 e3       	ldi	r24, 0x32	; 50
    4ee6:	90 e0       	ldi	r25, 0x00	; 0
    4ee8:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
main():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:580
        yel_l_calibrated = 1;
    4eec:	cc 24       	eor	r12, r12
    4eee:	c3 94       	inc	r12
    4ef0:	bc cd       	rjmp	.-1160   	; 0x4a6a <main+0x14e8>
color_calib():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:582
      }
    } else if (page == 8)  // yelow right
    4ef2:	88 30       	cpi	r24, 0x08	; 8
    4ef4:	61 f5       	brne	.+88     	; 0x4f4e <main+0x19cc>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:584
    {
      if (start == 0) {
    4ef6:	86 e0       	ldi	r24, 0x06	; 6
    4ef8:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    4efc:	89 2b       	or	r24, r25
    4efe:	09 f0       	breq	.+2      	; 0x4f02 <main+0x1980>
    4f00:	b4 cd       	rjmp	.-1176   	; 0x4a6a <main+0x14e8>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:585
        color_R;
    4f02:	82 e0       	ldi	r24, 0x02	; 2
    4f04:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <color(char)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:586
        EEPROM_write_int(yellow_right_r, red);
    4f08:	60 91 6f 08 	lds	r22, 0x086F	; 0x80086f <red>
    4f0c:	70 91 70 08 	lds	r23, 0x0870	; 0x800870 <red+0x1>
    4f10:	84 e5       	ldi	r24, 0x54	; 84
    4f12:	90 e0       	ldi	r25, 0x00	; 0
    4f14:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:587
        EEPROM_write_int(yellow_right_g, green);
    4f18:	60 91 6d 08 	lds	r22, 0x086D	; 0x80086d <green>
    4f1c:	70 91 6e 08 	lds	r23, 0x086E	; 0x80086e <green+0x1>
    4f20:	86 e5       	ldi	r24, 0x56	; 86
    4f22:	90 e0       	ldi	r25, 0x00	; 0
    4f24:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:588
        EEPROM_write_int(yellow_right_b, blue);
    4f28:	60 91 6b 08 	lds	r22, 0x086B	; 0x80086b <blue>
    4f2c:	70 91 6c 08 	lds	r23, 0x086C	; 0x80086c <blue+0x1>
    4f30:	88 e5       	ldi	r24, 0x58	; 88
    4f32:	90 e0       	ldi	r25, 0x00	; 0
    4f34:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:589
        EEPROM_write_int(yellow_right_c, clear);
    4f38:	60 91 69 08 	lds	r22, 0x0869	; 0x800869 <clear>
    4f3c:	70 91 6a 08 	lds	r23, 0x086A	; 0x80086a <clear+0x1>
    4f40:	8a e5       	ldi	r24, 0x5A	; 90
    4f42:	90 e0       	ldi	r25, 0x00	; 0
    4f44:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
main():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:590
        yel_r_calibrated = 1;
    4f48:	bb 24       	eor	r11, r11
    4f4a:	b3 94       	inc	r11
    4f4c:	8e cd       	rjmp	.-1252   	; 0x4a6a <main+0x14e8>
color_calib():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:594
      }
    }

    else if (page == 9)  // sil left
    4f4e:	89 30       	cpi	r24, 0x09	; 9
    4f50:	61 f5       	brne	.+88     	; 0x4faa <main+0x1a28>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:596
    {
      if (start == 0) {
    4f52:	86 e0       	ldi	r24, 0x06	; 6
    4f54:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    4f58:	89 2b       	or	r24, r25
    4f5a:	09 f0       	breq	.+2      	; 0x4f5e <main+0x19dc>
    4f5c:	86 cd       	rjmp	.-1268   	; 0x4a6a <main+0x14e8>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:597
        color_L;
    4f5e:	81 e0       	ldi	r24, 0x01	; 1
    4f60:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <color(char)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:598
        EEPROM_write_int(silver_left_r, red);
    4f64:	60 91 6f 08 	lds	r22, 0x086F	; 0x80086f <red>
    4f68:	70 91 70 08 	lds	r23, 0x0870	; 0x800870 <red+0x1>
    4f6c:	84 e3       	ldi	r24, 0x34	; 52
    4f6e:	90 e0       	ldi	r25, 0x00	; 0
    4f70:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:599
        EEPROM_write_int(silver_left_g, green);
    4f74:	60 91 6d 08 	lds	r22, 0x086D	; 0x80086d <green>
    4f78:	70 91 6e 08 	lds	r23, 0x086E	; 0x80086e <green+0x1>
    4f7c:	86 e3       	ldi	r24, 0x36	; 54
    4f7e:	90 e0       	ldi	r25, 0x00	; 0
    4f80:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:600
        EEPROM_write_int(silver_left_b, blue);
    4f84:	60 91 6b 08 	lds	r22, 0x086B	; 0x80086b <blue>
    4f88:	70 91 6c 08 	lds	r23, 0x086C	; 0x80086c <blue+0x1>
    4f8c:	88 e3       	ldi	r24, 0x38	; 56
    4f8e:	90 e0       	ldi	r25, 0x00	; 0
    4f90:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:601
        EEPROM_write_int(silver_left_c, clear);
    4f94:	60 91 69 08 	lds	r22, 0x0869	; 0x800869 <clear>
    4f98:	70 91 6a 08 	lds	r23, 0x086A	; 0x80086a <clear+0x1>
    4f9c:	8a e3       	ldi	r24, 0x3A	; 58
    4f9e:	90 e0       	ldi	r25, 0x00	; 0
    4fa0:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
main():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:602
        sil_l_calibrated = 1;
    4fa4:	aa 24       	eor	r10, r10
    4fa6:	a3 94       	inc	r10
    4fa8:	60 cd       	rjmp	.-1344   	; 0x4a6a <main+0x14e8>
color_calib():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:604
      }
    } else if (page == 10)  // sil right
    4faa:	8a 30       	cpi	r24, 0x0A	; 10
    4fac:	61 f5       	brne	.+88     	; 0x5006 <main+0x1a84>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:606
    {
      if (start == 0) {
    4fae:	86 e0       	ldi	r24, 0x06	; 6
    4fb0:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    4fb4:	89 2b       	or	r24, r25
    4fb6:	09 f0       	breq	.+2      	; 0x4fba <main+0x1a38>
    4fb8:	58 cd       	rjmp	.-1360   	; 0x4a6a <main+0x14e8>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:607
        color_R;
    4fba:	82 e0       	ldi	r24, 0x02	; 2
    4fbc:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <color(char)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:608
        EEPROM_write_int(silver_right_r, red);
    4fc0:	60 91 6f 08 	lds	r22, 0x086F	; 0x80086f <red>
    4fc4:	70 91 70 08 	lds	r23, 0x0870	; 0x800870 <red+0x1>
    4fc8:	8c e5       	ldi	r24, 0x5C	; 92
    4fca:	90 e0       	ldi	r25, 0x00	; 0
    4fcc:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:609
        EEPROM_write_int(silver_right_g, green);
    4fd0:	60 91 6d 08 	lds	r22, 0x086D	; 0x80086d <green>
    4fd4:	70 91 6e 08 	lds	r23, 0x086E	; 0x80086e <green+0x1>
    4fd8:	8e e5       	ldi	r24, 0x5E	; 94
    4fda:	90 e0       	ldi	r25, 0x00	; 0
    4fdc:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:610
        EEPROM_write_int(silver_right_b, blue);
    4fe0:	60 91 6b 08 	lds	r22, 0x086B	; 0x80086b <blue>
    4fe4:	70 91 6c 08 	lds	r23, 0x086C	; 0x80086c <blue+0x1>
    4fe8:	80 e6       	ldi	r24, 0x60	; 96
    4fea:	90 e0       	ldi	r25, 0x00	; 0
    4fec:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:611
        EEPROM_write_int(silver_right_c, clear);
    4ff0:	60 91 69 08 	lds	r22, 0x0869	; 0x800869 <clear>
    4ff4:	70 91 6a 08 	lds	r23, 0x086A	; 0x80086a <clear+0x1>
    4ff8:	82 e6       	ldi	r24, 0x62	; 98
    4ffa:	90 e0       	ldi	r25, 0x00	; 0
    4ffc:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
main():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:612
        sil_r_calibrated = 1;
    5000:	99 24       	eor	r9, r9
    5002:	93 94       	inc	r9
    5004:	32 cd       	rjmp	.-1436   	; 0x4a6a <main+0x14e8>
color_calib():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:614
      }
    }else if (page == 11)  // grn front
    5006:	8b 30       	cpi	r24, 0x0B	; 11
    5008:	61 f5       	brne	.+88     	; 0x5062 <main+0x1ae0>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:616
    {
      if (start == 0) {
    500a:	86 e0       	ldi	r24, 0x06	; 6
    500c:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    5010:	89 2b       	or	r24, r25
    5012:	09 f0       	breq	.+2      	; 0x5016 <main+0x1a94>
    5014:	2a cd       	rjmp	.-1452   	; 0x4a6a <main+0x14e8>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:617
        color_F;
    5016:	83 e0       	ldi	r24, 0x03	; 3
    5018:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <color(char)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:618
        EEPROM_write_int(green_front_r, red);
    501c:	60 91 6f 08 	lds	r22, 0x086F	; 0x80086f <red>
    5020:	70 91 70 08 	lds	r23, 0x0870	; 0x800870 <red+0x1>
    5024:	8c e6       	ldi	r24, 0x6C	; 108
    5026:	90 e0       	ldi	r25, 0x00	; 0
    5028:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:619
        EEPROM_write_int(green_front_g, green);
    502c:	60 91 6d 08 	lds	r22, 0x086D	; 0x80086d <green>
    5030:	70 91 6e 08 	lds	r23, 0x086E	; 0x80086e <green+0x1>
    5034:	8e e6       	ldi	r24, 0x6E	; 110
    5036:	90 e0       	ldi	r25, 0x00	; 0
    5038:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:620
        EEPROM_write_int(green_front_b, blue);
    503c:	60 91 6b 08 	lds	r22, 0x086B	; 0x80086b <blue>
    5040:	70 91 6c 08 	lds	r23, 0x086C	; 0x80086c <blue+0x1>
    5044:	80 e7       	ldi	r24, 0x70	; 112
    5046:	90 e0       	ldi	r25, 0x00	; 0
    5048:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:621
        EEPROM_write_int(green_front_c, clear);
    504c:	60 91 69 08 	lds	r22, 0x0869	; 0x800869 <clear>
    5050:	70 91 6a 08 	lds	r23, 0x086A	; 0x80086a <clear+0x1>
    5054:	82 e7       	ldi	r24, 0x72	; 114
    5056:	90 e0       	ldi	r25, 0x00	; 0
    5058:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
main():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:622
        grn_f_calibrated = 1;
    505c:	88 24       	eor	r8, r8
    505e:	83 94       	inc	r8
    5060:	04 cd       	rjmp	.-1528   	; 0x4a6a <main+0x14e8>
color_calib():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:624
      }
    }else if (page == 12)  // red front
    5062:	8c 30       	cpi	r24, 0x0C	; 12
    5064:	09 f0       	breq	.+2      	; 0x5068 <main+0x1ae6>
    5066:	01 cd       	rjmp	.-1534   	; 0x4a6a <main+0x14e8>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:626
    {
      if (start == 0) {
    5068:	86 e0       	ldi	r24, 0x06	; 6
    506a:	0e 94 32 01 	call	0x264	; 0x264 <digitalRead>
    506e:	89 2b       	or	r24, r25
    5070:	09 f0       	breq	.+2      	; 0x5074 <main+0x1af2>
    5072:	fb cc       	rjmp	.-1546   	; 0x4a6a <main+0x14e8>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:627
        color_F;
    5074:	83 e0       	ldi	r24, 0x03	; 3
    5076:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <color(char)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:628
        EEPROM_write_int(red_front_r, red);
    507a:	60 91 6f 08 	lds	r22, 0x086F	; 0x80086f <red>
    507e:	70 91 70 08 	lds	r23, 0x0870	; 0x800870 <red+0x1>
    5082:	84 e6       	ldi	r24, 0x64	; 100
    5084:	90 e0       	ldi	r25, 0x00	; 0
    5086:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:629
        EEPROM_write_int(red_front_g, green);
    508a:	60 91 6d 08 	lds	r22, 0x086D	; 0x80086d <green>
    508e:	70 91 6e 08 	lds	r23, 0x086E	; 0x80086e <green+0x1>
    5092:	86 e6       	ldi	r24, 0x66	; 102
    5094:	90 e0       	ldi	r25, 0x00	; 0
    5096:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:630
        EEPROM_write_int(red_front_b, blue);
    509a:	60 91 6b 08 	lds	r22, 0x086B	; 0x80086b <blue>
    509e:	70 91 6c 08 	lds	r23, 0x086C	; 0x80086c <blue+0x1>
    50a2:	88 e6       	ldi	r24, 0x68	; 104
    50a4:	90 e0       	ldi	r25, 0x00	; 0
    50a6:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:631
        EEPROM_write_int(red_front_c, clear);
    50aa:	60 91 69 08 	lds	r22, 0x0869	; 0x800869 <clear>
    50ae:	70 91 6a 08 	lds	r23, 0x086A	; 0x80086a <clear+0x1>
    50b2:	8a e6       	ldi	r24, 0x6A	; 106
    50b4:	90 e0       	ldi	r25, 0x00	; 0
    50b6:	0e 94 14 07 	call	0xe28	; 0xe28 <EEPROM_write_int(int, int)>
main():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:632
        red_f_calibrated = 1;
    50ba:	c1 e0       	ldi	r28, 0x01	; 1
    50bc:	d6 cc       	rjmp	.-1620   	; 0x4a6a <main+0x14e8>
move():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:1916
    case forward:
      cnt = 0;
      while (cnt / 100 < lenth) {
        go(speed, speed);
      }
      go(0, 0);
    50be:	70 e0       	ldi	r23, 0x00	; 0
    50c0:	60 e0       	ldi	r22, 0x00	; 0
    50c2:	90 e0       	ldi	r25, 0x00	; 0
    50c4:	80 e0       	ldi	r24, 0x00	; 0
    50c6:	0e 94 56 06 	call	0xcac	; 0xcac <go(int, int)>
linefollow():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:75
    }
  }
  */
}
void linefollow() {
if(SM==HIGH){
    50ca:	40 e0       	ldi	r20, 0x00	; 0
    50cc:	60 e0       	ldi	r22, 0x00	; 0
    50ce:	80 e0       	ldi	r24, 0x00	; 0
    50d0:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    50d4:	01 97       	sbiw	r24, 0x01	; 1
    50d6:	29 f4       	brne	.+10     	; 0x50e2 <main+0x1b60>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:76
go(255,255);
    50d8:	6f ef       	ldi	r22, 0xFF	; 255
    50da:	70 e0       	ldi	r23, 0x00	; 0
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:84
} else if(SR2==HIGH){
  go(255,85);
}else if(SR3==HIGH){
  go(255,-105);
}else if(SR4==HIGH){
  go(255,-175);
    50dc:	8f ef       	ldi	r24, 0xFF	; 255
    50de:	90 e0       	ldi	r25, 0x00	; 0
    50e0:	0b c0       	rjmp	.+22     	; 0x50f8 <main+0x1b76>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:77
  */
}
void linefollow() {
if(SM==HIGH){
go(255,255);
} else if(SR1==HIGH){
    50e2:	40 e0       	ldi	r20, 0x00	; 0
    50e4:	61 e0       	ldi	r22, 0x01	; 1
    50e6:	81 e0       	ldi	r24, 0x01	; 1
    50e8:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    50ec:	01 97       	sbiw	r24, 0x01	; 1
    50ee:	49 f4       	brne	.+18     	; 0x5102 <main+0x1b80>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:78
  go(220,120);
    50f0:	68 e7       	ldi	r22, 0x78	; 120
    50f2:	70 e0       	ldi	r23, 0x00	; 0
    50f4:	8c ed       	ldi	r24, 0xDC	; 220
    50f6:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:84
} else if(SR2==HIGH){
  go(255,85);
}else if(SR3==HIGH){
  go(255,-105);
}else if(SR4==HIGH){
  go(255,-175);
    50f8:	0e 94 56 06 	call	0xcac	; 0xcac <go(int, int)>
main():
C:\Users\14377\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/main.cpp:47
  
  setup();
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    50fc:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <serialEventRun()>
    5100:	e4 cf       	rjmp	.-56     	; 0x50ca <main+0x1b48>
linefollow():
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:79
void linefollow() {
if(SM==HIGH){
go(255,255);
} else if(SR1==HIGH){
  go(220,120);
} else if(SR2==HIGH){
    5102:	40 e0       	ldi	r20, 0x00	; 0
    5104:	61 e0       	ldi	r22, 0x01	; 1
    5106:	82 e0       	ldi	r24, 0x02	; 2
    5108:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:80
  go(255,85);
    510c:	65 e5       	ldi	r22, 0x55	; 85
    510e:	70 e0       	ldi	r23, 0x00	; 0
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:79
void linefollow() {
if(SM==HIGH){
go(255,255);
} else if(SR1==HIGH){
  go(220,120);
} else if(SR2==HIGH){
    5110:	01 97       	sbiw	r24, 0x01	; 1
    5112:	21 f3       	breq	.-56     	; 0x50dc <main+0x1b5a>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:81
  go(255,85);
}else if(SR3==HIGH){
    5114:	40 e0       	ldi	r20, 0x00	; 0
    5116:	61 e0       	ldi	r22, 0x01	; 1
    5118:	83 e0       	ldi	r24, 0x03	; 3
    511a:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:82
  go(255,-105);
    511e:	67 e9       	ldi	r22, 0x97	; 151
    5120:	7f ef       	ldi	r23, 0xFF	; 255
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:81
go(255,255);
} else if(SR1==HIGH){
  go(220,120);
} else if(SR2==HIGH){
  go(255,85);
}else if(SR3==HIGH){
    5122:	01 97       	sbiw	r24, 0x01	; 1
    5124:	d9 f2       	breq	.-74     	; 0x50dc <main+0x1b5a>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:83
  go(255,-105);
}else if(SR4==HIGH){
    5126:	40 e0       	ldi	r20, 0x00	; 0
    5128:	61 e0       	ldi	r22, 0x01	; 1
    512a:	84 e0       	ldi	r24, 0x04	; 4
    512c:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    5130:	01 97       	sbiw	r24, 0x01	; 1
    5132:	19 f4       	brne	.+6      	; 0x513a <main+0x1bb8>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:84
  go(255,-175);
    5134:	61 e5       	ldi	r22, 0x51	; 81
    5136:	7f ef       	ldi	r23, 0xFF	; 255
    5138:	d1 cf       	rjmp	.-94     	; 0x50dc <main+0x1b5a>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:85
}else if(SR5==HIGH){
    513a:	40 e0       	ldi	r20, 0x00	; 0
    513c:	61 e0       	ldi	r22, 0x01	; 1
    513e:	85 e0       	ldi	r24, 0x05	; 5
    5140:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    5144:	01 97       	sbiw	r24, 0x01	; 1
    5146:	19 f4       	brne	.+6      	; 0x514e <main+0x1bcc>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:86
  go(255,-255);
    5148:	61 e0       	ldi	r22, 0x01	; 1
    514a:	7f ef       	ldi	r23, 0xFF	; 255
    514c:	c7 cf       	rjmp	.-114    	; 0x50dc <main+0x1b5a>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:87
}else if(SR6==HIGH){
    514e:	40 e0       	ldi	r20, 0x00	; 0
    5150:	61 e0       	ldi	r22, 0x01	; 1
    5152:	86 e0       	ldi	r24, 0x06	; 6
    5154:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    5158:	01 97       	sbiw	r24, 0x01	; 1
    515a:	b1 f3       	breq	.-20     	; 0x5148 <main+0x1bc6>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:89
  go(255,-255);
}else if(SL1==HIGH){
    515c:	40 e0       	ldi	r20, 0x00	; 0
    515e:	60 e0       	ldi	r22, 0x00	; 0
    5160:	81 e0       	ldi	r24, 0x01	; 1
    5162:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    5166:	01 97       	sbiw	r24, 0x01	; 1
    5168:	29 f4       	brne	.+10     	; 0x5174 <main+0x1bf2>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:90
  go(155,255);
    516a:	6f ef       	ldi	r22, 0xFF	; 255
    516c:	70 e0       	ldi	r23, 0x00	; 0
    516e:	8b e9       	ldi	r24, 0x9B	; 155
    5170:	90 e0       	ldi	r25, 0x00	; 0
    5172:	c2 cf       	rjmp	.-124    	; 0x50f8 <main+0x1b76>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:91
} else if(SL2==HIGH){
    5174:	40 e0       	ldi	r20, 0x00	; 0
    5176:	60 e0       	ldi	r22, 0x00	; 0
    5178:	82 e0       	ldi	r24, 0x02	; 2
    517a:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    517e:	01 97       	sbiw	r24, 0x01	; 1
    5180:	29 f4       	brne	.+10     	; 0x518c <main+0x1c0a>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:92
  go(85,255);
    5182:	6f ef       	ldi	r22, 0xFF	; 255
    5184:	70 e0       	ldi	r23, 0x00	; 0
    5186:	85 e5       	ldi	r24, 0x55	; 85
    5188:	90 e0       	ldi	r25, 0x00	; 0
    518a:	b6 cf       	rjmp	.-148    	; 0x50f8 <main+0x1b76>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:93
}else if(SL3==HIGH){
    518c:	40 e0       	ldi	r20, 0x00	; 0
    518e:	60 e0       	ldi	r22, 0x00	; 0
    5190:	83 e0       	ldi	r24, 0x03	; 3
    5192:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    5196:	01 97       	sbiw	r24, 0x01	; 1
    5198:	29 f4       	brne	.+10     	; 0x51a4 <main+0x1c22>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:94
  go(-105,255);
    519a:	6f ef       	ldi	r22, 0xFF	; 255
    519c:	70 e0       	ldi	r23, 0x00	; 0
    519e:	87 e9       	ldi	r24, 0x97	; 151
    51a0:	9f ef       	ldi	r25, 0xFF	; 255
    51a2:	aa cf       	rjmp	.-172    	; 0x50f8 <main+0x1b76>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:95
}else if(SL4==HIGH){
    51a4:	40 e0       	ldi	r20, 0x00	; 0
    51a6:	60 e0       	ldi	r22, 0x00	; 0
    51a8:	84 e0       	ldi	r24, 0x04	; 4
    51aa:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    51ae:	01 97       	sbiw	r24, 0x01	; 1
    51b0:	29 f4       	brne	.+10     	; 0x51bc <main+0x1c3a>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:96
  go(-175,255);
    51b2:	6f ef       	ldi	r22, 0xFF	; 255
    51b4:	70 e0       	ldi	r23, 0x00	; 0
    51b6:	81 e5       	ldi	r24, 0x51	; 81
    51b8:	9f ef       	ldi	r25, 0xFF	; 255
    51ba:	9e cf       	rjmp	.-196    	; 0x50f8 <main+0x1b76>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:97
}else if(SL5==HIGH){
    51bc:	40 e0       	ldi	r20, 0x00	; 0
    51be:	60 e0       	ldi	r22, 0x00	; 0
    51c0:	85 e0       	ldi	r24, 0x05	; 5
    51c2:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    51c6:	01 97       	sbiw	r24, 0x01	; 1
    51c8:	29 f4       	brne	.+10     	; 0x51d4 <main+0x1c52>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:98
  go(-255,255);
    51ca:	6f ef       	ldi	r22, 0xFF	; 255
    51cc:	70 e0       	ldi	r23, 0x00	; 0
    51ce:	81 e0       	ldi	r24, 0x01	; 1
    51d0:	9f ef       	ldi	r25, 0xFF	; 255
    51d2:	92 cf       	rjmp	.-220    	; 0x50f8 <main+0x1b76>
C:\Users\14377\Desktop\Robots\Rescue Line\codes\refactored code Rescue\refactored code Rescue\sport_main_code_2023/sport_menu.h:99
}else if(SL6==HIGH){
    51d4:	40 e0       	ldi	r20, 0x00	; 0
    51d6:	60 e0       	ldi	r22, 0x00	; 0
    51d8:	86 e0       	ldi	r24, 0x06	; 6
    51da:	0e 94 09 06 	call	0xc12	; 0xc12 <read_sensor(char, char, char)>
    51de:	01 97       	sbiw	r24, 0x01	; 1
    51e0:	09 f0       	breq	.+2      	; 0x51e4 <main+0x1c62>
    51e2:	7a cf       	rjmp	.-268    	; 0x50d8 <main+0x1b56>
    51e4:	f2 cf       	rjmp	.-28     	; 0x51ca <main+0x1c48>

000051e6 <vfprintf>:
vfprintf():
    51e6:	2f 92       	push	r2
    51e8:	3f 92       	push	r3
    51ea:	4f 92       	push	r4
    51ec:	5f 92       	push	r5
    51ee:	6f 92       	push	r6
    51f0:	7f 92       	push	r7
    51f2:	8f 92       	push	r8
    51f4:	9f 92       	push	r9
    51f6:	af 92       	push	r10
    51f8:	bf 92       	push	r11
    51fa:	cf 92       	push	r12
    51fc:	df 92       	push	r13
    51fe:	ef 92       	push	r14
    5200:	ff 92       	push	r15
    5202:	0f 93       	push	r16
    5204:	1f 93       	push	r17
    5206:	cf 93       	push	r28
    5208:	df 93       	push	r29
    520a:	cd b7       	in	r28, 0x3d	; 61
    520c:	de b7       	in	r29, 0x3e	; 62
    520e:	2b 97       	sbiw	r28, 0x0b	; 11
    5210:	0f b6       	in	r0, 0x3f	; 63
    5212:	f8 94       	cli
    5214:	de bf       	out	0x3e, r29	; 62
    5216:	0f be       	out	0x3f, r0	; 63
    5218:	cd bf       	out	0x3d, r28	; 61
    521a:	7c 01       	movw	r14, r24
    521c:	3b 01       	movw	r6, r22
    521e:	8a 01       	movw	r16, r20
    5220:	fc 01       	movw	r30, r24
    5222:	17 82       	std	Z+7, r1	; 0x07
    5224:	16 82       	std	Z+6, r1	; 0x06
    5226:	83 81       	ldd	r24, Z+3	; 0x03
    5228:	81 ff       	sbrs	r24, 1
    522a:	dd c1       	rjmp	.+954    	; 0x55e6 <vfprintf+0x400>
    522c:	ce 01       	movw	r24, r28
    522e:	01 96       	adiw	r24, 0x01	; 1
    5230:	5c 01       	movw	r10, r24
    5232:	f7 01       	movw	r30, r14
    5234:	93 81       	ldd	r25, Z+3	; 0x03
    5236:	f3 01       	movw	r30, r6
    5238:	93 fd       	sbrc	r25, 3
    523a:	85 91       	lpm	r24, Z+
    523c:	93 ff       	sbrs	r25, 3
    523e:	81 91       	ld	r24, Z+
    5240:	3f 01       	movw	r6, r30
    5242:	88 23       	and	r24, r24
    5244:	09 f4       	brne	.+2      	; 0x5248 <vfprintf+0x62>
    5246:	53 c1       	rjmp	.+678    	; 0x54ee <vfprintf+0x308>
    5248:	85 32       	cpi	r24, 0x25	; 37
    524a:	39 f4       	brne	.+14     	; 0x525a <vfprintf+0x74>
    524c:	93 fd       	sbrc	r25, 3
    524e:	85 91       	lpm	r24, Z+
    5250:	93 ff       	sbrs	r25, 3
    5252:	81 91       	ld	r24, Z+
    5254:	3f 01       	movw	r6, r30
    5256:	85 32       	cpi	r24, 0x25	; 37
    5258:	29 f4       	brne	.+10     	; 0x5264 <vfprintf+0x7e>
    525a:	b7 01       	movw	r22, r14
    525c:	90 e0       	ldi	r25, 0x00	; 0
    525e:	0e 94 0c 2b 	call	0x5618	; 0x5618 <fputc>
    5262:	e7 cf       	rjmp	.-50     	; 0x5232 <vfprintf+0x4c>
    5264:	91 2c       	mov	r9, r1
    5266:	21 2c       	mov	r2, r1
    5268:	31 2c       	mov	r3, r1
    526a:	ff e1       	ldi	r31, 0x1F	; 31
    526c:	f3 15       	cp	r31, r3
    526e:	38 f0       	brcs	.+14     	; 0x527e <vfprintf+0x98>
    5270:	8b 32       	cpi	r24, 0x2B	; 43
    5272:	11 f1       	breq	.+68     	; 0x52b8 <vfprintf+0xd2>
    5274:	90 f4       	brcc	.+36     	; 0x529a <vfprintf+0xb4>
    5276:	80 32       	cpi	r24, 0x20	; 32
    5278:	09 f1       	breq	.+66     	; 0x52bc <vfprintf+0xd6>
    527a:	83 32       	cpi	r24, 0x23	; 35
    527c:	29 f1       	breq	.+74     	; 0x52c8 <vfprintf+0xe2>
    527e:	37 fc       	sbrc	r3, 7
    5280:	3c c0       	rjmp	.+120    	; 0x52fa <vfprintf+0x114>
    5282:	20 ed       	ldi	r18, 0xD0	; 208
    5284:	28 0f       	add	r18, r24
    5286:	2a 30       	cpi	r18, 0x0A	; 10
    5288:	50 f5       	brcc	.+84     	; 0x52de <vfprintf+0xf8>
    528a:	36 fe       	sbrs	r3, 6
    528c:	20 c0       	rjmp	.+64     	; 0x52ce <vfprintf+0xe8>
    528e:	8a e0       	ldi	r24, 0x0A	; 10
    5290:	98 9e       	mul	r9, r24
    5292:	20 0d       	add	r18, r0
    5294:	11 24       	eor	r1, r1
    5296:	92 2e       	mov	r9, r18
    5298:	06 c0       	rjmp	.+12     	; 0x52a6 <vfprintf+0xc0>
    529a:	8d 32       	cpi	r24, 0x2D	; 45
    529c:	91 f0       	breq	.+36     	; 0x52c2 <vfprintf+0xdc>
    529e:	80 33       	cpi	r24, 0x30	; 48
    52a0:	71 f7       	brne	.-36     	; 0x527e <vfprintf+0x98>
    52a2:	68 94       	set
    52a4:	30 f8       	bld	r3, 0
    52a6:	f3 01       	movw	r30, r6
    52a8:	93 fd       	sbrc	r25, 3
    52aa:	85 91       	lpm	r24, Z+
    52ac:	93 ff       	sbrs	r25, 3
    52ae:	81 91       	ld	r24, Z+
    52b0:	3f 01       	movw	r6, r30
    52b2:	81 11       	cpse	r24, r1
    52b4:	da cf       	rjmp	.-76     	; 0x526a <vfprintf+0x84>
    52b6:	21 c0       	rjmp	.+66     	; 0x52fa <vfprintf+0x114>
    52b8:	68 94       	set
    52ba:	31 f8       	bld	r3, 1
    52bc:	68 94       	set
    52be:	32 f8       	bld	r3, 2
    52c0:	f2 cf       	rjmp	.-28     	; 0x52a6 <vfprintf+0xc0>
    52c2:	68 94       	set
    52c4:	33 f8       	bld	r3, 3
    52c6:	ef cf       	rjmp	.-34     	; 0x52a6 <vfprintf+0xc0>
    52c8:	68 94       	set
    52ca:	34 f8       	bld	r3, 4
    52cc:	ec cf       	rjmp	.-40     	; 0x52a6 <vfprintf+0xc0>
    52ce:	ea e0       	ldi	r30, 0x0A	; 10
    52d0:	2e 9e       	mul	r2, r30
    52d2:	20 0d       	add	r18, r0
    52d4:	11 24       	eor	r1, r1
    52d6:	22 2e       	mov	r2, r18
    52d8:	68 94       	set
    52da:	35 f8       	bld	r3, 5
    52dc:	e4 cf       	rjmp	.-56     	; 0x52a6 <vfprintf+0xc0>
    52de:	8e 32       	cpi	r24, 0x2E	; 46
    52e0:	29 f4       	brne	.+10     	; 0x52ec <vfprintf+0x106>
    52e2:	36 fc       	sbrc	r3, 6
    52e4:	04 c1       	rjmp	.+520    	; 0x54ee <vfprintf+0x308>
    52e6:	68 94       	set
    52e8:	36 f8       	bld	r3, 6
    52ea:	dd cf       	rjmp	.-70     	; 0x52a6 <vfprintf+0xc0>
    52ec:	8c 36       	cpi	r24, 0x6C	; 108
    52ee:	19 f4       	brne	.+6      	; 0x52f6 <vfprintf+0x110>
    52f0:	68 94       	set
    52f2:	37 f8       	bld	r3, 7
    52f4:	d8 cf       	rjmp	.-80     	; 0x52a6 <vfprintf+0xc0>
    52f6:	88 36       	cpi	r24, 0x68	; 104
    52f8:	b1 f2       	breq	.-84     	; 0x52a6 <vfprintf+0xc0>
    52fa:	98 2f       	mov	r25, r24
    52fc:	9f 7d       	andi	r25, 0xDF	; 223
    52fe:	95 54       	subi	r25, 0x45	; 69
    5300:	93 30       	cpi	r25, 0x03	; 3
    5302:	e0 f0       	brcs	.+56     	; 0x533c <vfprintf+0x156>
    5304:	83 36       	cpi	r24, 0x63	; 99
    5306:	a1 f1       	breq	.+104    	; 0x5370 <vfprintf+0x18a>
    5308:	83 37       	cpi	r24, 0x73	; 115
    530a:	c1 f1       	breq	.+112    	; 0x537c <vfprintf+0x196>
    530c:	83 35       	cpi	r24, 0x53	; 83
    530e:	09 f0       	breq	.+2      	; 0x5312 <vfprintf+0x12c>
    5310:	63 c0       	rjmp	.+198    	; 0x53d8 <vfprintf+0x1f2>
    5312:	28 01       	movw	r4, r16
    5314:	f2 e0       	ldi	r31, 0x02	; 2
    5316:	4f 0e       	add	r4, r31
    5318:	51 1c       	adc	r5, r1
    531a:	f8 01       	movw	r30, r16
    531c:	c0 80       	ld	r12, Z
    531e:	d1 80       	ldd	r13, Z+1	; 0x01
    5320:	69 2d       	mov	r22, r9
    5322:	70 e0       	ldi	r23, 0x00	; 0
    5324:	36 fc       	sbrc	r3, 6
    5326:	02 c0       	rjmp	.+4      	; 0x532c <vfprintf+0x146>
    5328:	6f ef       	ldi	r22, 0xFF	; 255
    532a:	7f ef       	ldi	r23, 0xFF	; 255
    532c:	c6 01       	movw	r24, r12
    532e:	0e 94 f6 2a 	call	0x55ec	; 0x55ec <strnlen_P>
    5332:	4c 01       	movw	r8, r24
    5334:	68 94       	set
    5336:	37 f8       	bld	r3, 7
    5338:	82 01       	movw	r16, r4
    533a:	0a c0       	rjmp	.+20     	; 0x5350 <vfprintf+0x16a>
    533c:	0c 5f       	subi	r16, 0xFC	; 252
    533e:	1f 4f       	sbci	r17, 0xFF	; 255
    5340:	ff e3       	ldi	r31, 0x3F	; 63
    5342:	f9 83       	std	Y+1, r31	; 0x01
    5344:	88 24       	eor	r8, r8
    5346:	83 94       	inc	r8
    5348:	91 2c       	mov	r9, r1
    534a:	65 01       	movw	r12, r10
    534c:	e8 94       	clt
    534e:	37 f8       	bld	r3, 7
    5350:	33 fe       	sbrs	r3, 3
    5352:	2d c0       	rjmp	.+90     	; 0x53ae <vfprintf+0x1c8>
    5354:	52 2c       	mov	r5, r2
    5356:	81 14       	cp	r8, r1
    5358:	91 04       	cpc	r9, r1
    535a:	71 f5       	brne	.+92     	; 0x53b8 <vfprintf+0x1d2>
    535c:	55 20       	and	r5, r5
    535e:	09 f4       	brne	.+2      	; 0x5362 <vfprintf+0x17c>
    5360:	68 cf       	rjmp	.-304    	; 0x5232 <vfprintf+0x4c>
    5362:	b7 01       	movw	r22, r14
    5364:	80 e2       	ldi	r24, 0x20	; 32
    5366:	90 e0       	ldi	r25, 0x00	; 0
    5368:	0e 94 0c 2b 	call	0x5618	; 0x5618 <fputc>
    536c:	5a 94       	dec	r5
    536e:	f6 cf       	rjmp	.-20     	; 0x535c <vfprintf+0x176>
    5370:	f8 01       	movw	r30, r16
    5372:	80 81       	ld	r24, Z
    5374:	89 83       	std	Y+1, r24	; 0x01
    5376:	0e 5f       	subi	r16, 0xFE	; 254
    5378:	1f 4f       	sbci	r17, 0xFF	; 255
    537a:	e4 cf       	rjmp	.-56     	; 0x5344 <vfprintf+0x15e>
    537c:	28 01       	movw	r4, r16
    537e:	f2 e0       	ldi	r31, 0x02	; 2
    5380:	4f 0e       	add	r4, r31
    5382:	51 1c       	adc	r5, r1
    5384:	f8 01       	movw	r30, r16
    5386:	c0 80       	ld	r12, Z
    5388:	d1 80       	ldd	r13, Z+1	; 0x01
    538a:	69 2d       	mov	r22, r9
    538c:	70 e0       	ldi	r23, 0x00	; 0
    538e:	36 fc       	sbrc	r3, 6
    5390:	02 c0       	rjmp	.+4      	; 0x5396 <vfprintf+0x1b0>
    5392:	6f ef       	ldi	r22, 0xFF	; 255
    5394:	7f ef       	ldi	r23, 0xFF	; 255
    5396:	c6 01       	movw	r24, r12
    5398:	0e 94 01 2b 	call	0x5602	; 0x5602 <strnlen>
    539c:	4c 01       	movw	r8, r24
    539e:	82 01       	movw	r16, r4
    53a0:	d5 cf       	rjmp	.-86     	; 0x534c <vfprintf+0x166>
    53a2:	b7 01       	movw	r22, r14
    53a4:	80 e2       	ldi	r24, 0x20	; 32
    53a6:	90 e0       	ldi	r25, 0x00	; 0
    53a8:	0e 94 0c 2b 	call	0x5618	; 0x5618 <fputc>
    53ac:	2a 94       	dec	r2
    53ae:	28 14       	cp	r2, r8
    53b0:	19 04       	cpc	r1, r9
    53b2:	09 f0       	breq	.+2      	; 0x53b6 <vfprintf+0x1d0>
    53b4:	b0 f7       	brcc	.-20     	; 0x53a2 <vfprintf+0x1bc>
    53b6:	ce cf       	rjmp	.-100    	; 0x5354 <vfprintf+0x16e>
    53b8:	f6 01       	movw	r30, r12
    53ba:	37 fc       	sbrc	r3, 7
    53bc:	85 91       	lpm	r24, Z+
    53be:	37 fe       	sbrs	r3, 7
    53c0:	81 91       	ld	r24, Z+
    53c2:	6f 01       	movw	r12, r30
    53c4:	b7 01       	movw	r22, r14
    53c6:	90 e0       	ldi	r25, 0x00	; 0
    53c8:	0e 94 0c 2b 	call	0x5618	; 0x5618 <fputc>
    53cc:	51 10       	cpse	r5, r1
    53ce:	5a 94       	dec	r5
    53d0:	f1 e0       	ldi	r31, 0x01	; 1
    53d2:	8f 1a       	sub	r8, r31
    53d4:	91 08       	sbc	r9, r1
    53d6:	bf cf       	rjmp	.-130    	; 0x5356 <vfprintf+0x170>
    53d8:	84 36       	cpi	r24, 0x64	; 100
    53da:	19 f0       	breq	.+6      	; 0x53e2 <vfprintf+0x1fc>
    53dc:	89 36       	cpi	r24, 0x69	; 105
    53de:	09 f0       	breq	.+2      	; 0x53e2 <vfprintf+0x1fc>
    53e0:	77 c0       	rjmp	.+238    	; 0x54d0 <vfprintf+0x2ea>
    53e2:	f8 01       	movw	r30, r16
    53e4:	37 fe       	sbrs	r3, 7
    53e6:	6b c0       	rjmp	.+214    	; 0x54be <vfprintf+0x2d8>
    53e8:	60 81       	ld	r22, Z
    53ea:	71 81       	ldd	r23, Z+1	; 0x01
    53ec:	82 81       	ldd	r24, Z+2	; 0x02
    53ee:	93 81       	ldd	r25, Z+3	; 0x03
    53f0:	0c 5f       	subi	r16, 0xFC	; 252
    53f2:	1f 4f       	sbci	r17, 0xFF	; 255
    53f4:	f3 2d       	mov	r31, r3
    53f6:	ff 76       	andi	r31, 0x6F	; 111
    53f8:	3f 2e       	mov	r3, r31
    53fa:	97 ff       	sbrs	r25, 7
    53fc:	09 c0       	rjmp	.+18     	; 0x5410 <vfprintf+0x22a>
    53fe:	90 95       	com	r25
    5400:	80 95       	com	r24
    5402:	70 95       	com	r23
    5404:	61 95       	neg	r22
    5406:	7f 4f       	sbci	r23, 0xFF	; 255
    5408:	8f 4f       	sbci	r24, 0xFF	; 255
    540a:	9f 4f       	sbci	r25, 0xFF	; 255
    540c:	68 94       	set
    540e:	37 f8       	bld	r3, 7
    5410:	2a e0       	ldi	r18, 0x0A	; 10
    5412:	30 e0       	ldi	r19, 0x00	; 0
    5414:	a5 01       	movw	r20, r10
    5416:	0e 94 3c 2b 	call	0x5678	; 0x5678 <__ultoa_invert>
    541a:	c8 2e       	mov	r12, r24
    541c:	ca 18       	sub	r12, r10
    541e:	8c 2c       	mov	r8, r12
    5420:	43 2c       	mov	r4, r3
    5422:	36 fe       	sbrs	r3, 6
    5424:	0c c0       	rjmp	.+24     	; 0x543e <vfprintf+0x258>
    5426:	e8 94       	clt
    5428:	40 f8       	bld	r4, 0
    542a:	c9 14       	cp	r12, r9
    542c:	40 f4       	brcc	.+16     	; 0x543e <vfprintf+0x258>
    542e:	34 fe       	sbrs	r3, 4
    5430:	05 c0       	rjmp	.+10     	; 0x543c <vfprintf+0x256>
    5432:	32 fc       	sbrc	r3, 2
    5434:	03 c0       	rjmp	.+6      	; 0x543c <vfprintf+0x256>
    5436:	f3 2d       	mov	r31, r3
    5438:	fe 7e       	andi	r31, 0xEE	; 238
    543a:	4f 2e       	mov	r4, r31
    543c:	89 2c       	mov	r8, r9
    543e:	44 fe       	sbrs	r4, 4
    5440:	aa c0       	rjmp	.+340    	; 0x5596 <vfprintf+0x3b0>
    5442:	fe 01       	movw	r30, r28
    5444:	ec 0d       	add	r30, r12
    5446:	f1 1d       	adc	r31, r1
    5448:	80 81       	ld	r24, Z
    544a:	80 33       	cpi	r24, 0x30	; 48
    544c:	09 f0       	breq	.+2      	; 0x5450 <vfprintf+0x26a>
    544e:	9c c0       	rjmp	.+312    	; 0x5588 <vfprintf+0x3a2>
    5450:	24 2d       	mov	r18, r4
    5452:	29 7e       	andi	r18, 0xE9	; 233
    5454:	42 2e       	mov	r4, r18
    5456:	84 2d       	mov	r24, r4
    5458:	88 70       	andi	r24, 0x08	; 8
    545a:	58 2e       	mov	r5, r24
    545c:	43 fc       	sbrc	r4, 3
    545e:	aa c0       	rjmp	.+340    	; 0x55b4 <vfprintf+0x3ce>
    5460:	40 fe       	sbrs	r4, 0
    5462:	a4 c0       	rjmp	.+328    	; 0x55ac <vfprintf+0x3c6>
    5464:	9c 2c       	mov	r9, r12
    5466:	82 14       	cp	r8, r2
    5468:	18 f4       	brcc	.+6      	; 0x5470 <vfprintf+0x28a>
    546a:	2c 0c       	add	r2, r12
    546c:	92 2c       	mov	r9, r2
    546e:	98 18       	sub	r9, r8
    5470:	44 fe       	sbrs	r4, 4
    5472:	a6 c0       	rjmp	.+332    	; 0x55c0 <vfprintf+0x3da>
    5474:	b7 01       	movw	r22, r14
    5476:	80 e3       	ldi	r24, 0x30	; 48
    5478:	90 e0       	ldi	r25, 0x00	; 0
    547a:	0e 94 0c 2b 	call	0x5618	; 0x5618 <fputc>
    547e:	42 fe       	sbrs	r4, 2
    5480:	09 c0       	rjmp	.+18     	; 0x5494 <vfprintf+0x2ae>
    5482:	88 e7       	ldi	r24, 0x78	; 120
    5484:	90 e0       	ldi	r25, 0x00	; 0
    5486:	41 fe       	sbrs	r4, 1
    5488:	02 c0       	rjmp	.+4      	; 0x548e <vfprintf+0x2a8>
    548a:	88 e5       	ldi	r24, 0x58	; 88
    548c:	90 e0       	ldi	r25, 0x00	; 0
    548e:	b7 01       	movw	r22, r14
    5490:	0e 94 0c 2b 	call	0x5618	; 0x5618 <fputc>
    5494:	c9 14       	cp	r12, r9
    5496:	08 f4       	brcc	.+2      	; 0x549a <vfprintf+0x2b4>
    5498:	9f c0       	rjmp	.+318    	; 0x55d8 <vfprintf+0x3f2>
    549a:	ca 94       	dec	r12
    549c:	d1 2c       	mov	r13, r1
    549e:	9f ef       	ldi	r25, 0xFF	; 255
    54a0:	c9 1a       	sub	r12, r25
    54a2:	d9 0a       	sbc	r13, r25
    54a4:	ca 0c       	add	r12, r10
    54a6:	db 1c       	adc	r13, r11
    54a8:	f6 01       	movw	r30, r12
    54aa:	82 91       	ld	r24, -Z
    54ac:	6f 01       	movw	r12, r30
    54ae:	b7 01       	movw	r22, r14
    54b0:	90 e0       	ldi	r25, 0x00	; 0
    54b2:	0e 94 0c 2b 	call	0x5618	; 0x5618 <fputc>
    54b6:	ac 14       	cp	r10, r12
    54b8:	bd 04       	cpc	r11, r13
    54ba:	b1 f7       	brne	.-20     	; 0x54a8 <vfprintf+0x2c2>
    54bc:	4f cf       	rjmp	.-354    	; 0x535c <vfprintf+0x176>
    54be:	60 81       	ld	r22, Z
    54c0:	71 81       	ldd	r23, Z+1	; 0x01
    54c2:	07 2e       	mov	r0, r23
    54c4:	00 0c       	add	r0, r0
    54c6:	88 0b       	sbc	r24, r24
    54c8:	99 0b       	sbc	r25, r25
    54ca:	0e 5f       	subi	r16, 0xFE	; 254
    54cc:	1f 4f       	sbci	r17, 0xFF	; 255
    54ce:	92 cf       	rjmp	.-220    	; 0x53f4 <vfprintf+0x20e>
    54d0:	d3 2c       	mov	r13, r3
    54d2:	e8 94       	clt
    54d4:	d4 f8       	bld	r13, 4
    54d6:	2a e0       	ldi	r18, 0x0A	; 10
    54d8:	30 e0       	ldi	r19, 0x00	; 0
    54da:	85 37       	cpi	r24, 0x75	; 117
    54dc:	e1 f1       	breq	.+120    	; 0x5556 <vfprintf+0x370>
    54de:	23 2d       	mov	r18, r3
    54e0:	29 7f       	andi	r18, 0xF9	; 249
    54e2:	d2 2e       	mov	r13, r18
    54e4:	8f 36       	cpi	r24, 0x6F	; 111
    54e6:	a9 f1       	breq	.+106    	; 0x5552 <vfprintf+0x36c>
    54e8:	f0 f4       	brcc	.+60     	; 0x5526 <vfprintf+0x340>
    54ea:	88 35       	cpi	r24, 0x58	; 88
    54ec:	51 f1       	breq	.+84     	; 0x5542 <vfprintf+0x35c>
    54ee:	f7 01       	movw	r30, r14
    54f0:	86 81       	ldd	r24, Z+6	; 0x06
    54f2:	97 81       	ldd	r25, Z+7	; 0x07
    54f4:	2b 96       	adiw	r28, 0x0b	; 11
    54f6:	0f b6       	in	r0, 0x3f	; 63
    54f8:	f8 94       	cli
    54fa:	de bf       	out	0x3e, r29	; 62
    54fc:	0f be       	out	0x3f, r0	; 63
    54fe:	cd bf       	out	0x3d, r28	; 61
    5500:	df 91       	pop	r29
    5502:	cf 91       	pop	r28
    5504:	1f 91       	pop	r17
    5506:	0f 91       	pop	r16
    5508:	ff 90       	pop	r15
    550a:	ef 90       	pop	r14
    550c:	df 90       	pop	r13
    550e:	cf 90       	pop	r12
    5510:	bf 90       	pop	r11
    5512:	af 90       	pop	r10
    5514:	9f 90       	pop	r9
    5516:	8f 90       	pop	r8
    5518:	7f 90       	pop	r7
    551a:	6f 90       	pop	r6
    551c:	5f 90       	pop	r5
    551e:	4f 90       	pop	r4
    5520:	3f 90       	pop	r3
    5522:	2f 90       	pop	r2
    5524:	08 95       	ret
    5526:	80 37       	cpi	r24, 0x70	; 112
    5528:	49 f0       	breq	.+18     	; 0x553c <vfprintf+0x356>
    552a:	88 37       	cpi	r24, 0x78	; 120
    552c:	01 f7       	brne	.-64     	; 0x54ee <vfprintf+0x308>
    552e:	d4 fe       	sbrs	r13, 4
    5530:	02 c0       	rjmp	.+4      	; 0x5536 <vfprintf+0x350>
    5532:	68 94       	set
    5534:	d2 f8       	bld	r13, 2
    5536:	20 e1       	ldi	r18, 0x10	; 16
    5538:	30 e0       	ldi	r19, 0x00	; 0
    553a:	0d c0       	rjmp	.+26     	; 0x5556 <vfprintf+0x370>
    553c:	68 94       	set
    553e:	d4 f8       	bld	r13, 4
    5540:	f6 cf       	rjmp	.-20     	; 0x552e <vfprintf+0x348>
    5542:	34 fe       	sbrs	r3, 4
    5544:	03 c0       	rjmp	.+6      	; 0x554c <vfprintf+0x366>
    5546:	82 2f       	mov	r24, r18
    5548:	86 60       	ori	r24, 0x06	; 6
    554a:	d8 2e       	mov	r13, r24
    554c:	20 e1       	ldi	r18, 0x10	; 16
    554e:	32 e0       	ldi	r19, 0x02	; 2
    5550:	02 c0       	rjmp	.+4      	; 0x5556 <vfprintf+0x370>
    5552:	28 e0       	ldi	r18, 0x08	; 8
    5554:	30 e0       	ldi	r19, 0x00	; 0
    5556:	f8 01       	movw	r30, r16
    5558:	d7 fe       	sbrs	r13, 7
    555a:	0f c0       	rjmp	.+30     	; 0x557a <vfprintf+0x394>
    555c:	60 81       	ld	r22, Z
    555e:	71 81       	ldd	r23, Z+1	; 0x01
    5560:	82 81       	ldd	r24, Z+2	; 0x02
    5562:	93 81       	ldd	r25, Z+3	; 0x03
    5564:	0c 5f       	subi	r16, 0xFC	; 252
    5566:	1f 4f       	sbci	r17, 0xFF	; 255
    5568:	a5 01       	movw	r20, r10
    556a:	0e 94 3c 2b 	call	0x5678	; 0x5678 <__ultoa_invert>
    556e:	c8 2e       	mov	r12, r24
    5570:	ca 18       	sub	r12, r10
    5572:	3d 2c       	mov	r3, r13
    5574:	e8 94       	clt
    5576:	37 f8       	bld	r3, 7
    5578:	52 cf       	rjmp	.-348    	; 0x541e <vfprintf+0x238>
    557a:	60 81       	ld	r22, Z
    557c:	71 81       	ldd	r23, Z+1	; 0x01
    557e:	90 e0       	ldi	r25, 0x00	; 0
    5580:	80 e0       	ldi	r24, 0x00	; 0
    5582:	0e 5f       	subi	r16, 0xFE	; 254
    5584:	1f 4f       	sbci	r17, 0xFF	; 255
    5586:	f0 cf       	rjmp	.-32     	; 0x5568 <vfprintf+0x382>
    5588:	42 fc       	sbrc	r4, 2
    558a:	02 c0       	rjmp	.+4      	; 0x5590 <vfprintf+0x3aa>
    558c:	83 94       	inc	r8
    558e:	63 cf       	rjmp	.-314    	; 0x5456 <vfprintf+0x270>
    5590:	83 94       	inc	r8
    5592:	83 94       	inc	r8
    5594:	60 cf       	rjmp	.-320    	; 0x5456 <vfprintf+0x270>
    5596:	84 2d       	mov	r24, r4
    5598:	86 78       	andi	r24, 0x86	; 134
    559a:	09 f4       	brne	.+2      	; 0x559e <vfprintf+0x3b8>
    559c:	5c cf       	rjmp	.-328    	; 0x5456 <vfprintf+0x270>
    559e:	f6 cf       	rjmp	.-20     	; 0x558c <vfprintf+0x3a6>
    55a0:	b7 01       	movw	r22, r14
    55a2:	80 e2       	ldi	r24, 0x20	; 32
    55a4:	90 e0       	ldi	r25, 0x00	; 0
    55a6:	0e 94 0c 2b 	call	0x5618	; 0x5618 <fputc>
    55aa:	83 94       	inc	r8
    55ac:	82 14       	cp	r8, r2
    55ae:	c0 f3       	brcs	.-16     	; 0x55a0 <vfprintf+0x3ba>
    55b0:	51 2c       	mov	r5, r1
    55b2:	5e cf       	rjmp	.-324    	; 0x5470 <vfprintf+0x28a>
    55b4:	52 2c       	mov	r5, r2
    55b6:	58 18       	sub	r5, r8
    55b8:	82 14       	cp	r8, r2
    55ba:	08 f4       	brcc	.+2      	; 0x55be <vfprintf+0x3d8>
    55bc:	59 cf       	rjmp	.-334    	; 0x5470 <vfprintf+0x28a>
    55be:	f8 cf       	rjmp	.-16     	; 0x55b0 <vfprintf+0x3ca>
    55c0:	84 2d       	mov	r24, r4
    55c2:	86 78       	andi	r24, 0x86	; 134
    55c4:	09 f4       	brne	.+2      	; 0x55c8 <vfprintf+0x3e2>
    55c6:	66 cf       	rjmp	.-308    	; 0x5494 <vfprintf+0x2ae>
    55c8:	8b e2       	ldi	r24, 0x2B	; 43
    55ca:	41 fe       	sbrs	r4, 1
    55cc:	80 e2       	ldi	r24, 0x20	; 32
    55ce:	47 fc       	sbrc	r4, 7
    55d0:	8d e2       	ldi	r24, 0x2D	; 45
    55d2:	b7 01       	movw	r22, r14
    55d4:	90 e0       	ldi	r25, 0x00	; 0
    55d6:	5c cf       	rjmp	.-328    	; 0x5490 <vfprintf+0x2aa>
    55d8:	b7 01       	movw	r22, r14
    55da:	80 e3       	ldi	r24, 0x30	; 48
    55dc:	90 e0       	ldi	r25, 0x00	; 0
    55de:	0e 94 0c 2b 	call	0x5618	; 0x5618 <fputc>
    55e2:	9a 94       	dec	r9
    55e4:	57 cf       	rjmp	.-338    	; 0x5494 <vfprintf+0x2ae>
    55e6:	8f ef       	ldi	r24, 0xFF	; 255
    55e8:	9f ef       	ldi	r25, 0xFF	; 255
    55ea:	84 cf       	rjmp	.-248    	; 0x54f4 <vfprintf+0x30e>

000055ec <strnlen_P>:
strnlen_P():
    55ec:	fc 01       	movw	r30, r24
    55ee:	05 90       	lpm	r0, Z+
    55f0:	61 50       	subi	r22, 0x01	; 1
    55f2:	70 40       	sbci	r23, 0x00	; 0
    55f4:	01 10       	cpse	r0, r1
    55f6:	d8 f7       	brcc	.-10     	; 0x55ee <strnlen_P+0x2>
    55f8:	80 95       	com	r24
    55fa:	90 95       	com	r25
    55fc:	8e 0f       	add	r24, r30
    55fe:	9f 1f       	adc	r25, r31
    5600:	08 95       	ret

00005602 <strnlen>:
strnlen():
    5602:	fc 01       	movw	r30, r24
    5604:	61 50       	subi	r22, 0x01	; 1
    5606:	70 40       	sbci	r23, 0x00	; 0
    5608:	01 90       	ld	r0, Z+
    560a:	01 10       	cpse	r0, r1
    560c:	d8 f7       	brcc	.-10     	; 0x5604 <strnlen+0x2>
    560e:	80 95       	com	r24
    5610:	90 95       	com	r25
    5612:	8e 0f       	add	r24, r30
    5614:	9f 1f       	adc	r25, r31
    5616:	08 95       	ret

00005618 <fputc>:
fputc():
    5618:	0f 93       	push	r16
    561a:	1f 93       	push	r17
    561c:	cf 93       	push	r28
    561e:	df 93       	push	r29
    5620:	18 2f       	mov	r17, r24
    5622:	09 2f       	mov	r16, r25
    5624:	eb 01       	movw	r28, r22
    5626:	8b 81       	ldd	r24, Y+3	; 0x03
    5628:	81 fd       	sbrc	r24, 1
    562a:	09 c0       	rjmp	.+18     	; 0x563e <fputc+0x26>
    562c:	1f ef       	ldi	r17, 0xFF	; 255
    562e:	0f ef       	ldi	r16, 0xFF	; 255
    5630:	81 2f       	mov	r24, r17
    5632:	90 2f       	mov	r25, r16
    5634:	df 91       	pop	r29
    5636:	cf 91       	pop	r28
    5638:	1f 91       	pop	r17
    563a:	0f 91       	pop	r16
    563c:	08 95       	ret
    563e:	82 ff       	sbrs	r24, 2
    5640:	14 c0       	rjmp	.+40     	; 0x566a <fputc+0x52>
    5642:	2e 81       	ldd	r18, Y+6	; 0x06
    5644:	3f 81       	ldd	r19, Y+7	; 0x07
    5646:	8c 81       	ldd	r24, Y+4	; 0x04
    5648:	9d 81       	ldd	r25, Y+5	; 0x05
    564a:	28 17       	cp	r18, r24
    564c:	39 07       	cpc	r19, r25
    564e:	3c f4       	brge	.+14     	; 0x565e <fputc+0x46>
    5650:	e8 81       	ld	r30, Y
    5652:	f9 81       	ldd	r31, Y+1	; 0x01
    5654:	cf 01       	movw	r24, r30
    5656:	01 96       	adiw	r24, 0x01	; 1
    5658:	99 83       	std	Y+1, r25	; 0x01
    565a:	88 83       	st	Y, r24
    565c:	10 83       	st	Z, r17
    565e:	8e 81       	ldd	r24, Y+6	; 0x06
    5660:	9f 81       	ldd	r25, Y+7	; 0x07
    5662:	01 96       	adiw	r24, 0x01	; 1
    5664:	9f 83       	std	Y+7, r25	; 0x07
    5666:	8e 83       	std	Y+6, r24	; 0x06
    5668:	e3 cf       	rjmp	.-58     	; 0x5630 <fputc+0x18>
    566a:	e8 85       	ldd	r30, Y+8	; 0x08
    566c:	f9 85       	ldd	r31, Y+9	; 0x09
    566e:	81 2f       	mov	r24, r17
    5670:	09 95       	icall
    5672:	89 2b       	or	r24, r25
    5674:	a1 f3       	breq	.-24     	; 0x565e <fputc+0x46>
    5676:	da cf       	rjmp	.-76     	; 0x562c <fputc+0x14>

00005678 <__ultoa_invert>:
__ultoa_invert():
    5678:	fa 01       	movw	r30, r20
    567a:	aa 27       	eor	r26, r26
    567c:	28 30       	cpi	r18, 0x08	; 8
    567e:	51 f1       	breq	.+84     	; 0x56d4 <__ultoa_invert+0x5c>
    5680:	20 31       	cpi	r18, 0x10	; 16
    5682:	81 f1       	breq	.+96     	; 0x56e4 <__ultoa_invert+0x6c>
    5684:	e8 94       	clt
    5686:	6f 93       	push	r22
    5688:	6e 7f       	andi	r22, 0xFE	; 254
    568a:	6e 5f       	subi	r22, 0xFE	; 254
    568c:	7f 4f       	sbci	r23, 0xFF	; 255
    568e:	8f 4f       	sbci	r24, 0xFF	; 255
    5690:	9f 4f       	sbci	r25, 0xFF	; 255
    5692:	af 4f       	sbci	r26, 0xFF	; 255
    5694:	b1 e0       	ldi	r27, 0x01	; 1
    5696:	3e d0       	rcall	.+124    	; 0x5714 <__ultoa_invert+0x9c>
    5698:	b4 e0       	ldi	r27, 0x04	; 4
    569a:	3c d0       	rcall	.+120    	; 0x5714 <__ultoa_invert+0x9c>
    569c:	67 0f       	add	r22, r23
    569e:	78 1f       	adc	r23, r24
    56a0:	89 1f       	adc	r24, r25
    56a2:	9a 1f       	adc	r25, r26
    56a4:	a1 1d       	adc	r26, r1
    56a6:	68 0f       	add	r22, r24
    56a8:	79 1f       	adc	r23, r25
    56aa:	8a 1f       	adc	r24, r26
    56ac:	91 1d       	adc	r25, r1
    56ae:	a1 1d       	adc	r26, r1
    56b0:	6a 0f       	add	r22, r26
    56b2:	71 1d       	adc	r23, r1
    56b4:	81 1d       	adc	r24, r1
    56b6:	91 1d       	adc	r25, r1
    56b8:	a1 1d       	adc	r26, r1
    56ba:	20 d0       	rcall	.+64     	; 0x56fc <__ultoa_invert+0x84>
    56bc:	09 f4       	brne	.+2      	; 0x56c0 <__ultoa_invert+0x48>
    56be:	68 94       	set
    56c0:	3f 91       	pop	r19
    56c2:	2a e0       	ldi	r18, 0x0A	; 10
    56c4:	26 9f       	mul	r18, r22
    56c6:	11 24       	eor	r1, r1
    56c8:	30 19       	sub	r19, r0
    56ca:	30 5d       	subi	r19, 0xD0	; 208
    56cc:	31 93       	st	Z+, r19
    56ce:	de f6       	brtc	.-74     	; 0x5686 <__ultoa_invert+0xe>
    56d0:	cf 01       	movw	r24, r30
    56d2:	08 95       	ret
    56d4:	46 2f       	mov	r20, r22
    56d6:	47 70       	andi	r20, 0x07	; 7
    56d8:	40 5d       	subi	r20, 0xD0	; 208
    56da:	41 93       	st	Z+, r20
    56dc:	b3 e0       	ldi	r27, 0x03	; 3
    56de:	0f d0       	rcall	.+30     	; 0x56fe <__ultoa_invert+0x86>
    56e0:	c9 f7       	brne	.-14     	; 0x56d4 <__ultoa_invert+0x5c>
    56e2:	f6 cf       	rjmp	.-20     	; 0x56d0 <__ultoa_invert+0x58>
    56e4:	46 2f       	mov	r20, r22
    56e6:	4f 70       	andi	r20, 0x0F	; 15
    56e8:	40 5d       	subi	r20, 0xD0	; 208
    56ea:	4a 33       	cpi	r20, 0x3A	; 58
    56ec:	18 f0       	brcs	.+6      	; 0x56f4 <__ultoa_invert+0x7c>
    56ee:	49 5d       	subi	r20, 0xD9	; 217
    56f0:	31 fd       	sbrc	r19, 1
    56f2:	40 52       	subi	r20, 0x20	; 32
    56f4:	41 93       	st	Z+, r20
    56f6:	02 d0       	rcall	.+4      	; 0x56fc <__ultoa_invert+0x84>
    56f8:	a9 f7       	brne	.-22     	; 0x56e4 <__ultoa_invert+0x6c>
    56fa:	ea cf       	rjmp	.-44     	; 0x56d0 <__ultoa_invert+0x58>
    56fc:	b4 e0       	ldi	r27, 0x04	; 4
    56fe:	a6 95       	lsr	r26
    5700:	97 95       	ror	r25
    5702:	87 95       	ror	r24
    5704:	77 95       	ror	r23
    5706:	67 95       	ror	r22
    5708:	ba 95       	dec	r27
    570a:	c9 f7       	brne	.-14     	; 0x56fe <__ultoa_invert+0x86>
    570c:	00 97       	sbiw	r24, 0x00	; 0
    570e:	61 05       	cpc	r22, r1
    5710:	71 05       	cpc	r23, r1
    5712:	08 95       	ret
    5714:	9b 01       	movw	r18, r22
    5716:	ac 01       	movw	r20, r24
    5718:	0a 2e       	mov	r0, r26
    571a:	06 94       	lsr	r0
    571c:	57 95       	ror	r21
    571e:	47 95       	ror	r20
    5720:	37 95       	ror	r19
    5722:	27 95       	ror	r18
    5724:	ba 95       	dec	r27
    5726:	c9 f7       	brne	.-14     	; 0x571a <__ultoa_invert+0xa2>
    5728:	62 0f       	add	r22, r18
    572a:	73 1f       	adc	r23, r19
    572c:	84 1f       	adc	r24, r20
    572e:	95 1f       	adc	r25, r21
    5730:	a0 1d       	adc	r26, r0
    5732:	08 95       	ret

00005734 <eeprom_read_byte>:
eeprom_read_byte():
    5734:	e1 99       	sbic	0x1c, 1	; 28
    5736:	fe cf       	rjmp	.-4      	; 0x5734 <eeprom_read_byte>
    5738:	9f bb       	out	0x1f, r25	; 31
    573a:	8e bb       	out	0x1e, r24	; 30
    573c:	e0 9a       	sbi	0x1c, 0	; 28
    573e:	99 27       	eor	r25, r25
    5740:	8d b3       	in	r24, 0x1d	; 29
    5742:	08 95       	ret

00005744 <eeprom_write_byte>:
eeprom_write_byte():
    5744:	26 2f       	mov	r18, r22

00005746 <eeprom_write_r18>:
    5746:	e1 99       	sbic	0x1c, 1	; 28
    5748:	fe cf       	rjmp	.-4      	; 0x5746 <eeprom_write_r18>
    574a:	9f bb       	out	0x1f, r25	; 31
    574c:	8e bb       	out	0x1e, r24	; 30
    574e:	2d bb       	out	0x1d, r18	; 29
    5750:	0f b6       	in	r0, 0x3f	; 63
    5752:	f8 94       	cli
    5754:	e2 9a       	sbi	0x1c, 2	; 28
    5756:	e1 9a       	sbi	0x1c, 1	; 28
    5758:	0f be       	out	0x3f, r0	; 63
    575a:	01 96       	adiw	r24, 0x01	; 1
    575c:	08 95       	ret

0000575e <__cmpsf2>:
__cmpsf2():
    575e:	0e 94 99 2c 	call	0x5932	; 0x5932 <__fp_cmp>
    5762:	08 f4       	brcc	.+2      	; 0x5766 <__cmpsf2+0x8>
    5764:	81 e0       	ldi	r24, 0x01	; 1
    5766:	08 95       	ret

00005768 <__divsf3>:
__divsf3():
    5768:	0e 94 c8 2b 	call	0x5790	; 0x5790 <__divsf3x>
    576c:	0c 94 d4 2c 	jmp	0x59a8	; 0x59a8 <__fp_round>
    5770:	0e 94 cd 2c 	call	0x599a	; 0x599a <__fp_pscB>
    5774:	58 f0       	brcs	.+22     	; 0x578c <__divsf3+0x24>
    5776:	0e 94 c6 2c 	call	0x598c	; 0x598c <__fp_pscA>
    577a:	40 f0       	brcs	.+16     	; 0x578c <__divsf3+0x24>
    577c:	29 f4       	brne	.+10     	; 0x5788 <__divsf3+0x20>
    577e:	5f 3f       	cpi	r21, 0xFF	; 255
    5780:	29 f0       	breq	.+10     	; 0x578c <__divsf3+0x24>
    5782:	0c 94 bd 2c 	jmp	0x597a	; 0x597a <__fp_inf>
    5786:	51 11       	cpse	r21, r1
    5788:	0c 94 08 2d 	jmp	0x5a10	; 0x5a10 <__fp_szero>
    578c:	0c 94 c3 2c 	jmp	0x5986	; 0x5986 <__fp_nan>

00005790 <__divsf3x>:
__divsf3x():
    5790:	0e 94 e5 2c 	call	0x59ca	; 0x59ca <__fp_split3>
    5794:	68 f3       	brcs	.-38     	; 0x5770 <__divsf3+0x8>

00005796 <__divsf3_pse>:
    5796:	99 23       	and	r25, r25
    5798:	b1 f3       	breq	.-20     	; 0x5786 <__divsf3+0x1e>
    579a:	55 23       	and	r21, r21
    579c:	91 f3       	breq	.-28     	; 0x5782 <__divsf3+0x1a>
    579e:	95 1b       	sub	r25, r21
    57a0:	55 0b       	sbc	r21, r21
    57a2:	bb 27       	eor	r27, r27
    57a4:	aa 27       	eor	r26, r26
    57a6:	62 17       	cp	r22, r18
    57a8:	73 07       	cpc	r23, r19
    57aa:	84 07       	cpc	r24, r20
    57ac:	38 f0       	brcs	.+14     	; 0x57bc <__divsf3_pse+0x26>
    57ae:	9f 5f       	subi	r25, 0xFF	; 255
    57b0:	5f 4f       	sbci	r21, 0xFF	; 255
    57b2:	22 0f       	add	r18, r18
    57b4:	33 1f       	adc	r19, r19
    57b6:	44 1f       	adc	r20, r20
    57b8:	aa 1f       	adc	r26, r26
    57ba:	a9 f3       	breq	.-22     	; 0x57a6 <__divsf3_pse+0x10>
    57bc:	35 d0       	rcall	.+106    	; 0x5828 <__divsf3_pse+0x92>
    57be:	0e 2e       	mov	r0, r30
    57c0:	3a f0       	brmi	.+14     	; 0x57d0 <__divsf3_pse+0x3a>
    57c2:	e0 e8       	ldi	r30, 0x80	; 128
    57c4:	32 d0       	rcall	.+100    	; 0x582a <__divsf3_pse+0x94>
    57c6:	91 50       	subi	r25, 0x01	; 1
    57c8:	50 40       	sbci	r21, 0x00	; 0
    57ca:	e6 95       	lsr	r30
    57cc:	00 1c       	adc	r0, r0
    57ce:	ca f7       	brpl	.-14     	; 0x57c2 <__divsf3_pse+0x2c>
    57d0:	2b d0       	rcall	.+86     	; 0x5828 <__divsf3_pse+0x92>
    57d2:	fe 2f       	mov	r31, r30
    57d4:	29 d0       	rcall	.+82     	; 0x5828 <__divsf3_pse+0x92>
    57d6:	66 0f       	add	r22, r22
    57d8:	77 1f       	adc	r23, r23
    57da:	88 1f       	adc	r24, r24
    57dc:	bb 1f       	adc	r27, r27
    57de:	26 17       	cp	r18, r22
    57e0:	37 07       	cpc	r19, r23
    57e2:	48 07       	cpc	r20, r24
    57e4:	ab 07       	cpc	r26, r27
    57e6:	b0 e8       	ldi	r27, 0x80	; 128
    57e8:	09 f0       	breq	.+2      	; 0x57ec <__divsf3_pse+0x56>
    57ea:	bb 0b       	sbc	r27, r27
    57ec:	80 2d       	mov	r24, r0
    57ee:	bf 01       	movw	r22, r30
    57f0:	ff 27       	eor	r31, r31
    57f2:	93 58       	subi	r25, 0x83	; 131
    57f4:	5f 4f       	sbci	r21, 0xFF	; 255
    57f6:	3a f0       	brmi	.+14     	; 0x5806 <__divsf3_pse+0x70>
    57f8:	9e 3f       	cpi	r25, 0xFE	; 254
    57fa:	51 05       	cpc	r21, r1
    57fc:	78 f0       	brcs	.+30     	; 0x581c <__divsf3_pse+0x86>
    57fe:	0c 94 bd 2c 	jmp	0x597a	; 0x597a <__fp_inf>
    5802:	0c 94 08 2d 	jmp	0x5a10	; 0x5a10 <__fp_szero>
    5806:	5f 3f       	cpi	r21, 0xFF	; 255
    5808:	e4 f3       	brlt	.-8      	; 0x5802 <__divsf3_pse+0x6c>
    580a:	98 3e       	cpi	r25, 0xE8	; 232
    580c:	d4 f3       	brlt	.-12     	; 0x5802 <__divsf3_pse+0x6c>
    580e:	86 95       	lsr	r24
    5810:	77 95       	ror	r23
    5812:	67 95       	ror	r22
    5814:	b7 95       	ror	r27
    5816:	f7 95       	ror	r31
    5818:	9f 5f       	subi	r25, 0xFF	; 255
    581a:	c9 f7       	brne	.-14     	; 0x580e <__divsf3_pse+0x78>
    581c:	88 0f       	add	r24, r24
    581e:	91 1d       	adc	r25, r1
    5820:	96 95       	lsr	r25
    5822:	87 95       	ror	r24
    5824:	97 f9       	bld	r25, 7
    5826:	08 95       	ret
    5828:	e1 e0       	ldi	r30, 0x01	; 1
    582a:	66 0f       	add	r22, r22
    582c:	77 1f       	adc	r23, r23
    582e:	88 1f       	adc	r24, r24
    5830:	bb 1f       	adc	r27, r27
    5832:	62 17       	cp	r22, r18
    5834:	73 07       	cpc	r23, r19
    5836:	84 07       	cpc	r24, r20
    5838:	ba 07       	cpc	r27, r26
    583a:	20 f0       	brcs	.+8      	; 0x5844 <__divsf3_pse+0xae>
    583c:	62 1b       	sub	r22, r18
    583e:	73 0b       	sbc	r23, r19
    5840:	84 0b       	sbc	r24, r20
    5842:	ba 0b       	sbc	r27, r26
    5844:	ee 1f       	adc	r30, r30
    5846:	88 f7       	brcc	.-30     	; 0x582a <__divsf3_pse+0x94>
    5848:	e0 95       	com	r30
    584a:	08 95       	ret

0000584c <__fixsfsi>:
    584c:	0e 94 2d 2c 	call	0x585a	; 0x585a <__fixunssfsi>
    5850:	68 94       	set
    5852:	b1 11       	cpse	r27, r1
    5854:	0c 94 08 2d 	jmp	0x5a10	; 0x5a10 <__fp_szero>
    5858:	08 95       	ret

0000585a <__fixunssfsi>:
    585a:	0e 94 ed 2c 	call	0x59da	; 0x59da <__fp_splitA>
    585e:	88 f0       	brcs	.+34     	; 0x5882 <__fixunssfsi+0x28>
    5860:	9f 57       	subi	r25, 0x7F	; 127
    5862:	98 f0       	brcs	.+38     	; 0x588a <__fixunssfsi+0x30>
    5864:	b9 2f       	mov	r27, r25
    5866:	99 27       	eor	r25, r25
    5868:	b7 51       	subi	r27, 0x17	; 23
    586a:	b0 f0       	brcs	.+44     	; 0x5898 <__fixunssfsi+0x3e>
__fixunssfsi():
    586c:	e1 f0       	breq	.+56     	; 0x58a6 <__fixunssfsi+0x4c>
    586e:	66 0f       	add	r22, r22
    5870:	77 1f       	adc	r23, r23
    5872:	88 1f       	adc	r24, r24
    5874:	99 1f       	adc	r25, r25
    5876:	1a f0       	brmi	.+6      	; 0x587e <__fixunssfsi+0x24>
    5878:	ba 95       	dec	r27
    587a:	c9 f7       	brne	.-14     	; 0x586e <__fixunssfsi+0x14>
    587c:	14 c0       	rjmp	.+40     	; 0x58a6 <__fixunssfsi+0x4c>
    587e:	b1 30       	cpi	r27, 0x01	; 1
    5880:	91 f0       	breq	.+36     	; 0x58a6 <__fixunssfsi+0x4c>
    5882:	0e 94 07 2d 	call	0x5a0e	; 0x5a0e <__fp_zero>
    5886:	b1 e0       	ldi	r27, 0x01	; 1
    5888:	08 95       	ret
    588a:	0c 94 07 2d 	jmp	0x5a0e	; 0x5a0e <__fp_zero>
    588e:	67 2f       	mov	r22, r23
    5890:	78 2f       	mov	r23, r24
    5892:	88 27       	eor	r24, r24
    5894:	b8 5f       	subi	r27, 0xF8	; 248
    5896:	39 f0       	breq	.+14     	; 0x58a6 <__fixunssfsi+0x4c>
    5898:	b9 3f       	cpi	r27, 0xF9	; 249
    589a:	cc f3       	brlt	.-14     	; 0x588e <__fixunssfsi+0x34>
    589c:	86 95       	lsr	r24
    589e:	77 95       	ror	r23
    58a0:	67 95       	ror	r22
    58a2:	b3 95       	inc	r27
    58a4:	d9 f7       	brne	.-10     	; 0x589c <__fixunssfsi+0x42>
    58a6:	3e f4       	brtc	.+14     	; 0x58b6 <__fixunssfsi+0x5c>
    58a8:	90 95       	com	r25
    58aa:	80 95       	com	r24
    58ac:	70 95       	com	r23
    58ae:	61 95       	neg	r22
    58b0:	7f 4f       	sbci	r23, 0xFF	; 255
    58b2:	8f 4f       	sbci	r24, 0xFF	; 255
    58b4:	9f 4f       	sbci	r25, 0xFF	; 255
    58b6:	08 95       	ret

000058b8 <__floatunsisf>:
__floatunsisf():
    58b8:	e8 94       	clt
    58ba:	09 c0       	rjmp	.+18     	; 0x58ce <__floatsisf+0x12>

000058bc <__floatsisf>:
    58bc:	97 fb       	bst	r25, 7
    58be:	3e f4       	brtc	.+14     	; 0x58ce <__floatsisf+0x12>
    58c0:	90 95       	com	r25
    58c2:	80 95       	com	r24
    58c4:	70 95       	com	r23
    58c6:	61 95       	neg	r22
    58c8:	7f 4f       	sbci	r23, 0xFF	; 255
    58ca:	8f 4f       	sbci	r24, 0xFF	; 255
    58cc:	9f 4f       	sbci	r25, 0xFF	; 255
    58ce:	99 23       	and	r25, r25
    58d0:	a9 f0       	breq	.+42     	; 0x58fc <__floatsisf+0x40>
    58d2:	f9 2f       	mov	r31, r25
    58d4:	96 e9       	ldi	r25, 0x96	; 150
    58d6:	bb 27       	eor	r27, r27
    58d8:	93 95       	inc	r25
    58da:	f6 95       	lsr	r31
    58dc:	87 95       	ror	r24
    58de:	77 95       	ror	r23
    58e0:	67 95       	ror	r22
    58e2:	b7 95       	ror	r27
    58e4:	f1 11       	cpse	r31, r1
    58e6:	f8 cf       	rjmp	.-16     	; 0x58d8 <__floatsisf+0x1c>
    58e8:	fa f4       	brpl	.+62     	; 0x5928 <__floatsisf+0x6c>
    58ea:	bb 0f       	add	r27, r27
    58ec:	11 f4       	brne	.+4      	; 0x58f2 <__floatsisf+0x36>
    58ee:	60 ff       	sbrs	r22, 0
    58f0:	1b c0       	rjmp	.+54     	; 0x5928 <__floatsisf+0x6c>
    58f2:	6f 5f       	subi	r22, 0xFF	; 255
    58f4:	7f 4f       	sbci	r23, 0xFF	; 255
    58f6:	8f 4f       	sbci	r24, 0xFF	; 255
    58f8:	9f 4f       	sbci	r25, 0xFF	; 255
    58fa:	16 c0       	rjmp	.+44     	; 0x5928 <__floatsisf+0x6c>
    58fc:	88 23       	and	r24, r24
    58fe:	11 f0       	breq	.+4      	; 0x5904 <__floatsisf+0x48>
    5900:	96 e9       	ldi	r25, 0x96	; 150
    5902:	11 c0       	rjmp	.+34     	; 0x5926 <__floatsisf+0x6a>
    5904:	77 23       	and	r23, r23
    5906:	21 f0       	breq	.+8      	; 0x5910 <__floatsisf+0x54>
    5908:	9e e8       	ldi	r25, 0x8E	; 142
    590a:	87 2f       	mov	r24, r23
    590c:	76 2f       	mov	r23, r22
    590e:	05 c0       	rjmp	.+10     	; 0x591a <__floatsisf+0x5e>
    5910:	66 23       	and	r22, r22
    5912:	71 f0       	breq	.+28     	; 0x5930 <__floatsisf+0x74>
    5914:	96 e8       	ldi	r25, 0x86	; 134
    5916:	86 2f       	mov	r24, r22
    5918:	70 e0       	ldi	r23, 0x00	; 0
    591a:	60 e0       	ldi	r22, 0x00	; 0
    591c:	2a f0       	brmi	.+10     	; 0x5928 <__floatsisf+0x6c>
    591e:	9a 95       	dec	r25
    5920:	66 0f       	add	r22, r22
    5922:	77 1f       	adc	r23, r23
    5924:	88 1f       	adc	r24, r24
    5926:	da f7       	brpl	.-10     	; 0x591e <__floatsisf+0x62>
    5928:	88 0f       	add	r24, r24
    592a:	96 95       	lsr	r25
    592c:	87 95       	ror	r24
    592e:	97 f9       	bld	r25, 7
    5930:	08 95       	ret

00005932 <__fp_cmp>:
__fp_cmp():
    5932:	99 0f       	add	r25, r25
    5934:	00 08       	sbc	r0, r0
    5936:	55 0f       	add	r21, r21
    5938:	aa 0b       	sbc	r26, r26
    593a:	e0 e8       	ldi	r30, 0x80	; 128
    593c:	fe ef       	ldi	r31, 0xFE	; 254
    593e:	16 16       	cp	r1, r22
    5940:	17 06       	cpc	r1, r23
    5942:	e8 07       	cpc	r30, r24
    5944:	f9 07       	cpc	r31, r25
    5946:	c0 f0       	brcs	.+48     	; 0x5978 <__fp_cmp+0x46>
    5948:	12 16       	cp	r1, r18
    594a:	13 06       	cpc	r1, r19
    594c:	e4 07       	cpc	r30, r20
    594e:	f5 07       	cpc	r31, r21
    5950:	98 f0       	brcs	.+38     	; 0x5978 <__fp_cmp+0x46>
    5952:	62 1b       	sub	r22, r18
    5954:	73 0b       	sbc	r23, r19
    5956:	84 0b       	sbc	r24, r20
    5958:	95 0b       	sbc	r25, r21
    595a:	39 f4       	brne	.+14     	; 0x596a <__fp_cmp+0x38>
    595c:	0a 26       	eor	r0, r26
    595e:	61 f0       	breq	.+24     	; 0x5978 <__fp_cmp+0x46>
    5960:	23 2b       	or	r18, r19
    5962:	24 2b       	or	r18, r20
    5964:	25 2b       	or	r18, r21
    5966:	21 f4       	brne	.+8      	; 0x5970 <__fp_cmp+0x3e>
    5968:	08 95       	ret
    596a:	0a 26       	eor	r0, r26
    596c:	09 f4       	brne	.+2      	; 0x5970 <__fp_cmp+0x3e>
    596e:	a1 40       	sbci	r26, 0x01	; 1
    5970:	a6 95       	lsr	r26
    5972:	8f ef       	ldi	r24, 0xFF	; 255
    5974:	81 1d       	adc	r24, r1
    5976:	81 1d       	adc	r24, r1
    5978:	08 95       	ret

0000597a <__fp_inf>:
__fp_inf():
    597a:	97 f9       	bld	r25, 7
    597c:	9f 67       	ori	r25, 0x7F	; 127
    597e:	80 e8       	ldi	r24, 0x80	; 128
    5980:	70 e0       	ldi	r23, 0x00	; 0
    5982:	60 e0       	ldi	r22, 0x00	; 0
    5984:	08 95       	ret

00005986 <__fp_nan>:
__fp_nan():
    5986:	9f ef       	ldi	r25, 0xFF	; 255
    5988:	80 ec       	ldi	r24, 0xC0	; 192
    598a:	08 95       	ret

0000598c <__fp_pscA>:
__fp_pscA():
    598c:	00 24       	eor	r0, r0
    598e:	0a 94       	dec	r0
    5990:	16 16       	cp	r1, r22
    5992:	17 06       	cpc	r1, r23
    5994:	18 06       	cpc	r1, r24
    5996:	09 06       	cpc	r0, r25
    5998:	08 95       	ret

0000599a <__fp_pscB>:
__fp_pscB():
    599a:	00 24       	eor	r0, r0
    599c:	0a 94       	dec	r0
    599e:	12 16       	cp	r1, r18
    59a0:	13 06       	cpc	r1, r19
    59a2:	14 06       	cpc	r1, r20
    59a4:	05 06       	cpc	r0, r21
    59a6:	08 95       	ret

000059a8 <__fp_round>:
__fp_round():
    59a8:	09 2e       	mov	r0, r25
    59aa:	03 94       	inc	r0
    59ac:	00 0c       	add	r0, r0
    59ae:	11 f4       	brne	.+4      	; 0x59b4 <__fp_round+0xc>
    59b0:	88 23       	and	r24, r24
    59b2:	52 f0       	brmi	.+20     	; 0x59c8 <__fp_round+0x20>
    59b4:	bb 0f       	add	r27, r27
    59b6:	40 f4       	brcc	.+16     	; 0x59c8 <__fp_round+0x20>
    59b8:	bf 2b       	or	r27, r31
    59ba:	11 f4       	brne	.+4      	; 0x59c0 <__fp_round+0x18>
    59bc:	60 ff       	sbrs	r22, 0
    59be:	04 c0       	rjmp	.+8      	; 0x59c8 <__fp_round+0x20>
    59c0:	6f 5f       	subi	r22, 0xFF	; 255
    59c2:	7f 4f       	sbci	r23, 0xFF	; 255
    59c4:	8f 4f       	sbci	r24, 0xFF	; 255
    59c6:	9f 4f       	sbci	r25, 0xFF	; 255
    59c8:	08 95       	ret

000059ca <__fp_split3>:
__fp_split3():
    59ca:	57 fd       	sbrc	r21, 7
    59cc:	90 58       	subi	r25, 0x80	; 128
    59ce:	44 0f       	add	r20, r20
    59d0:	55 1f       	adc	r21, r21
    59d2:	59 f0       	breq	.+22     	; 0x59ea <__fp_splitA+0x10>
    59d4:	5f 3f       	cpi	r21, 0xFF	; 255
    59d6:	71 f0       	breq	.+28     	; 0x59f4 <__fp_splitA+0x1a>
    59d8:	47 95       	ror	r20

000059da <__fp_splitA>:
    59da:	88 0f       	add	r24, r24
    59dc:	97 fb       	bst	r25, 7
    59de:	99 1f       	adc	r25, r25
    59e0:	61 f0       	breq	.+24     	; 0x59fa <__fp_splitA+0x20>
    59e2:	9f 3f       	cpi	r25, 0xFF	; 255
    59e4:	79 f0       	breq	.+30     	; 0x5a04 <__fp_splitA+0x2a>
    59e6:	87 95       	ror	r24
    59e8:	08 95       	ret
    59ea:	12 16       	cp	r1, r18
    59ec:	13 06       	cpc	r1, r19
    59ee:	14 06       	cpc	r1, r20
    59f0:	55 1f       	adc	r21, r21
    59f2:	f2 cf       	rjmp	.-28     	; 0x59d8 <__fp_split3+0xe>
    59f4:	46 95       	lsr	r20
    59f6:	f1 df       	rcall	.-30     	; 0x59da <__fp_splitA>
    59f8:	08 c0       	rjmp	.+16     	; 0x5a0a <__fp_splitA+0x30>
    59fa:	16 16       	cp	r1, r22
    59fc:	17 06       	cpc	r1, r23
    59fe:	18 06       	cpc	r1, r24
    5a00:	99 1f       	adc	r25, r25
    5a02:	f1 cf       	rjmp	.-30     	; 0x59e6 <__fp_splitA+0xc>
    5a04:	86 95       	lsr	r24
    5a06:	71 05       	cpc	r23, r1
    5a08:	61 05       	cpc	r22, r1
    5a0a:	08 94       	sec
    5a0c:	08 95       	ret

00005a0e <__fp_zero>:
__fp_zero():
    5a0e:	e8 94       	clt

00005a10 <__fp_szero>:
    5a10:	bb 27       	eor	r27, r27
    5a12:	66 27       	eor	r22, r22
    5a14:	77 27       	eor	r23, r23
    5a16:	cb 01       	movw	r24, r22
    5a18:	97 f9       	bld	r25, 7
    5a1a:	08 95       	ret

00005a1c <__mulsf3>:
__mulsf3():
    5a1c:	0e 94 21 2d 	call	0x5a42	; 0x5a42 <__mulsf3x>
    5a20:	0c 94 d4 2c 	jmp	0x59a8	; 0x59a8 <__fp_round>
    5a24:	0e 94 c6 2c 	call	0x598c	; 0x598c <__fp_pscA>
    5a28:	38 f0       	brcs	.+14     	; 0x5a38 <__mulsf3+0x1c>
    5a2a:	0e 94 cd 2c 	call	0x599a	; 0x599a <__fp_pscB>
    5a2e:	20 f0       	brcs	.+8      	; 0x5a38 <__mulsf3+0x1c>
    5a30:	95 23       	and	r25, r21
    5a32:	11 f0       	breq	.+4      	; 0x5a38 <__mulsf3+0x1c>
    5a34:	0c 94 bd 2c 	jmp	0x597a	; 0x597a <__fp_inf>
    5a38:	0c 94 c3 2c 	jmp	0x5986	; 0x5986 <__fp_nan>
    5a3c:	11 24       	eor	r1, r1
    5a3e:	0c 94 08 2d 	jmp	0x5a10	; 0x5a10 <__fp_szero>

00005a42 <__mulsf3x>:
__mulsf3x():
    5a42:	0e 94 e5 2c 	call	0x59ca	; 0x59ca <__fp_split3>
    5a46:	70 f3       	brcs	.-36     	; 0x5a24 <__mulsf3+0x8>

00005a48 <__mulsf3_pse>:
    5a48:	95 9f       	mul	r25, r21
    5a4a:	c1 f3       	breq	.-16     	; 0x5a3c <__mulsf3+0x20>
    5a4c:	95 0f       	add	r25, r21
    5a4e:	50 e0       	ldi	r21, 0x00	; 0
    5a50:	55 1f       	adc	r21, r21
    5a52:	62 9f       	mul	r22, r18
    5a54:	f0 01       	movw	r30, r0
    5a56:	72 9f       	mul	r23, r18
    5a58:	bb 27       	eor	r27, r27
    5a5a:	f0 0d       	add	r31, r0
    5a5c:	b1 1d       	adc	r27, r1
    5a5e:	63 9f       	mul	r22, r19
    5a60:	aa 27       	eor	r26, r26
    5a62:	f0 0d       	add	r31, r0
    5a64:	b1 1d       	adc	r27, r1
    5a66:	aa 1f       	adc	r26, r26
    5a68:	64 9f       	mul	r22, r20
    5a6a:	66 27       	eor	r22, r22
    5a6c:	b0 0d       	add	r27, r0
    5a6e:	a1 1d       	adc	r26, r1
    5a70:	66 1f       	adc	r22, r22
    5a72:	82 9f       	mul	r24, r18
    5a74:	22 27       	eor	r18, r18
    5a76:	b0 0d       	add	r27, r0
    5a78:	a1 1d       	adc	r26, r1
    5a7a:	62 1f       	adc	r22, r18
    5a7c:	73 9f       	mul	r23, r19
    5a7e:	b0 0d       	add	r27, r0
    5a80:	a1 1d       	adc	r26, r1
    5a82:	62 1f       	adc	r22, r18
    5a84:	83 9f       	mul	r24, r19
    5a86:	a0 0d       	add	r26, r0
    5a88:	61 1d       	adc	r22, r1
    5a8a:	22 1f       	adc	r18, r18
    5a8c:	74 9f       	mul	r23, r20
    5a8e:	33 27       	eor	r19, r19
    5a90:	a0 0d       	add	r26, r0
    5a92:	61 1d       	adc	r22, r1
    5a94:	23 1f       	adc	r18, r19
    5a96:	84 9f       	mul	r24, r20
    5a98:	60 0d       	add	r22, r0
    5a9a:	21 1d       	adc	r18, r1
    5a9c:	82 2f       	mov	r24, r18
    5a9e:	76 2f       	mov	r23, r22
    5aa0:	6a 2f       	mov	r22, r26
    5aa2:	11 24       	eor	r1, r1
    5aa4:	9f 57       	subi	r25, 0x7F	; 127
    5aa6:	50 40       	sbci	r21, 0x00	; 0
    5aa8:	9a f0       	brmi	.+38     	; 0x5ad0 <__mulsf3_pse+0x88>
    5aaa:	f1 f0       	breq	.+60     	; 0x5ae8 <__mulsf3_pse+0xa0>
    5aac:	88 23       	and	r24, r24
    5aae:	4a f0       	brmi	.+18     	; 0x5ac2 <__mulsf3_pse+0x7a>
    5ab0:	ee 0f       	add	r30, r30
    5ab2:	ff 1f       	adc	r31, r31
    5ab4:	bb 1f       	adc	r27, r27
    5ab6:	66 1f       	adc	r22, r22
    5ab8:	77 1f       	adc	r23, r23
    5aba:	88 1f       	adc	r24, r24
    5abc:	91 50       	subi	r25, 0x01	; 1
    5abe:	50 40       	sbci	r21, 0x00	; 0
    5ac0:	a9 f7       	brne	.-22     	; 0x5aac <__mulsf3_pse+0x64>
    5ac2:	9e 3f       	cpi	r25, 0xFE	; 254
    5ac4:	51 05       	cpc	r21, r1
    5ac6:	80 f0       	brcs	.+32     	; 0x5ae8 <__mulsf3_pse+0xa0>
    5ac8:	0c 94 bd 2c 	jmp	0x597a	; 0x597a <__fp_inf>
    5acc:	0c 94 08 2d 	jmp	0x5a10	; 0x5a10 <__fp_szero>
    5ad0:	5f 3f       	cpi	r21, 0xFF	; 255
    5ad2:	e4 f3       	brlt	.-8      	; 0x5acc <__mulsf3_pse+0x84>
    5ad4:	98 3e       	cpi	r25, 0xE8	; 232
    5ad6:	d4 f3       	brlt	.-12     	; 0x5acc <__mulsf3_pse+0x84>
    5ad8:	86 95       	lsr	r24
    5ada:	77 95       	ror	r23
    5adc:	67 95       	ror	r22
    5ade:	b7 95       	ror	r27
    5ae0:	f7 95       	ror	r31
    5ae2:	e7 95       	ror	r30
    5ae4:	9f 5f       	subi	r25, 0xFF	; 255
    5ae6:	c1 f7       	brne	.-16     	; 0x5ad8 <__mulsf3_pse+0x90>
    5ae8:	fe 2b       	or	r31, r30
    5aea:	88 0f       	add	r24, r24
    5aec:	91 1d       	adc	r25, r1
    5aee:	96 95       	lsr	r25
    5af0:	87 95       	ror	r24
    5af2:	97 f9       	bld	r25, 7
    5af4:	08 95       	ret

00005af6 <__udivmodhi4>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    5af6:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    5af8:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    5afa:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    5afc:	07 c0       	rjmp	.+14     	; 0x5b0c <__udivmodhi4_ep>

00005afe <__udivmodhi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    5afe:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    5b00:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    5b02:	a6 17       	cp	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    5b04:	b7 07       	cpc	r27, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    5b06:	10 f0       	brcs	.+4      	; 0x5b0c <__udivmodhi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    5b08:	a6 1b       	sub	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    5b0a:	b7 0b       	sbc	r27, r23

00005b0c <__udivmodhi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    5b0c:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    5b0e:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    5b10:	5a 95       	dec	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    5b12:	a9 f7       	brne	.-22     	; 0x5afe <__udivmodhi4_loop>
__udivmodhi4_ep():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    5b14:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    5b16:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    5b18:	bc 01       	movw	r22, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    5b1a:	cd 01       	movw	r24, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    5b1c:	08 95       	ret

00005b1e <__divmodhi4>:
__divmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
    5b1e:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
    5b20:	07 2e       	mov	r0, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
    5b22:	16 f4       	brtc	.+4      	; 0x5b28 <__divmodhi4+0xa>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
    5b24:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
    5b26:	07 d0       	rcall	.+14     	; 0x5b36 <__divmodhi4_neg1>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
    5b28:	77 fd       	sbrc	r23, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
    5b2a:	09 d0       	rcall	.+18     	; 0x5b3e <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
    5b2c:	0e 94 7b 2d 	call	0x5af6	; 0x5af6 <__udivmodhi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
    5b30:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
    5b32:	05 d0       	rcall	.+10     	; 0x5b3e <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
    5b34:	3e f4       	brtc	.+14     	; 0x5b44 <__divmodhi4_exit>

00005b36 <__divmodhi4_neg1>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
    5b36:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
    5b38:	81 95       	neg	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
    5b3a:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
    5b3c:	08 95       	ret

00005b3e <__divmodhi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
    5b3e:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
    5b40:	61 95       	neg	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
    5b42:	7f 4f       	sbci	r23, 0xFF	; 255

00005b44 <__divmodhi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
    5b44:	08 95       	ret

00005b46 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    5b46:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    5b48:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    5b4a:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    5b4c:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    5b4e:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    5b50:	0d c0       	rjmp	.+26     	; 0x5b6c <__udivmodsi4_ep>

00005b52 <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    5b52:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    5b54:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    5b56:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    5b58:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    5b5a:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    5b5c:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    5b5e:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    5b60:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    5b62:	20 f0       	brcs	.+8      	; 0x5b6c <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    5b64:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    5b66:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    5b68:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    5b6a:	f5 0b       	sbc	r31, r21

00005b6c <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    5b6c:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    5b6e:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    5b70:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    5b72:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    5b74:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    5b76:	69 f7       	brne	.-38     	; 0x5b52 <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    5b78:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    5b7a:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    5b7c:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    5b7e:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    5b80:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    5b82:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    5b84:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    5b86:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    5b88:	08 95       	ret

00005b8a <__divmodsi4>:
__divmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
    5b8a:	05 2e       	mov	r0, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
    5b8c:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
    5b8e:	1e f4       	brtc	.+6      	; 0x5b96 <__divmodsi4+0xc>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
    5b90:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
    5b92:	0e 94 dc 2d 	call	0x5bb8	; 0x5bb8 <__negsi2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
    5b96:	57 fd       	sbrc	r21, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
    5b98:	07 d0       	rcall	.+14     	; 0x5ba8 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
    5b9a:	0e 94 a3 2d 	call	0x5b46	; 0x5b46 <__udivmodsi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
    5b9e:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
    5ba0:	03 d0       	rcall	.+6      	; 0x5ba8 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
    5ba2:	4e f4       	brtc	.+18     	; 0x5bb6 <__divmodsi4_exit>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
    5ba4:	0c 94 dc 2d 	jmp	0x5bb8	; 0x5bb8 <__negsi2>

00005ba8 <__divmodsi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
    5ba8:	50 95       	com	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
    5baa:	40 95       	com	r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
    5bac:	30 95       	com	r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
    5bae:	21 95       	neg	r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
    5bb0:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
    5bb2:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
    5bb4:	5f 4f       	sbci	r21, 0xFF	; 255

00005bb6 <__divmodsi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
    5bb6:	08 95       	ret

00005bb8 <__negsi2>:
__negsi2():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
    5bb8:	90 95       	com	r25
    5bba:	80 95       	com	r24
    5bbc:	70 95       	com	r23
    5bbe:	61 95       	neg	r22
    5bc0:	7f 4f       	sbci	r23, 0xFF	; 255
    5bc2:	8f 4f       	sbci	r24, 0xFF	; 255
    5bc4:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
    5bc6:	08 95       	ret

00005bc8 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    5bc8:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    5bca:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2304
    5bcc:	00 24       	eor	r0, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2305
    5bce:	00 1c       	adc	r0, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2306
    5bd0:	0b be       	out	0x3b, r0	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2312
    5bd2:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2313
    5bd4:	f6 91       	elpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2314
    5bd6:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2319
    5bd8:	09 94       	ijmp

00005bda <__umulhisi3>:
__umulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    5bda:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    5bdc:	b0 01       	movw	r22, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    5bde:	b3 9f       	mul	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    5be0:	c0 01       	movw	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    5be2:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    5be4:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    5be6:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    5be8:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    5bea:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    5bec:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    5bee:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    5bf0:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    5bf2:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    5bf4:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    5bf6:	08 95       	ret

00005bf8 <__muluhisi3>:
__muluhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    5bf8:	0e 94 ed 2d 	call	0x5bda	; 0x5bda <__umulhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    5bfc:	a5 9f       	mul	r26, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    5bfe:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    5c00:	b4 9f       	mul	r27, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    5c02:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    5c04:	a4 9f       	mul	r26, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    5c06:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    5c08:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    5c0a:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    5c0c:	08 95       	ret

00005c0e <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    5c0e:	f8 94       	cli

00005c10 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    5c10:	ff cf       	rjmp	.-2      	; 0x5c10 <__stop_program>
